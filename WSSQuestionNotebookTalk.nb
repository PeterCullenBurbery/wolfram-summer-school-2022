(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    465876,       8615]
NotebookOptionsPosition[    451718,       8376]
NotebookOutlinePosition[    452168,       8393]
CellTagsIndexPosition[    452125,       8390]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["WSS 2022 - Educational Innovation", "Title",
 CellChangeTimes->{{3.8660361487754407`*^9, 
  3.8660361756481524`*^9}},ExpressionUUID->"68c01391-bd50-408a-9cb1-\
0ae631ca7a4f"],

Cell[CellGroupData[{

Cell["Courseware Tools: Introduction to Question Notebook", "Chapter",
 CellChangeTimes->{{3.810920550506324*^9, 3.8109205546642594`*^9}, {
   3.8410999172463245`*^9, 3.8410999183828783`*^9}, {3.8431255192898717`*^9, 
   3.843125528069421*^9}, {3.8431256231335816`*^9, 3.843125633603097*^9}, {
   3.866036159183674*^9, 3.866036160437174*^9}, 3.866036259311537*^9, 
   3.8662048513453317`*^9},ExpressionUUID->"3010add4-50a4-4689-be7d-\
64b109b9c40e"],

Cell["Stephen Schroeder", "Subtitle",
 CellChangeTimes->{{3.843125592699581*^9, 3.843125603313068*^9}, 
   3.8660362634885406`*^9},ExpressionUUID->"a157af38-f7a0-413e-afc1-\
0bd0a914e244"],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"d451eff7-a037-4498-8c05-902c281d8f13"],

Cell[CellGroupData[{

Cell["Outline", "Subsection",
 CellChangeTimes->{{3.8431255506125746`*^9, 
  3.843125553051461*^9}},ExpressionUUID->"b8e7e594-aa96-4452-8eb1-\
3908654b055d"],

Cell[CellGroupData[{

Cell["What is a Question Notebook?", "Item",
 CellChangeTimes->{{3.810920594435015*^9, 3.810920611936963*^9}, {
  3.8109247517923717`*^9, 3.810924751793372*^9}, {3.8410999321965766`*^9, 
  3.8410999332361574`*^9}, {3.8660362829239073`*^9, 3.8660362840672398`*^9}, {
  3.8662040837238874`*^9, 
  3.8662040837253876`*^9}},ExpressionUUID->"ed40c640-31b4-439e-bc84-\
b1f68ccc0e9b"],

Cell[TextData[{
 "Using ",
 StyleBox["QuestionObject", "Input"]
}], "Subitem",
 CellChangeTimes->{{3.810920594435015*^9, 3.810920611936963*^9}, {
  3.8109247517923717`*^9, 3.810924751793372*^9}, {3.8410999321965766`*^9, 
  3.8410999332361574`*^9}, {3.8660362829239073`*^9, 3.8660362840672398`*^9}, {
  3.8662040867032175`*^9, 
  3.866204099096326*^9}},ExpressionUUID->"c83dfd46-a633-420a-85c0-\
87fbafc4dcce"]
}, Open  ]],

Cell["Question Notebook Introduction and Demonstration", "Item",
 CellChangeTimes->{{3.810920594435015*^9, 3.810920611936963*^9}, {
  3.8109247521494527`*^9, 3.8109247551684103`*^9}, {3.8411032669286423`*^9, 
  3.841103266929142*^9}, {3.8411037074047403`*^9, 3.8411037088104124`*^9}, {
  3.8432957285526023`*^9, 3.843295730664254*^9}, {3.86603628702921*^9, 
  3.866036299103825*^9}},ExpressionUUID->"330c8605-946d-4cf6-804f-\
5a966db1892b"],

Cell["Question/Working session", "Item",
 CellChangeTimes->{{3.810920594435015*^9, 3.810920611936963*^9}, {
  3.8109247521494527`*^9, 3.8109247551684103`*^9}, {3.841103268745267*^9, 
  3.8411032709093056`*^9}, {3.866036301765974*^9, 
  3.8660363362249365`*^9}},ExpressionUUID->"f99f274f-c87e-4efb-bd72-\
b2023cfc9918"],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"9188c496-6ebd-4bec-bafd-e6146936b064"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["What is a Question Notebook?", "Chapter",
 CellChangeTimes->{{3.810920742414005*^9, 3.8109207475451694`*^9}, {
  3.841099926170697*^9, 3.8410999285322175`*^9}, {3.8660363422631874`*^9, 
  3.8660363433319197`*^9}},ExpressionUUID->"c4eea4cb-3c01-4f82-8177-\
55ee537ab5e1"],

Cell["\<\
Specifically designed to allow educators to easily create coursework using \
the power of the Wolfram Language\
\>", "Item",
 CellChangeTimes->{{3.81092124692151*^9, 3.8109212644918613`*^9}, {
  3.8109213611151557`*^9, 3.8109214041654954`*^9}, {3.810921491042684*^9, 
  3.810921576312876*^9}, {3.8109216166589317`*^9, 3.810921674694649*^9}, {
  3.810922106777423*^9, 3.8109221438318853`*^9}, {3.841100006018042*^9, 
  3.8411000223161955`*^9}},ExpressionUUID->"c1d3c731-bbf2-4122-a5fb-\
062fa4b425db"],

Cell[CellGroupData[{

Cell[TextData[{
 "Question Notebook is in 13.1 under ",
 StyleBox["File",
  FontSlant->"Italic"],
 ">",
 StyleBox["New",
  FontSlant->"Italic"],
 ">",
 StyleBox["Programmatic Notebook",
  FontSlant->"Italic"]
}], "Item",
 CellChangeTimes->{{3.8109209706048336`*^9, 3.810920999789795*^9}, {
  3.811073708760564*^9, 3.8110737399680243`*^9}, {3.8410999440915146`*^9, 
  3.841099954523664*^9}, {3.8660363553700857`*^9, 3.866036362758874*^9}, {
  3.866194457432562*^9, 3.8661944574869137`*^9}, {3.866194561332238*^9, 
  3.8661945627095485`*^9}},ExpressionUUID->"9d56fa69-cac4-48e4-8dd6-\
55347f566c6a"],

Cell["Previously called Q & A Form Notebook pre-13", "Subitem",
 CellChangeTimes->{{3.8109209706048336`*^9, 3.810920999789795*^9}, {
  3.811073708760564*^9, 3.8110737399680243`*^9}, {3.8410999440915146`*^9, 
  3.841099954523664*^9}, {3.8660363553700857`*^9, 3.866036362758874*^9}, {
  3.866194460699855*^9, 
  3.866194486735553*^9}},ExpressionUUID->"e1bce573-c28f-4b2f-a590-\
ca06a9d9a14a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
A Question Notebook has a notebook-based special authoring environment\
\>", "Item",
 CellChangeTimes->{{3.8109208217690725`*^9, 3.8109208260940404`*^9}, {
  3.8109209390018806`*^9, 3.810920949741155*^9}, {3.8109210235511107`*^9, 
  3.8109210466173153`*^9}, {3.810921091207409*^9, 3.8109210946291847`*^9}, {
  3.8109211433175693`*^9, 3.810921162929159*^9}, {3.8110737724890766`*^9, 
  3.811073773107216*^9}, {3.8410999602196665`*^9, 3.841099961106571*^9}, {
  3.8411044106301494`*^9, 3.8411044106306496`*^9}, {3.841104457981763*^9, 
  3.841104457981763*^9}, {3.866036373221859*^9, 
  3.866036374330874*^9}},ExpressionUUID->"19b79643-ed17-44ed-9ee2-\
73d6913dcb41"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3f9vFPedx/Hq7pf78f6F+yPapNemaZt+M+2dk5S6DVKhTXCbKxYVIZXF
FSJBKDoEsRQFo4CEidTEOesqG3GBWIAbQ/E3zAJmMXGwHWynBtuBMwabQLzB
99n5zMx+ZuYzszO7653N+PmQLrc7Xz+fGbZ++eP3fPZfnv/9s7/5h6985Sub
/0n859lf13/npZd+veWn/yze/Gzj5v/47cba9VUbX679be1Ljz//j2Lh++L/
3hMvsq+rAAAAAFRVffUbP4q7CQAAAEBFIBsDAAAA0te+GXcLAAAAgMpANkZl
2rZtW0NDQ9ytAAAAKwvZGJXpyJEj6XQ67lYAAICVhWyMykQ2BgAA5fdVTzb+
1a9+NVCo7u7utra2OPqBpCEbAwCA8vNm49WrV584cWLecCKi0dHRpaWlOPqB
pCEbAwCA8vvaE6tcS1YbRMoNGAF+RqfKGHP+Umfjmhd+98vquBuxzDbva8v6
85/WLveZ1v7pz0WciWwMAADKz5uNZb4V3n77bdcqkZllYF6zZs2lS5dcBRUN
DQ1hs3HNC7ubjITW/EZ9LGFUBsR9m9Vl2//2aUa0/v615mVMjWZe9ATGwnKk
rhv5tIwYd/d2z/YoexVie8/tIs5ENgYAAOXnzcZCfX391NSUNxt3d3eL5SIh
i9cbPERgzp+Nq+tbh2YXl1SZ+U969teWrkshbOy4mT3zSIu6sPkj2a5bZ/+4
fGc28+LS0tzF16u9y6PlSG038iEbAwAA+NHWVDQ0NNjZWCZh4cCBA/Pz8zt2
7Kgyaiq2ejz//PN5snH1rp5bGZmHH96aGBoaGr15z8zJ90dayhiPzdTmDJXV
dQc700OpI6/ULP+Zs5fgZscfPMuj5UhtN/JJajY2++W+HC3DjzRtkBsbS+39
NIxDmRu4rrJyhJzc3dW1RHeikZZVq9S11i7WxrpDiH0cTXGetQw3FgCACifi
qwilhe2rzcYiAy9ZNRWjo6MiFYtILBaKF3IbkY37PPLWVOw9f8fMwa119php
zZ4+mZcz40eXvQLW8vrF+eihsiTMHJPJiD4/HGlZ61oeLdgU1I2EZmMleTqu
R9mysTyRR24L3xPpzmJv7Gi5Jxu7wrj+EgAAsHLU19fLqSGkAuZP09ZUVBmR
WGZj8V85Z0WYgwdl4+q3rj7INvLhh2+5Koz/0DljxIqZTmsg1XxeTCmktep0
PbW1Vuly0+4XvOO91b+sf6PZudY40MC0cb2mB9qUg+Y9haY4Wu4jq4StkzW/
8ZL/yLMZZj7+8MOH4v/NpfY6l3tzpKYLwd1w7edptJKNrW201y5Pz0Ns4u1T
df0Bo6X/c/A/n/O9RKZo2djo1e2enhF3MsybjYPaq2ybJxtbWVYNy7lFq/TH
sZJtdpFfNtYc0s7GuqHy7DFJxgCAlUkEYznAqxoYGIh0EO2zeOIg4sh2TcXU
1JSIynZxRZXxLF6bpampSd3XNxsfGpTRePCQZ9XGjhtGOL7ZsVEuCI4Rlpo9
nZ/MZ3J9z9wZfCtXmFH7VtpR2Lx4b6JzT412pE0edHv3rbynWFqcHWqtz2XA
7d0y6p5623GyxZmzu57WXgXz9BPHXjdeZCaO1arLHbmsus55VLUy278bmv3u
T3bssttsXtvJy6mbD3M9W5xNv+UoasnX8zAXx9Wn2paR+0ZzQtXPRMrGZjTe
bqfH3JpyZGOfPXP/aLOFE7rjtIw8cjTclY1HRpzdcWRj3UcCAICV7MSJE+In
owixIiTbb4VI9RXamgo5v7H9LF5DQ8OGDRvUbZ555pkmy/79++3lAdl4Y8fN
RzIVaionDl1x5uYQ2diuXV68d3PUrlzO3Dor40n1W8bArIiT0/babCZbtbH5
/NDYLWPd0t0bQ4aTrxmncGdj+xSyOtoujlaynZmNcxtNmKE0M350ne4y5FLU
2qPjxrQYg4eqq3TpykqSZgcnbskkm7nVk825/t2w9jNLus39crNvKCOSi7Nq
t5QC6BA9D3Nx1D5Z25vtzy9KNlYSsTsclyMb+xeP2PsGZmPfceORFmdJuSMb
a/sAAMAKtmPHDhFfRXCVb+251+TjciEFzG/snacir4BsHDjK5Y6l+bOxlSzV
sNZ328zXq+zt587vMVfXvLLTHtLUt8XdCPMUyjmq69on5KL0m9Y+8kj3x4+Z
R6/ef9kYy9eNj1c5Y5Tfa8Pe1JwShY0e7L8sF02e2OjfDbmfmkBrWz/OZmhr
UN68tg9v/m1PjePK5f76r+/5otrzUBfH7lN1XasR2DPz10I/chkhG6t52P18
YsmysZYjG2v+adtrtNlYXaLNxrkBZXkiNRt7TupoJ4PJAACISCx/LEbLxt/6
sWtJwPzGeRU5bpy51izf583G1a0fGwFvsr8tp2tsIRfwtp+Vw5Tz00M9R1wV
wKGysXkKV1Q6NGiM1c5ffN3cx3Mkc2I1n3TiHEs9NGgkxvGja82z2Sfb1Tdr
XJGRFmWQ1Tq0eQ113TD3mx06kbsu/5ueUTbTPYtnHenj1qdX+fZc3iPZ83AX
x+zr5R5zBHyyPcJcJOGzsXOo2JUZKy4bu1jFw77ZWO0f2RgAgJBWr149MDAg
fiZOTU1F2vGxJ93ZuMo5v7Gcu9g+i6zfUOuNbVu3bg2qN26+Zgw8BtUb2zML
583Gfs/nL+UGP6tq9/dMWFPEZf/yn6uFDZWNfTZytcObjX3+Bu/c38pftceM
sda51F79s12unOZcqmthQJALyMbKwlWhLk+4i+O+Sc5p6/IInY19umx1V04f
oa2IcE2GVp6aClcjV63SnkVXzjzSosnGnpN6Kq4BAFhxRGTt7u5eUmqPw3vs
yZ94j6bObyyOLA4r4rFdhywCsFpvbNu8eXNQNl57dEyGY995KqzxxhDZeO2x
iey7z/9vYsjtfPNG5djZaRQ609PykbH7g4eeXuU9mHUKZzY2T5F7QNBgTptm
Jfxis7FVA/Hww7+dn1WXu85TpWuSrhvmfvM3hz0XRpYja7OxOdpsRjWfnl+4
l2tRuIuTm8v5Vl+7URASIR2HzcbBU6NZd1X7q0CpsrFfwVDAs3j2tQkxbmxv
fntk5HZuF5+Tko0BAJDBWKRZ1xNzYTzmqalwzW8sa4/FEhmS7e/+8KoKnqfC
nsRNBKU9uRIHqxRVN/2VPalb7ktDXH85n7u8X62WqK62Y3f1roMHc7Mo150y
qhHup9/MppQ/npUp2Fnf4a43trLH7T67dNcsgsjNxVx8Nq5a2zKSrUR4+PCh
ury6ZcTo8MOPW+06hD903DSWWTO/6bph7peZaK9TfwNRLozZvPn0QevK2fXG
Iuk6Upez5wtqz0NdHHMbWZO8tvna/SjpOGQ21lVHOFOoeVu9Ew3nBm2r1PaW
aQ43+wrKPYKzsWv+5oA53MjGAICVzi4Ptr+YIxJvNpbUZ/HEKWRatk+xZs2a
S5cuDTjl/e6P3NQLRhVwe1tbZ8qe18ExfYGdqmbSnW3tPaO5Gcnsn/lm1MoW
S4xmDyU2G5qev29+nYZca52mvef6nYwMf783YoVZGLt0fzLV3tbe2SIH/9zz
VFinkM3IHcWeDKMk2TiXeZ3LzYLppcyd68alSs+YjbFnnPDpxll7/o5sq82L
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
YcVWZdzZWYyhDkjnzmBXSZhHlfvotlVP6zi6vj1Rvfvuu+Pj49MeDx48sI/e
39/vt3tlZGNXZnKnFXPjcfNlbkTXcRj51o4kjiCiG45dr9lbvyZENna03LVW
vlbGJ62XmlZpj2qNXbt7Hnz9SqHobFzKO2uNNIe9s+sdeyncv1zYMdc1hqx7
StJ5erEw9/b4mLLet48lEfUzCwCIUTqdlsUS9qCx67E7scoePRax2ZuWg2mz
cf5o7K248IuuBm1+daxyHdAZrh3barOxf3tK4vDhw3Y2DgjGuysjGythw5FJ
NGXAjr1qnbs5ahW0f6ZfvmzsPb7c2TiqHRTd58iXjTV9cbQ2z/XTOHny5Pbt
2+23e/bsaWpq8tk2q8hsrNyjSHfWdVzzzmpHgIvKxs5x6uDr6F9RrZ/gxKeP
elHvS9TPLAAgXnKg2J6iTaRftaJYBGP7AT3xv/9qig4jIBtbgVYzeOuqaZBb
yO2t6Gru7YjZ6nauw1gnUSNtz5S9qbnaEaSd9R5+7Sle+GC8u7Kz8XpXsjEX
+/y93vmnb1cgyZ+NveucBcdhsrHXHdeAqDOEhcvGupJmdfw1dDYWHzexcmFh
QcYwEcDEa7Gkvr5et3nWMmXj9QXdWVlTEf7OqufxL2fQZti8I/qObvr9quL4
V+HfxALuS9TPLAAgRiLoNjY2urKxOhmFLDyWr+W8x/Y8b2GEGDf2ZmPt2LAj
G7tCrTP/OqnrvIO9zlP5ZOOg9hQpUjDeXfHZ2J0ysptqxo09W0ZJUO4/5HsW
h3gWL19Cyx10VglK5R837urqkjFMfOhkAItl3Ni7o/POatuyLNnY53G5UNnY
PZmFb/M9j/15RL0vUT+zAIAYyXpj10CxjMoiNouQ7B1GXqZ6Y2Vs1pV/NbsG
ZGN9sYN3nXOo2HFYfTZeljnm7O/FCxOMd1d2NhZv3A+lGe81Xx637/hxTaGv
58Q+ESrMHG7OI/jV0zr6clzppr3cTMfKGLejVYXUG0fIxuutGCYFB7D1y1lT
UcCdDcjG/l0OzMZ2lbH7Sua9M94+W7/2KDUV2j76iXRfon5mAQAxEgHYOy2b
DMCC/eXRNvFTQKTl8MfPM0+FkjfVugXHA3NZra0+OdURY824qyRgez9PNnbU
RVgjzs63ruIMfXuK9O67705PT4f8wujdBc7hVpZsHDQJgO6P744yT08KCZhp
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
    "], {{0, 137.23284589426322`}, {710.9111361079865, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{710.9111361079865, 137.23284589426322`},
  PlotRange->{{0, 710.9111361079865}, {0, 137.23284589426322`}}]], "Input",Exp\
ressionUUID->"a6d7cc5b-5dca-4d85-b4ef-eaea2962de21"]
}, Open  ]],

Cell["Courseware can be deployed and responded to on wolfram cloud", "Item",
 CellChangeTimes->{{3.866196168967453*^9, 3.8661962154542136`*^9}, {
  3.866204501083881*^9, 
  3.8662045012799807`*^9}},ExpressionUUID->"a2f25d89-97f4-4d73-8d00-\
4d0eb4dc11a4"],

Cell[TextData[{
 "Uses ",
 StyleBox["QuestionObject", "Input"],
 StyleBox[",", "Text"],
 StyleBox[" QuestionSelector", "Input"],
 StyleBox[",", "Text"],
 StyleBox[" QuestionGenerator", "Input"]
}], "Item",
 CellChangeTimes->{{3.8109243911109705`*^9, 3.810924520152197*^9}, {
   3.8109245893707724`*^9, 3.810924593179631*^9}, {3.833362555309*^9, 
   3.8333626004790044`*^9}, {3.8333627817139225`*^9, 3.8333627817159224`*^9}, 
   3.8410999954513545`*^9, {3.841105337027954*^9, 3.8411053600529613`*^9}, {
   3.8411056038001957`*^9, 3.841105639657057*^9}, {3.866036381656056*^9, 
   3.86603638833779*^9}, {3.8661944952054467`*^9, 3.866194495213996*^9}, {
   3.8661961428695445`*^9, 
   3.866196142871546*^9}},ExpressionUUID->"bc68ff30-7144-4f2b-8b2c-\
6337f7773c2d"],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"8e5ef5da-d263-4a2d-9bfd-7c90a1a6ff62"],

Cell[CellGroupData[{

Cell["QuestionObject", "Subsection",
 CellChangeTimes->{{3.8109241593792324`*^9, 3.8109241716930075`*^9}, {
  3.810924206623167*^9, 3.810924207536374*^9}, {3.810924303392829*^9, 
  3.8109243094711957`*^9}, {3.8411033607082977`*^9, 
  3.8411033638716726`*^9}},ExpressionUUID->"68f3565f-f714-4ce8-8e78-\
f570061c71e7"],

Cell["Extended question types", "Item",
 CellChangeTimes->{{3.8109243911109705`*^9, 3.810924520152197*^9}, {
  3.8109245893707724`*^9, 3.810924593179631*^9}, {3.833362555309*^9, 
  3.8333626004790044`*^9}, {3.833362787819368*^9, 
  3.8333627941691785`*^9}},ExpressionUUID->"5c395187-99ea-4340-b955-\
54c268d10d6d"],

Cell["In-notebook markup of responses", "Item",
 CellChangeTimes->{{3.8109243911109705`*^9, 3.810924520152197*^9}, {
  3.8109245893707724`*^9, 3.810924593179631*^9}, {3.833362555309*^9, 
  3.8333625793739386`*^9}, {3.8333626113031073`*^9, 
  3.8333626550598392`*^9}},ExpressionUUID->"ca86f658-8b14-4906-8e83-\
0697837af450"],

Cell["Automatic grading with AssessmentFunction", "Item",
 CellChangeTimes->{{3.8109243911109705`*^9, 3.810924520152197*^9}, {
  3.8109245893707724`*^9, 3.810924593179631*^9}, {3.833362555309*^9, 
  3.8333625793739386`*^9}, {3.8333626113031073`*^9, 3.8333626714522038`*^9}, {
  3.8411057080344114`*^9, 
  3.8411057129330792`*^9}},ExpressionUUID->"7d019c41-f450-4cee-bd6d-\
c1f6d4ff44a2"],

Cell[TextData[StyleBox["Sample poll-style question without Assessment:", \
"CodeText"]], "Text",
 CellChangeTimes->{{3.8661953406707277`*^9, 
  3.8661953787136917`*^9}},ExpressionUUID->"7fbf6835-59dc-4f8d-b41a-\
e4fc00630aba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"QuestionInterface", "[", 
   RowBox[{"\"\<MultipleChoice\>\"", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{
      "\"\<Prompt\>\"", "->", 
       "\"\<Which beverage are you currently drinking?\>\""}], ",", 
      RowBox[{"\"\<Choices\>\"", "->", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Coffee\>\"", ",", "\"\<Tea\>\"", ",", "\"\<Water\>\"", ",", 
         "\"\<Soda\>\"", ",", "\"\<Other\>\""}], "}"}]}], ",", 
      RowBox[{"\"\<ChoiceOrdering\>\"", "->", "Identity"}]}], "|>"}]}], "]"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.8661952457816296`*^9, 3.8661952479402027`*^9}, 
   3.8661952842518015`*^9, {3.8661955077090254`*^9, 3.8661955419840946`*^9}, {
   3.866195661521983*^9, 3.866195701521017*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"714260e7-1df0-438a-bdfd-d7d04203fc07"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = "", 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = "", 
   QuestionFramework`Private`questionnotebookflag$$ = False, 
   QuestionFramework`Private`qmflag$$ = False, 
   QuestionFramework`Private`ch$$ = {
   "Coffee", "Tea", "Water", "Soda", "Other"}}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Which beverage are you currently drinking?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], 
          QuestionFramework`Private`ch$$, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, None]}, {
         If[
          Or[None === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              None[
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|
              "Choices" -> {"Coffee", "Tea", "Water", "Soda", "Other"}, 
               "ChoiceOrdering" -> Identity, "MaxAnswers" -> 1, "MinAnswers" -> 
               1, "Prompt" -> "Which beverage are you currently drinking?"|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""]}}, Alignment -> 
       Which[QuestionFramework`Private`qmflag$$, Center, True, Left], 
       Spacings -> {1, 1}], ImageSize -> 
      Which[QuestionFramework`Private`questionnotebookflag$$, {
        Full, Automatic}, QuestionFramework`Private`qmflag$$, {
         Scaled[0.6], Automatic}, True, Automatic], Background -> 
      GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{195., {60.433593688416295`, 64.5664063115837}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   "MultipleChoice", <|
    "Prompt" -> "Which beverage are you currently drinking?", 
     "Choices" -> {"Coffee", "Tea", "Water", "Soda", "Other"}, 
     "ChoiceOrdering" -> Identity|>], None]]], "Output",
 CellChangeTimes->{
  3.8661952872827854`*^9, 3.866195542540593*^9, {3.866195665814106*^9, 
   3.866195701923024*^9}, 3.866203189416417*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"4b89eea1-8c2b-460a-88e1-e5395783f394"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["AssessmentFunction", "Subsection",
 CellChangeTimes->{{3.8411054933855085`*^9, 
  3.8411054952893915`*^9}},ExpressionUUID->"0dec06d6-5c1d-41ed-9f55-\
c9b4ed1fc68d"],

Cell["The automated grading tool ", "Item",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000419461879*^9}, {3.811000555523288*^9, 
  3.811000568545648*^9}, {3.8411033922228336`*^9, 3.8411033922233334`*^9}, {
  3.841105512791215*^9, 
  3.841105520285949*^9}},ExpressionUUID->"a70606d4-f874-416f-979c-\
065a80d471be"],

Cell["\<\
Options include partial credit, explanations, tolerance, and custom scoring \
\>", "Item",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000425030274*^9}, {3.811000594057*^9, 
  3.8110007473148127`*^9}, {3.8110007803383417`*^9, 3.811000839133788*^9}, {
  3.811000909501555*^9, 3.811000917315507*^9}, {3.811001624410317*^9, 
  3.811001628986607*^9}, {3.811004547182515*^9, 
  3.8110045514123917`*^9}},ExpressionUUID->"5fc2759a-0642-4229-9356-\
375e3bde60f5"],

Cell[CellGroupData[{

Cell["Some built in comparison methods include:", "Item",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000425030274*^9}, {3.811000594057*^9, 
  3.8110007473148127`*^9}, {3.8110007803383417`*^9, 3.811000839133788*^9}, {
  3.811000909501555*^9, 3.8110009502899942`*^9}, {3.8110010023371773`*^9, 
  3.811001004753561*^9}},ExpressionUUID->"6bed1a7c-178a-4b77-9ae6-\
313960005b26"],

Cell["CodeEquivalence", "Subitem",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000425030274*^9}, {3.811000594057*^9, 
  3.8110007473148127`*^9}, {3.8110007803383417`*^9, 3.811000839133788*^9}, {
  3.811000909501555*^9, 3.811000983289016*^9}, {3.811002199831609*^9, 
  3.8110022044933977`*^9}, {3.84323319082082*^9, 
  3.8432331929978437`*^9}},ExpressionUUID->"b1fcacac-d3b5-49c1-8667-\
bdd733fce871"],

Cell["Color", "Subitem",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000425030274*^9}, {3.811000594057*^9, 
  3.8110007473148127`*^9}, {3.8110007803383417`*^9, 3.811000839133788*^9}, {
  3.811000909501555*^9, 3.811000994311596*^9}, {3.843233165932692*^9, 
  3.843233166746161*^9}},ExpressionUUID->"1c080462-fa1c-41fe-a51f-\
6660cbbd5ecc"],

Cell["GeoPosition", "Subitem",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
   3.811000378496037*^9, 3.811000425030274*^9}, {3.811000594057*^9, 
   3.8110007473148127`*^9}, {3.8110007803383417`*^9, 3.811000839133788*^9}, {
   3.811000909501555*^9, 3.8110009988500347`*^9}, 3.811002203262916*^9, {
   3.8411035808723707`*^9, 3.841103580873871*^9}, {3.843233178303935*^9, 
   3.843233180521791*^9}},ExpressionUUID->"1eb89f0c-d5ef-4252-9fb0-\
a031cc2c0405"],

Cell["Vector", "Subitem",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
   3.811000378496037*^9, 3.811000425030274*^9}, {3.811000594057*^9, 
   3.8110007473148127`*^9}, {3.8110007803383417`*^9, 3.811000839133788*^9}, {
   3.811000909501555*^9, 3.8110009988500347`*^9}, 3.811002203262916*^9, {
   3.8411035815143733`*^9, 3.8411036063963776`*^9}, {3.841105886907139*^9, 
   3.841105887147211*^9}, {3.843233147738776*^9, 3.843233149969697*^9}, {
   3.843233186673684*^9, 
   3.8432331940092363`*^9}},ExpressionUUID->"adfeea0a-cb7e-4766-9327-\
af0967d6bcce"]
}, Open  ]],

Cell["Sample question using CodeEquivalence", "CodeText",
 CellChangeTimes->{{3.866195880063675*^9, 
  3.866195891107605*^9}},ExpressionUUID->"df6c4c86-8617-4e66-ba88-\
6cc93d403fc1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"\"\<Simplify a^2 + 2 a b + b^2\>\"", ",", 
   RowBox[{"AssessmentFunction", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"a", "+", "b"}], ")"}], "^", "2"}], "]"}], "->", "1"}], 
      "}"}], ",", "\"\<CodeEquivalence\>\""}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.866195894902441*^9, 3.8661958949029417`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"3268dc0f-cb15-457c-900f-2eaa8c63c071"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Simplify a^2 + 2 a b + b^2", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], Boxes, FieldSize -> 
          Large, BaseStyle -> {
           "Code", FormatType -> StandardForm, FontSize -> Medium}], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          
          AssessmentFunction[{
           HoldPattern[($CellContext`a + $CellContext`b)^2] -> 1}, 
           "CodeEquivalence"]]}, {
         If[
          Or[
          AssessmentFunction[{
             HoldPattern[($CellContext`a + $CellContext`b)^2] -> 1}, 
             "CodeEquivalence"] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              
              AssessmentFunction[{
               HoldPattern[($CellContext`a + $CellContext`b)^2] -> 1}, 
               "CodeEquivalence"][
               Apply[HoldPattern, 
                ToExpression[
                QuestionFramework`Private`input$$, StandardForm, Hold]], 
               "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|
              "MaxAnswers" -> 1, "MinAnswers" -> 1, "Prompt" -> 
               "Simplify a^2 + 2 a b + b^2"|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{382., {64.4335936884163, 68.5664063115837}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "Simplify a^2 + 2 a b + b^2"], 
   AssessmentFunction[{HoldPattern[($CellContext`a + $CellContext`b)^2] -> 1},
     "CodeEquivalence"]]]], "Output",
 CellChangeTimes->{3.8661958965997863`*^9, 3.8661959811856427`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"ec4be0ae-07d3-44ec-ac67-4c0dac59a6cc"]
}, Open  ]],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"4d815b14-258c-45ec-9c8d-0356df65d306"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Question Types:", "Subsection",
 CellChangeTimes->{{3.810920742414005*^9, 3.8109207475451694`*^9}, {
  3.8333752956830187`*^9, 3.833375307460175*^9}, {3.843233270936673*^9, 
  3.843233277229805*^9}},ExpressionUUID->"1dfbaf18-0aa6-48a0-bbc8-\
26eb69de9848"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"QuestionInterface", "[", 
   RowBox[{"\"\<TrueFalse\>\"", ",", "\"\<Science is cool!\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.833375190313468*^9, 3.833375272548555*^9}, {
   3.834677375071609*^9, 3.834677375149537*^9}, 3.834747420571093*^9, {
   3.842972104187839*^9, 3.842972128653275*^9}, {3.8661963287597218`*^9, 
   3.8661963307728024`*^9}, {3.866196385046032*^9, 3.866196385862376*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"7f09f8fa-e12f-4883-9fa1-d0613cb9179e"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = True, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Science is cool!", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, None]}, {
         If[
          Or[None === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              None[
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|
              "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
               1, "Prompt" -> "Science is cool!"|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{82., {39.933593688416295`, 44.066406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface["TrueFalse", <|"Prompt" -> "Science is cool!"|>], 
   None]]], "Output",
 CellChangeTimes->{{3.842972108077524*^9, 3.8429721349816*^9}, 
   3.8430415853486223`*^9, {3.843226719042465*^9, 3.843226727237892*^9}, {
   3.843232537814492*^9, 3.843232540874854*^9}, 3.866196331191613*^9, 
   3.866196398399605*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"b47b41b2-da8a-42e9-bc03-4ad94def61d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"QuestionInterface", "[", 
   RowBox[{"\"\<MultipleChoice\>\"", ",", " ", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{
      "\"\<Prompt\>\"", " ", "->", " ", "\"\<Pick your favorite sport\>\""}], 
      ",", " ", 
      RowBox[{"\"\<Choices\>\"", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Soccor\>\"", ",", " ", "\"\<Tennis\>\"", ",", " ", 
         "\"\<Swimming\>\"", ",", " ", "\"\<Curling\>\""}], "}"}]}]}], 
     "|>"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.83337543302175*^9, 3.8333755398850594`*^9}, {
   3.834747451923436*^9, 3.834747467320795*^9}, 3.8347476379022427`*^9, {
   3.842972149404601*^9, 3.8429722273794737`*^9}, {3.842972261172606*^9, 
   3.842972262037676*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"005d04fe-688a-4f8b-89c1-adbbde3e186a"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = "", 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = "", 
   QuestionFramework`Private`ch$$ = {
   "Curling", "Soccor", "Swimming", "Tennis"}}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Pick your favorite sport", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], 
          QuestionFramework`Private`ch$$, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, None]}, {
         If[
          Or[None === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              None[
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|
              "Choices" -> {"Soccor", "Tennis", "Swimming", "Curling"}, 
               "ChoiceOrdering" -> Sort, "MaxAnswers" -> 1, "MinAnswers" -> 1,
                "Prompt" -> "Pick your favorite sport"|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{114., {53.433593688416295`, 57.566406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   "MultipleChoice", <|
    "Prompt" -> "Pick your favorite sport", 
     "Choices" -> {"Soccor", "Tennis", "Swimming", "Curling"}|>], 
   None]]], "Output",
 CellChangeTimes->{3.842972228005494*^9, 3.842972321250709*^9, 
  3.84323254299435*^9, 3.8661965074591017`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"f31091bc-6d63-4ca0-8be1-b65bf3cd4190"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"QuestionInterface", "[", 
   RowBox[{"\"\<NumericRange\>\"", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{
      "\"\<Prompt\>\"", " ", "->", " ", 
       "\"\<How excited are you about the James Webb Space Telescope?\>\""}], 
      ",", " ", 
      RowBox[{"\"\<Range\>\"", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "10", ",", " ", "1"}], "}"}]}]}], "|>"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.843227042559799*^9, 3.843227053500269*^9}, {
  3.8432271055990553`*^9, 3.84322713199332*^9}, {3.843227181603986*^9, 
  3.8432271919887047`*^9}, {3.8661964497239094`*^9, 3.866196459028945*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"eaa3478a-8797-4a19-91ab-8c51597a5307"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 1, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How excited are you about the James Webb Space Telescope?", 
         SpanFromLeft}, {
         Slider[
          Dynamic[QuestionFramework`Private`input$$], {1, 10, 1}, 
          ContinuousAction -> False], QuestionFramework`Private`input$$, 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, None]}, {
         If[
          Or[None === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            None[QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{269., {36.933593688416295`, 41.066406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   "NumericRange", <|
    "Prompt" -> "How excited are you about the James Webb Space Telescope?", 
     "Range" -> {1, 10, 1}|>], None]]], "Output",
 CellChangeTimes->{{3.84322712704042*^9, 3.8432271324240437`*^9}, {
   3.8432271824292994`*^9, 3.843227192279418*^9}, 3.843232548577425*^9, 
   3.8661965038804846`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"7ef6a023-49aa-4dff-90b5-b7d3db72bfc5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"QuestionInterface", "[", 
   RowBox[{"\"\<MultipleChoiceGrid\>\"", ",", " ", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Prompt\>\"", " ", "->", " ", "\"\<Rank these sports\>\""}],
       ",", " ", 
      RowBox[{"\"\<Choices\>\"", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Soccor\>\"", ",", " ", "\"\<Tennis\>\"", ",", " ", 
         "\"\<Swimming\>\"", ",", " ", "\"\<Curling\>\""}], "}"}]}], ",", " ", 
      RowBox[{"\"\<Categories\>\"", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "2", ",", " ", "3", ",", " ", "4"}], "}"}]}]}],
      "|>"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8429722519412003`*^9, 3.842972303597064*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"6efee116-b2a5-4819-ad2f-638e1c273ccf"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`i$$ = 4, 
   QuestionFramework`Private`input$$ = "", 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`rows$$ = {{"Soccor", 
     RadioButtonBar[
      Dynamic[
       Part[QuestionFramework`Private`values$$, 1]], {1, 2, 3, 4}]}, {
    "Tennis", 
     RadioButtonBar[
      Dynamic[
       Part[QuestionFramework`Private`values$$, 2]], {1, 2, 3, 4}]}, {
    "Swimming", 
     RadioButtonBar[
      Dynamic[
       Part[QuestionFramework`Private`values$$, 3]], {1, 2, 3, 4}]}, {
    "Curling", 
     RadioButtonBar[
      Dynamic[
       Part[QuestionFramework`Private`values$$, 4]], {1, 2, 3, 4}]}}, 
   QuestionFramework`Private`as$$ = <|
   "Soccor" -> "091d", "Tennis" -> "3b9e", "Swimming" -> "4d0e", "Curling" -> 
    "2d28"|>, QuestionFramework`Private`keys$$ = {
   "Soccor", "Tennis", "Swimming", "Curling"}, 
   QuestionFramework`Private`values$$ = {"091d", "3b9e", "4d0e", "2d28"}, 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Rank these sports", SpanFromLeft}, {
         Grid[QuestionFramework`Private`rows$$], 
         Which[
          And[
          Head[QuestionFramework`Private`result$$] === AssessmentResultObject,
            Thread[QuestionFramework`Private`keys$$ -> 
             QuestionFramework`Private`values$$] === 
           QuestionFramework`Private`submittedvalue$$], 
          QuestionFramework`Private`copyAssessResultButton[
          QuestionFramework`Private`result$$], 
          And[CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "InputAssoc", 
              CurrentValue[
               EvaluationCell[], {
               TaggingRules, "FormNotebook", "QuestionID"}]}] =!= 
           Thread[QuestionFramework`Private`keys$$ -> 
             QuestionFramework`Private`values$$]], CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "InputAssoc", 
              CurrentValue[
               EvaluationCell[], {
               TaggingRules, "FormNotebook", "QuestionID"}]}] = 
           Thread[QuestionFramework`Private`keys$$ -> 
             QuestionFramework`Private`values$$]; Null, 
          And[Head[
             CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "AssessResult"}]] === 
           AssessmentResultObject, 
           Thread[QuestionFramework`Private`keys$$ -> 
             QuestionFramework`Private`values$$] === FirstCase[
             CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "AssessResult"}][All], 
             KeyValuePattern[{"QuestionID" -> CurrentValue[
                  EvaluationCell[], {
                  TaggingRules, "FormNotebook", "QuestionID"}], "GivenAnswer" -> 
                Pattern[QuestionFramework`Private`in, 
                  Blank[]]}] :> QuestionFramework`Private`in]], 
          QuestionFramework`Private`result$$ = CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "AssessResult"}][
             CurrentValue[
              EvaluationCell[], {
              TaggingRules, "FormNotebook", "QuestionID"}]]; 
          QuestionFramework`Private`copyAssessResultButton[
           QuestionFramework`Private`result$$], 
          And[CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmittedAssoc"}] === CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "InputAssoc"}], CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "AssessmentMethod"}] === "Local"], 
          QuestionFramework`Private`input$$ = 
           Thread[QuestionFramework`Private`keys$$ -> 
             QuestionFramework`Private`values$$]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`result$$ = 
           None[QuestionFramework`Private`input$$]; CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "AssessResult", 
              CurrentValue[
               EvaluationCell[], {
               TaggingRules, "FormNotebook", "QuestionID"}]}] = 
           QuestionFramework`Private`result$$; 
          QuestionFramework`Private`copyAssessResultButton[
           QuestionFramework`Private`result$$], True, ""]}, {
         If[
          Or[None === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          Button[
           Framed[
            Style[
            "Submit", 12, FontColor -> 
             If[QuestionFramework`Private`buttonenabled$$, White, Black, 
               White], FontWeight -> Plain], FrameStyle -> None, ImageMargins -> 
            0, RoundingRadius -> 2, ImageSize -> {Automatic, 21}, 
            BaselinePosition -> Baseline, Background -> 
            If[QuestionFramework`Private`buttonenabled$$, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], 
           QuestionFramework`Private`input$$ = 
            Thread[QuestionFramework`Private`keys$$ -> 
              QuestionFramework`Private`values$$]; 
           QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              None[
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|
              "Prompt" -> "Rank these sports", 
               "Choices" -> {"Soccor", "Tennis", "Swimming", "Curling"}, 
               "Categories" -> {1, 2, 3, 4}|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True], Appearance -> None, BaselinePosition -> Baseline, 
           ImageSize -> {Automatic, 21}, Evaluator -> Automatic, Method -> 
           "Preemptive"]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{182., {53.433593688416295`, 57.566406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$, 
      QuestionFramework`Private`values$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   "MultipleChoiceGrid", <|
    "Prompt" -> "Rank these sports", 
     "Choices" -> {"Soccor", "Tennis", "Swimming", "Curling"}, 
     "Categories" -> {1, 2, 3, 4}|>], None]]], "Output",
 CellChangeTimes->{{3.8429722839067507`*^9, 3.8429723040342607`*^9}, 
   3.843232555245583*^9, 3.8661965016134605`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"e3474241-9a44-430a-9193-fbc51c310336"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"QuestionInterface", "[", 
   RowBox[{
   "\"\<ShortAnswer\>\"", ",", "\"\<Please enter your first name:\>\""}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.843226998187325*^9, 3.843227015785852*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"25b199a1-36c2-47b2-bf87-2e6b3cb08189"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = ""}, 
  FrameBox[
   DynamicBox[ToBoxes[
     Grid[{{"Please enter your first name:", SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], Expression], 
        If[
         And[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          QuestionFramework`Private`input$$ === 
          QuestionFramework`Private`submittedvalue$$], 
         Deploy[
          QuestionFramework`Private`assessResultIcon[
           QuestionFramework`Private`result$$[All]]], ""]}, {
        If[
         Or[None === None, CurrentValue[
            EvaluationNotebook[], {
            TaggingRules, "FormNotebook", "SubmissionOptions", 
             "GroupSubmissionFlag"}] === True], "", 
         Button[
          Framed[
           Style[
           "Submit", 12, FontColor -> 
            If[QuestionFramework`Private`buttonenabled$$, White, Black, 
              White], FontWeight -> Plain], FrameStyle -> None, ImageMargins -> 
           0, RoundingRadius -> 2, ImageSize -> {Automatic, 21}, 
           BaselinePosition -> Baseline, Background -> 
           If[QuestionFramework`Private`buttonenabled$$, 
             RGBColor[
             0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
             RGBColor[
             0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
             RGBColor[
             0.043137254901960784`, 0.3803921568627451, 0.6352941176470588]]],
           QuestionFramework`Private`result$$ = 
           None[QuestionFramework`Private`input$$, "SubmissionCount" -> 
             QuestionFramework`Private`submissionCount$$]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = 
           If[QuestionFramework`Private`submissionCount$$ >= Lookup[
               QuestionFramework`Private`result$$["AssessmentOptions"], 
               "MaxSubmissions"], False, True, True], Appearance -> None, 
          BaselinePosition -> Baseline, ImageSize -> {Automatic, 21}, 
          Evaluator -> Automatic, Method -> "Preemptive"]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
      Spacings -> {1, 1}], StandardForm],
    ImageSizeCache->{189., {25.433593688416295`, 29.566406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   Background->GrayLevel[1],
   BaseStyle->"Panel",
   FrameMargins->10,
   FrameStyle->RGBColor[
    0.7490196078431373, 0.7490196078431373, 0.7490196078431373],
   RoundingRadius->5,
   StripOnInput->False],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.8432270166621637`*^9, 3.843232564306178*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"19e6b20d-2a7f-4ba4-af6d-6595ddf659ff"]
}, Open  ]],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"89800a72-4f93-4d8e-8e21-cfb0b0e76f4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create customized assessments:", "Subsection",
 CellChangeTimes->{{3.810925328352987*^9, 3.8109253296102695`*^9}, {
  3.8110001936236677`*^9, 3.811000197758833*^9}, {3.843233347784844*^9, 
  3.8432333632838917`*^9}},ExpressionUUID->"0a271852-7c26-447c-8837-\
784287982c77"],

Cell[CellGroupData[{

Cell["Pattern Matching", "Subsubsection",
 CellChangeTimes->{{3.810925328352987*^9, 3.8109253296102695`*^9}, {
   3.811001946814025*^9, 3.811001947286481*^9}, {3.811003193697015*^9, 
   3.811003200311729*^9}, 
   3.8661979770821505`*^9},ExpressionUUID->"21b790d6-04b0-45fc-9bda-\
60b1c530ab8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"\"\<Provide an even number:\>\"", ",", " ", 
   RowBox[{"AssessmentFunction", "[", 
    RowBox[{"{", 
     RowBox[{"_", "?", "EvenQ"}], "}"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{3.843233380661272*^9},
 CellLabel->
  "In[104]:=",ExpressionUUID->"59e0a0ed-4d39-4ca0-8e97-8f50b37a1a94"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = ""}, 
  FrameBox[
   DynamicBox[ToBoxes[
     Grid[{{"Provide an even number:", SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], Expression], 
        If[
         And[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          QuestionFramework`Private`input$$ === 
          QuestionFramework`Private`submittedvalue$$], 
         Deploy[
          QuestionFramework`Private`assessResultIcon[
           QuestionFramework`Private`result$$[All]]], ""]}, {
        If[
         Or[AssessmentFunction[{PatternTest[
               Blank[], EvenQ] -> 1}] === None, CurrentValue[
            EvaluationNotebook[], {
            TaggingRules, "FormNotebook", "SubmissionOptions", 
             "GroupSubmissionFlag"}] === True], "", 
         Button[
          Framed[
           Style[
           "Submit", 12, FontColor -> 
            If[QuestionFramework`Private`buttonenabled$$, White, Black, 
              White], FontWeight -> Plain], FrameStyle -> None, ImageMargins -> 
           0, RoundingRadius -> 2, ImageSize -> {Automatic, 21}, 
           BaselinePosition -> Baseline, Background -> 
           If[QuestionFramework`Private`buttonenabled$$, 
             RGBColor[
             0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
             RGBColor[
             0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
             RGBColor[
             0.043137254901960784`, 0.3803921568627451, 0.6352941176470588]]],
           QuestionFramework`Private`result$$ = 
           AssessmentFunction[{PatternTest[
                Blank[], EvenQ] -> 1}][
            QuestionFramework`Private`input$$, "SubmissionCount" -> 
             QuestionFramework`Private`submissionCount$$]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = 
           If[QuestionFramework`Private`submissionCount$$ >= Lookup[
               QuestionFramework`Private`result$$["AssessmentOptions"], 
               "MaxSubmissions"], False, True, True], Appearance -> None, 
          BaselinePosition -> Baseline, ImageSize -> {Automatic, 21}, 
          Evaluator -> Automatic, Method -> "Preemptive"]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
      Spacings -> {1, 1}], StandardForm],
    ImageSizeCache->{189., {31.433593688416295`, 35.566406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   Background->GrayLevel[1],
   BaseStyle->"Panel",
   FrameMargins->10,
   FrameStyle->RGBColor[
    0.7490196078431373, 0.7490196078431373, 0.7490196078431373],
   RoundingRadius->5,
   StripOnInput->False],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.843233783916142*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"63ced5c5-fd64-4443-81dc-8ae1761f98ea"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Use Entities", "Subsubsection",
 CellChangeTimes->{{3.8661979598355193`*^9, 
  3.8661979724466853`*^9}},ExpressionUUID->"4163c527-d31b-4955-80b2-\
9ab06fb2cfe0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"RandomEntity", "[", "\"\<Planet\>\"", "]"}]}], "}"}], ",", 
   RowBox[{"QuestionObject", "[", 
    RowBox[{
     RowBox[{"QuestionInterface", "[", 
      RowBox[{"\"\<MultipleChoice\>\"", ",", 
       RowBox[{"<|", 
        RowBox[{"\"\<Prompt\>\"", " ", "->", " ", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<What planet is this? \>\"", ",", " ", 
            RowBox[{"p", "[", "\"\<Image\>\"", "]"}]}], "}"}], "]"}]}], 
        "|>"}]}], "]"}], ",", 
     RowBox[{"AssessmentFunction", "[", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"p", "->", " ", "1"}], "}"}], ",", " ", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"EntityList", "[", "\"\<Planet\>\"", "]"}], ",", " ", 
           "p"}], "]"}]}], "]"}], "]"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"169e3061-8f7b-486c-ba98-3894e4919088"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = "", 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = "", 
   QuestionFramework`Private`ch$$ = {
    Entity["Planet", "Earth"], 
    Entity["Planet", "Jupiter"], 
    Entity["Planet", "Mars"], 
    Entity["Planet", "Mercury"], 
    Entity["Planet", "Neptune"], 
    Entity["Planet", "Saturn"], 
    Entity["Planet", "Uranus"], 
    Entity["Planet", "Venus"]}}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
         Row[{"What planet is this? ", 
           Image[CompressedData["
1:eJztnYV/G0fbrmXL7DA3zOiAw3HMzEySLZMsW8xgZkwc5qaUpH2h7/ud8y+e
e+ZZjUcr2UmapE2/k/3dVRVZtqS9dD8wM7t7pM/VOBCv0Wh8Kbhp7A0VeL29
w01b8I8Wp88y6DT1Vzj9pkGT92afFg8+V/5j97++Lf4j9W372rZvBL9t37Zv
27ftz9viPlLftq9t+0bw7759I/h3374R/Ku2uLj37844vq3z0/j4eOISr4mD
/kKCceHti73C32bTarXgEvNHMfdSNCNtXHxCvJaYRmut143nm/z3vxH5Y5vs
KSFAibYYPR4ba9Q/Y27x0vaN1+fa1o+BRA0WY+ykqKja/9GwPuINfNivfOmw
+SX+8lrf5M+7yXSIF4kCoxwqkxISkxOTEhLwv6SUtNS0DekbNm3cuHkTadOW
zeI+Hk/fuAFPSE1PS09PT01NTUlJSUpKSkxMRNCmfSWciFst36IdKm/r/Ogz
bn8mvvjPtYXDZqI2AYwgYopbCA+C2oa09B3btu/fu+/IkSMnTpw4deb02Yxz
GRfOX7h0Uehi5iWI7uNH585n4Dlnzp09duwYfuvgwYP79+//7rvvdu3atW3b
ts2bN4MssOL7IN4IQdRKm/w2Yz74GbfPS/BDvi2f/p7De0SToI0DtgRuRebE
OA0eTEtN3rZ184H9e0+dPA4aly6ev5x58fLlS1exXb927cb16zdvCN24dVPc
x4/whCvXrmZeuQxduXIlMzPzwoULGRkZZ8+ePXnyJJgePnx47969oLl169YN
GzakpaUlJyeTQxPCm3bt7dM/e8zt70WQdgVclpSoTUnQJmvjCWV6Wsqe3TuP
HjmUcfbcpUuXrl+/fuvWraysrNu3b+fm5ubn5+fmFWTnF+QUFJJyC4vyiorz
i0vEIxCecDsv/1ZOLlNW9o2bWdeu37x67caVq9czL1+9cDETDoU9T506dfTo
0QMHDuzZswfGBEq4EhwTpO1vSlBA5H9WK+n9BOEhrTaRvs9sLkhJb5r4hDh2
C0zcbuAFz6UkJCZqNEkaTVpC0vbNW44ePHQp4/yNa9dv38oCrpzc/Lz8wvyC
ovzisoKS8sLSiqKyyqLy6pgqLKuCCkorofySirziclJ2Qcnt/OKsvMJbuQU3
s/OuZ+VcvXn7yo2bmdeuX8q8knH+4pmzGSdPnzp6/BhQIsxu27Zl48Z0OFLL
C2IoFkH2YXCLT/qxmESiF5J23erO/wsJJiQk0ZthT9Iq7PBBgTI+geGL40Ey
OYlFTa1Gsyklbe+OXWdPnoJJ8m5n5wFbbkFeXkFxSRl4FZdXFVdUl1bVFVfX
lVXXl9TUl9Y0qVRW2wyVVDdCxVUNUFFlfWFFHVRQXgvll9XkllbklJTnFpUB
aFZeEWjeysm/nnUb3rx85RpDeeH86dOnjx8/joy5d++e7du3gmNqanJSkuJE
4UduzSTOLoHrfxtBZj2+4TvMywT6awo7ukNPSEvbcGDfwQsZF69fvQFqxcWl
UFFxaVl5dUVNPVNtY2VdU3l9U0V9a3lDa2VDW0VjW2WTPqYqGnVQeUN7WX1b
aV0rVFLbwtVUXNNITEEzr4w5NLeoFLqdX5TFjJlz43b21Zu3gBK10Llz5xBd
UfwgUe7YsWPTpk0oZUURy76VWlZfrY4h/D0JrvMO6XcJHwUiFjC1cSTeqMeh
sN+5c3dGxoXsnLyCwmLYDdTKK2rKqmrLq+vKObuqplaouklX1ayrbtFXteqr
Wzqh2raumKppNUB4QlVzhwyUM20prWuGW2FSxZ483uYVl+UUIoEWZzOULMBe
v3ELufLS5czz589Tlty3bx84onZFqQPv0WenOllpVD8yM/4VBD+kgNEIsSAJ
fNo4qipRZKJQQblCzR2xO3vufHZOQVFxObJbSWVNaVVtWV1jZWNLdXNbbauu
urUdyGrbOmvaO2t13XX6nvqO3tqO3nq9EWro6FeJHifV6fqg2vbemrae6tZu
qKqlq7Klo6JZH3Yoc6WCsrImv5xQlgMl0iVCK/x47VYWyh7UPGhXTp0+e/jo
kf0HD2zfvn3jxo0pqFh5HiclJqzZfXydBNd+XxpZWl6oMHxxGhSZCXyJFSLP
xvQNR44cQ3EIx5VUMJXXNFQ0NFc2tYddpgc18GruNuG2rrOvrrO/3mBq6Bpo
7B5s7DbjtskwsJYaO02QjJVoQoxmm6GqlTmUo2wFSsqeyLBwJVCCIxIlq3ly
cm/cziWOFy9dRqlz4tRJNCCsztm6GdUyS+LxStfz9yeoUUvL0gM+WmKCJik+
DvgS4+JTE5O+2733SubV8rLqisrakvIaxEk4DhGyskVX097V0NlXbzDitpbZ
zQhwHNlgU4+lqdcKNffZmvscuG3hasYjkWLP5OKgzQ1dg6S6ThNU29Ffo++r
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
NPnU/w==
            "], "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
            Interleaving -> True, 
            MetaInformation -> <|
             "Source" -> "http://photojournal.jpl.nasa.gov/catalog/PIA00032", 
              "URL" -> 
              "http://www.wolframcdn.com/waimage/hset100/2e2/\
2e23ad57d0b01afad3f73750fc971433_v001s.jpg"|>]}], SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], 
          QuestionFramework`Private`ch$$, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          
          AssessmentFunction[{
           Entity["Planet", "Uranus"] -> <|"Score" -> 1|>, 
            Entity["Planet", "Venus"] -> <|"Score" -> 0|>, 
            Entity["Planet", "Neptune"] -> <|"Score" -> 0|>, 
            Entity["Planet", "Earth"] -> <|"Score" -> 0|>, 
            Entity["Planet", "Jupiter"] -> <|"Score" -> 0|>, 
            Entity["Planet", "Mars"] -> <|"Score" -> 0|>, 
            Entity["Planet", "Mercury"] -> <|"Score" -> 0|>, 
            Entity["Planet", "Saturn"] -> <|"Score" -> 0|>}]]}, {
         If[
          Or[
          AssessmentFunction[{
             Entity["Planet", "Uranus"] -> <|"Score" -> 1|>, 
              Entity["Planet", "Venus"] -> <|"Score" -> 0|>, 
              Entity["Planet", "Neptune"] -> <|"Score" -> 0|>, 
              Entity["Planet", "Earth"] -> <|"Score" -> 0|>, 
              Entity["Planet", "Jupiter"] -> <|"Score" -> 0|>, 
              Entity["Planet", "Mars"] -> <|"Score" -> 0|>, 
              Entity["Planet", "Mercury"] -> <|"Score" -> 0|>, 
              Entity["Planet", "Saturn"] -> <|"Score" -> 0|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              
              AssessmentFunction[{
               Entity["Planet", "Uranus"] -> <|"Score" -> 1|>, 
                Entity["Planet", "Venus"] -> <|"Score" -> 0|>, 
                Entity["Planet", "Neptune"] -> <|"Score" -> 0|>, 
                Entity["Planet", "Earth"] -> <|"Score" -> 0|>, 
                Entity["Planet", "Jupiter"] -> <|"Score" -> 0|>, 
                Entity["Planet", "Mars"] -> <|"Score" -> 0|>, 
                Entity["Planet", "Mercury"] -> <|"Score" -> 0|>, 
                Entity["Planet", "Saturn"] -> <|"Score" -> 0|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|"Choices" -> {
                 Entity["Planet", "Uranus"], 
                 Entity["Planet", "Venus"], 
                 Entity["Planet", "Neptune"], 
                 Entity["Planet", "Earth"], 
                 Entity["Planet", "Jupiter"], 
                 Entity["Planet", "Mars"], 
                 Entity["Planet", "Mercury"], 
                 Entity["Planet", "Saturn"]}, "ChoiceOrdering" -> Sort, 
               "MaxAnswers" -> 1, "MinAnswers" -> 1, "Prompt" -> 
               Row[{"What planet is this? ", 
                  Image[CompressedData["
1:eJztnYV/G0fbrmXL7DA3zOiAw3HMzEySLZMsW8xgZkwc5qaUpH2h7/ud8y+e
e+ZZjUcr2UmapE2/k/3dVRVZtqS9dD8wM7t7pM/VOBCv0Wh8Kbhp7A0VeL29
w01b8I8Wp88y6DT1Vzj9pkGT92afFg8+V/5j97++Lf4j9W372rZvBL9t37Zv
27ftz9viPlLftq9t+0bw7759I/h3374R/Ku2uLj37844vq3z0/j4eOISr4mD
/kKCceHti73C32bTarXgEvNHMfdSNCNtXHxCvJaYRmut143nm/z3vxH5Y5vs
KSFAibYYPR4ba9Q/Y27x0vaN1+fa1o+BRA0WY+ykqKja/9GwPuINfNivfOmw
+SX+8lrf5M+7yXSIF4kCoxwqkxISkxOTEhLwv6SUtNS0DekbNm3cuHkTadOW
zeI+Hk/fuAFPSE1PS09PT01NTUlJSUpKSkxMRNCmfSWciFst36IdKm/r/Ogz
bn8mvvjPtYXDZqI2AYwgYopbCA+C2oa09B3btu/fu+/IkSMnTpw4deb02Yxz
GRfOX7h0Uehi5iWI7uNH585n4Dlnzp09duwYfuvgwYP79+//7rvvdu3atW3b
ts2bN4MssOL7IN4IQdRKm/w2Yz74GbfPS/BDvi2f/p7De0SToI0DtgRuRebE
OA0eTEtN3rZ184H9e0+dPA4aly6ev5x58fLlS1exXb927cb16zdvCN24dVPc
x4/whCvXrmZeuQxduXIlMzPzwoULGRkZZ8+ePXnyJJgePnx47969oLl169YN
GzakpaUlJyeTQxPCm3bt7dM/e8zt70WQdgVclpSoTUnQJmvjCWV6Wsqe3TuP
HjmUcfbcpUuXrl+/fuvWraysrNu3b+fm5ubn5+fmFWTnF+QUFJJyC4vyiorz
i0vEIxCecDsv/1ZOLlNW9o2bWdeu37x67caVq9czL1+9cDETDoU9T506dfTo
0QMHDuzZswfGBEq4EhwTpO1vSlBA5H9WK+n9BOEhrTaRvs9sLkhJb5r4hDh2
C0zcbuAFz6UkJCZqNEkaTVpC0vbNW44ePHQp4/yNa9dv38oCrpzc/Lz8wvyC
ovzisoKS8sLSiqKyyqLy6pgqLKuCCkorofySirziclJ2Qcnt/OKsvMJbuQU3
s/OuZ+VcvXn7yo2bmdeuX8q8knH+4pmzGSdPnzp6/BhQIsxu27Zl48Z0OFLL
C2IoFkH2YXCLT/qxmESiF5J23erO/wsJJiQk0ZthT9Iq7PBBgTI+geGL40Ey
OYlFTa1Gsyklbe+OXWdPnoJJ8m5n5wFbbkFeXkFxSRl4FZdXFVdUl1bVFVfX
lVXXl9TUl9Y0qVRW2wyVVDdCxVUNUFFlfWFFHVRQXgvll9XkllbklJTnFpUB
aFZeEWjeysm/nnUb3rx85RpDeeH86dOnjx8/joy5d++e7du3gmNqanJSkuJE
4UduzSTOLoHrfxtBZj2+4TvMywT6awo7ukNPSEvbcGDfwQsZF69fvQFqxcWl
UFFxaVl5dUVNPVNtY2VdU3l9U0V9a3lDa2VDW0VjW2WTPqYqGnVQeUN7WX1b
aV0rVFLbwtVUXNNITEEzr4w5NLeoFLqdX5TFjJlz43b21Zu3gBK10Llz5xBd
UfwgUe7YsWPTpk0oZUURy76VWlZfrY4h/D0JrvMO6XcJHwUiFjC1cSTeqMeh
sN+5c3dGxoXsnLyCwmLYDdTKK2rKqmrLq+vKObuqplaouklX1ayrbtFXteqr
Wzqh2raumKppNUB4QlVzhwyUM20prWuGW2FSxZ483uYVl+UUIoEWZzOULMBe
v3ELufLS5czz589Tlty3bx84onZFqQPv0WenOllpVD8yM/4VBD+kgNEIsSAJ
fNo4qipRZKJQQblCzR2xO3vufHZOQVFxObJbSWVNaVVtWV1jZWNLdXNbbauu
urUdyGrbOmvaO2t13XX6nvqO3tqO3nq9EWro6FeJHifV6fqg2vbemrae6tZu
qKqlq7Klo6JZH3Yoc6WCsrImv5xQlgMl0iVCK/x47VYWyh7UPGhXTp0+e/jo
kf0HD2zfvn3jxo0pqFh5HiclJqzZfXydBNd+XxpZWl6oMHxxGhSZCXyJFSLP
xvQNR44cQ3EIx5VUMJXXNFQ0NFc2tYddpgc18GruNuG2rrOvrrO/3mBq6Bpo
7B5s7DbjtskwsJYaO02QjJVoQoxmm6GqlTmUo2wFSsqeyLBwJVCCIxIlq3ly
cm/cziWOFy9dRqlz4tRJNCCsztm6GdUyS+LxStfz9yeoUUvL0gM+WmKCJik+
DvgS4+JTE5O+2733SubV8rLqisrakvIaxEk4DhGyskVX097V0NlXbzDitpbZ
zQhwHNlgU4+lqdcKNffZmvscuG3hasYjkWLP5OKgzQ1dg6S6ThNU29Ffo++r
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
NPnU/w==
                   "], "Byte", ColorSpace -> "RGB", 
                   ImageResolution -> {72, 72}, Interleaving -> True, 
                   MetaInformation -> <|
                    "Source" -> 
                    "http://photojournal.jpl.nasa.gov/catalog/PIA00032", 
                    "URL" -> 
                    "http://www.wolframcdn.com/waimage/hset100/2e2/\
2e23ad57d0b01afad3f73750fc971433_v001s.jpg"|>]}]|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{140., {140.9335936884163, 145.0664063115837}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   "MultipleChoice", <|"Prompt" -> Row[{"What planet is this? ", 
        Image[CompressedData["
1:eJztnYV/G0fbrmXL7DA3zOiAw3HMzEySLZMsW8xgZkwc5qaUpH2h7/ud8y+e
e+ZZjUcr2UmapE2/k/3dVRVZtqS9dD8wM7t7pM/VOBCv0Wh8Kbhp7A0VeL29
w01b8I8Wp88y6DT1Vzj9pkGT92afFg8+V/5j97++Lf4j9W372rZvBL9t37Zv
27ftz9viPlLftq9t+0bw7759I/h3374R/Ku2uLj37844vq3z0/j4eOISr4mD
/kKCceHti73C32bTarXgEvNHMfdSNCNtXHxCvJaYRmut143nm/z3vxH5Y5vs
KSFAibYYPR4ba9Q/Y27x0vaN1+fa1o+BRA0WY+ykqKja/9GwPuINfNivfOmw
+SX+8lrf5M+7yXSIF4kCoxwqkxISkxOTEhLwv6SUtNS0DekbNm3cuHkTadOW
zeI+Hk/fuAFPSE1PS09PT01NTUlJSUpKSkxMRNCmfSWciFst36IdKm/r/Ogz
bn8mvvjPtYXDZqI2AYwgYopbCA+C2oa09B3btu/fu+/IkSMnTpw4deb02Yxz
GRfOX7h0Uehi5iWI7uNH585n4Dlnzp09duwYfuvgwYP79+//7rvvdu3atW3b
ts2bN4MssOL7IN4IQdRKm/w2Yz74GbfPS/BDvi2f/p7De0SToI0DtgRuRebE
OA0eTEtN3rZ184H9e0+dPA4aly6ev5x58fLlS1exXb927cb16zdvCN24dVPc
x4/whCvXrmZeuQxduXIlMzPzwoULGRkZZ8+ePXnyJJgePnx47969oLl169YN
GzakpaUlJyeTQxPCm3bt7dM/e8zt70WQdgVclpSoTUnQJmvjCWV6Wsqe3TuP
HjmUcfbcpUuXrl+/fuvWraysrNu3b+fm5ubn5+fmFWTnF+QUFJJyC4vyiorz
i0vEIxCecDsv/1ZOLlNW9o2bWdeu37x67caVq9czL1+9cDETDoU9T506dfTo
0QMHDuzZswfGBEq4EhwTpO1vSlBA5H9WK+n9BOEhrTaRvs9sLkhJb5r4hDh2
C0zcbuAFz6UkJCZqNEkaTVpC0vbNW44ePHQp4/yNa9dv38oCrpzc/Lz8wvyC
ovzisoKS8sLSiqKyyqLy6pgqLKuCCkorofySirziclJ2Qcnt/OKsvMJbuQU3
s/OuZ+VcvXn7yo2bmdeuX8q8knH+4pmzGSdPnzp6/BhQIsxu27Zl48Z0OFLL
C2IoFkH2YXCLT/qxmESiF5J23erO/wsJJiQk0ZthT9Iq7PBBgTI+geGL40Ey
OYlFTa1Gsyklbe+OXWdPnoJJ8m5n5wFbbkFeXkFxSRl4FZdXFVdUl1bVFVfX
lVXXl9TUl9Y0qVRW2wyVVDdCxVUNUFFlfWFFHVRQXgvll9XkllbklJTnFpUB
aFZeEWjeysm/nnUb3rx85RpDeeH86dOnjx8/joy5d++e7du3gmNqanJSkuJE
4UduzSTOLoHrfxtBZj2+4TvMywT6awo7ukNPSEvbcGDfwQsZF69fvQFqxcWl
UFFxaVl5dUVNPVNtY2VdU3l9U0V9a3lDa2VDW0VjW2WTPqYqGnVQeUN7WX1b
aV0rVFLbwtVUXNNITEEzr4w5NLeoFLqdX5TFjJlz43b21Zu3gBK10Llz5xBd
UfwgUe7YsWPTpk0oZUURy76VWlZfrY4h/D0JrvMO6XcJHwUiFjC1cSTeqMeh
sN+5c3dGxoXsnLyCwmLYDdTKK2rKqmrLq+vKObuqplaouklX1ayrbtFXteqr
Wzqh2raumKppNUB4QlVzhwyUM20prWuGW2FSxZ483uYVl+UUIoEWZzOULMBe
v3ELufLS5czz589Tlty3bx84onZFqQPv0WenOllpVD8yM/4VBD+kgNEIsSAJ
fNo4qipRZKJQQblCzR2xO3vufHZOQVFxObJbSWVNaVVtWV1jZWNLdXNbbauu
urUdyGrbOmvaO2t13XX6nvqO3tqO3nq9EWro6FeJHifV6fqg2vbemrae6tZu
qKqlq7Klo6JZH3Yoc6WCsrImv5xQlgMl0iVCK/x47VYWyh7UPGhXTp0+e/jo
kf0HD2zfvn3jxo0pqFh5HiclJqzZfXydBNd+XxpZWl6oMHxxGhSZCXyJFSLP
xvQNR44cQ3EIx5VUMJXXNFQ0NFc2tYddpgc18GruNuG2rrOvrrO/3mBq6Bpo
7B5s7DbjtskwsJYaO02QjJVoQoxmm6GqlTmUo2wFSsqeyLBwJVCCIxIlq3ly
cm/cziWOFy9dRqlz4tRJNCCsztm6GdUyS+LxStfz9yeoUUvL0gM+WmKCJik+
DvgS4+JTE5O+2733SubV8rLqisrakvIaxEk4DhGyskVX097V0NlXbzDitpbZ
zQhwHNlgU4+lqdcKNffZmvscuG3hasYjkWLP5OKgzQ1dg6S6ThNU29Ffo++r
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
NPnU/w==
         "], "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
         Interleaving -> True, 
         MetaInformation -> <|
          "Source" -> "http://photojournal.jpl.nasa.gov/catalog/PIA00032", 
           "URL" -> 
           "http://www.wolframcdn.com/waimage/hset100/2e2/\
2e23ad57d0b01afad3f73750fc971433_v001s.jpg"|>]}]|>], 
   AssessmentFunction[{
    Entity["Planet", "Uranus"] -> <|"Score" -> 1|>, 
     Entity["Planet", "Venus"] -> <|"Score" -> 0|>, 
     Entity["Planet", "Neptune"] -> <|"Score" -> 0|>, 
     Entity["Planet", "Earth"] -> <|"Score" -> 0|>, 
     Entity["Planet", "Jupiter"] -> <|"Score" -> 0|>, 
     Entity["Planet", "Mars"] -> <|"Score" -> 0|>, 
     Entity["Planet", "Mercury"] -> <|"Score" -> 0|>, 
     Entity["Planet", "Saturn"] -> <|"Score" -> 0|>}]]]], "Output",
 CellChangeTimes->{3.843233786911509*^9, 3.84325196433261*^9, 
  3.866196624838857*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"f20c7b72-b837-41fc-8293-8f13f5bf9d3a"]
}, Open  ]],

Cell[TextData[StyleBox["History", "Subsubsection"]], "Text",
 CellChangeTimes->{{3.8661980144984417`*^9, 
  3.866198015302705*^9}},ExpressionUUID->"f28eee4b-be6e-4b22-a039-\
ccd59543f15e"],

Cell[BoxData[
 NamespaceBox["LinguisticAssistant",
  DynamicModuleBox[{Typeset`query$$ = 
   "Who were the leaders in the Crimean war?", Typeset`boxes$$ = RowBox[{
     TemplateBox[{"\"Crimean War\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"MilitaryConflict\"", ",", "\"CrimeanWar\""}], "]"}], 
       "\"Entity[\\\"MilitaryConflict\\\", \\\"CrimeanWar\\\"]\"", 
       "\"military conflict\""}, "Entity"], "[", 
     TemplateBox[{"\"commanders\"", 
       RowBox[{"EntityProperty", "[", 
         RowBox[{"\"MilitaryConflict\"", ",", "\"Commanders\""}], "]"}], 
       "\"EntityProperty[\\\"MilitaryConflict\\\", \\\"Commanders\\\"]\""}, 
      "EntityProperty"], "]"}], Typeset`allassumptions$$ = {}, 
   Typeset`assumptions$$ = {}, Typeset`open$$ = {1}, Typeset`querystate$$ = {
   "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
    0.674461`6.280501835606965, "Messages" -> {}}}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
      Dynamic[Typeset`query$$], 
      Dynamic[Typeset`boxes$$], 
      Dynamic[Typeset`allassumptions$$], 
      Dynamic[Typeset`assumptions$$], 
      Dynamic[Typeset`open$$], 
      Dynamic[Typeset`querystate$$]], StandardForm],
    ImageSizeCache->{267.5, {8., 14.5}},
    TrackedSymbols:>{
     Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
      Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
   DynamicModuleValues:>{},
   UndoTrackedVariables:>{Typeset`open$$}],
  BaseStyle->{"Deploy"},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Input",
 CellChangeTimes->{
  3.8526330289626417`*^9},ExpressionUUID->"6f2fe2f8-460f-4b1a-a338-\
d42f480e7893"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"Crimean War\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"MilitaryConflict\"", ",", "\"CrimeanWar\""}], "]"}], 
    "\"Entity[\\\"MilitaryConflict\\\", \\\"CrimeanWar\\\"]\"", 
    "\:f3b5military conflict\:f3b5"},
   "Entity"], "[", 
  TemplateBox[{"\"commanders\"", 
    RowBox[{"EntityProperty", "[", 
      RowBox[{"\"MilitaryConflict\"", ",", "\"Commanders\""}], "]"}], 
    "\"EntityProperty[\\\"MilitaryConflict\\\", \\\"Commanders\\\"]\""},
   "EntityProperty"], "]"}]], "Input",
 CellChangeTimes->{{3.852632937900219*^9, 3.852632955374958*^9}, 
   3.852633013675131*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"603d9075-d026-4149-9fd6-06b18f608468"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      TemplateBox[{"\"United Kingdom of Great Britain and Ireland\"", 
        RowBox[{"Entity", "[", 
          
          RowBox[{"\"HistoricalCountry\"", ",", 
            "\"KingdomGreatBritainIreland\""}], "]"}], 
        "\"Entity[\\\"HistoricalCountry\\\", \\\"KingdomGreatBritainIreland\\\
\"]\"", "\"historical country\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Queen Victoria\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"QueenVictoria::6c4k7\""}], "]"}], 
          "\"Entity[\\\"Person\\\", \\\"QueenVictoria::6c4k7\\\"]\"", 
          "\"person\""},
         "Entity"], ",", "\<\"Earl of Aberdeen\"\>", ",", 
        TemplateBox[{"\"Lord Palmerston\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"LordPalmerston::989h7\""}], "]"}], 
          "\"Entity[\\\"Person\\\", \\\"LordPalmerston::989h7\\\"]\"", 
          "\"person\""},
         "Entity"], ",", "\<\"Lord Raglan\"\>", 
        ",", "\<\"Sir James Simpson\"\>", 
        ",", "\<\"Sir William Codrington\"\>"}], "}"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"Second French Empire\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"HistoricalCountry\"", ",", "\"SecondFrenchEmpire\""}], 
          "]"}], "\"Entity[\\\"HistoricalCountry\\\", \
\\\"SecondFrenchEmpire\\\"]\"", "\"historical country\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Napoleon III\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"NapoleonIII::6h738\""}], "]"}], 
          "\"Entity[\\\"Person\\\", \\\"NapoleonIII::6h738\\\"]\"", 
          "\"person\""},
         "Entity"], ",", 
        TemplateBox[{"\"Jacques Leroy de Saint Arnaud\"", 
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"Person\"", ",", 
              "\"JacquesLeroyDeSaintArnaud::nrz2t\""}], "]"}], 
          "\"Entity[\\\"Person\\\", \\\"JacquesLeroyDeSaintArnaud::nrz2t\\\"]\
\"", "\"person\""},
         "Entity"], ",", 
        TemplateBox[{"\"Fran\[CCedilla]ois Certain Canrobert\"", 
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"Person\"", ",", 
              "\"FrancoisCertainCanrobert::6559q\""}], "]"}], 
          "\"Entity[\\\"Person\\\", \
\\\"FrancoisCertainCanrobert::6559q\\\"]\"", "\"person\""},
         "Entity"], ",", 
        TemplateBox[{"\"Aimable P\[EAcute]lissier\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"AimablePelissier::5j26g\""}], "]"}],
           "\"Entity[\\\"Person\\\", \\\"AimablePelissier::5j26g\\\"]\"", 
          "\"person\""},
         "Entity"], ",", 
        TemplateBox[{"\"Fran\[CCedilla]ois Achille Bazaine\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"FrancoisAchilleBazaine::7235v\""}], 
            "]"}], "\"Entity[\\\"Person\\\", \
\\\"FrancoisAchilleBazaine::7235v\\\"]\"", "\"person\""},
         "Entity"], ",", 
        TemplateBox[{"\"Patrice de Mac-Mahon, Duke of Magenta\"", 
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"Person\"", ",", 
              "\"PatriceDeMacMahonDukeOfMagenta::2y96x\""}], "]"}], 
          "\"Entity[\\\"Person\\\", \\\"PatriceDeMacMahonDukeOfMagenta::2y96x\
\\\"]\"", "\"person\""},
         "Entity"]}], "}"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"Ottoman Empire\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"HistoricalCountry\"", ",", "\"OttomanEmpire\""}], "]"}], 
        "\"Entity[\\\"HistoricalCountry\\\", \\\"OttomanEmpire\\\"]\"", 
        "\"historical country\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Abd\[UDoubleDot]lmecid I\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"AbdulmecidI::7jzrc\""}], "]"}], 
          "\"Entity[\\\"Person\\\", \\\"AbdulmecidI::7jzrc\\\"]\"", 
          "\"person\""},
         "Entity"], ",", 
        TemplateBox[{"\"Omar Pasha\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"OmarPasha::8w378\""}], "]"}], 
          "\"Entity[\\\"Person\\\", \\\"OmarPasha::8w378\\\"]\"", 
          "\"person\""},
         "Entity"], ",", "\<\"\:0130skender Pasha\"\>", 
        ",", "\<\"\[CapitalCCedilla]\[DotlessI]rpanl\[DotlessI] Nadir Pasha\"\
\>", ",", "\<\"Ismail Pasha\"\>"}], "}"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"Kingdom of Sardinia\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"HistoricalCountry\"", ",", "\"KingdomSardinia\""}], 
          "]"}], "\"Entity[\\\"HistoricalCountry\\\", \
\\\"KingdomSardinia\\\"]\"", "\"historical country\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Victor Emmanuel II\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"VictorEmmanuelII::4m2d4\""}], "]"}],
           "\"Entity[\\\"Person\\\", \\\"VictorEmmanuelII::4m2d4\\\"]\"", 
          "\"person\""},
         "Entity"], ",", 
        TemplateBox[{"\"Alfonso Ferrero La Marmora\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Person\"", ",", "\"AlfonsoFerreroLaMarmora::f6gkq\""}],
             "]"}], "\"Entity[\\\"Person\\\", \
\\\"AlfonsoFerreroLaMarmora::f6gkq\\\"]\"", "\"person\""},
         "Entity"]}], "}"}]}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     TemplateBox[{"\"Russian Empire\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"HistoricalCountry\"", ",", "\"RussianEmpire\""}], "]"}], 
       "\"Entity[\\\"HistoricalCountry\\\", \\\"RussianEmpire\\\"]\"", 
       "\"historical country\""},
      "Entity"], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       TemplateBox[{"\"Tsar Nicholas I\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Person\"", ",", "\"TsarNicholasI::dn93r\""}], "]"}], 
         "\"Entity[\\\"Person\\\", \\\"TsarNicholasI::dn93r\\\"]\"", 
         "\"person\""},
        "Entity"], ",", 
       TemplateBox[{"\"Tsar Alexander II\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Person\"", ",", "\"TsarAlexanderII::vvy3b\""}], "]"}], 
         "\"Entity[\\\"Person\\\", \\\"TsarAlexanderII::vvy3b\\\"]\"", 
         "\"person\""},
        "Entity"], ",", 
       TemplateBox[{"\"Alexander Danilovich Menshikov\"", 
         RowBox[{"Entity", "[", 
           
           RowBox[{"\"Person\"", ",", 
             "\"AlexanderDanilovichMenshikov::s4p28\""}], "]"}], 
         "\"Entity[\\\"Person\\\", \
\\\"AlexanderDanilovichMenshikov::s4p28\\\"]\"", "\"person\""},
        "Entity"], ",", 
       TemplateBox[{"\"Pavel Nakhimov\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Person\"", ",", "\"PavelNakhimov::4h6f3\""}], "]"}], 
         "\"Entity[\\\"Person\\\", \\\"PavelNakhimov::4h6f3\\\"]\"", 
         "\"person\""},
        "Entity"], ",", 
       TemplateBox[{"\"Vasily Zavoyko\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Person\"", ",", "\"VasilyZavoyko::48n9x\""}], "]"}], 
         "\"Entity[\\\"Person\\\", \\\"VasilyZavoyko::48n9x\\\"]\"", 
         "\"person\""},
        "Entity"], ",", 
       TemplateBox[{"\"Nikolay Muravyov\[Hyphen]Amursky\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Person\"", ",", "\"NikolayMuravyovAmursky::95n3g\""}], 
           "]"}], "\"Entity[\\\"Person\\\", \\\"NikolayMuravyovAmursky::95n3g\
\\\"]\"", "\"person\""},
        "Entity"], ",", 
       TemplateBox[{"\"Yevfimiy Vasilyevich Putyatin\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Person\"", ",", "\"YevfimyPutyatin::wvw8d\""}], "]"}], 
         "\"Entity[\\\"Person\\\", \\\"YevfimyPutyatin::wvw8d\\\"]\"", 
         "\"person\""},
        "Entity"], ",", 
       TemplateBox[{"\"Vladimir Istomin\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Person\"", ",", "\"VladimirIstomin::b4qs7\""}], "]"}], 
         "\"Entity[\\\"Person\\\", \\\"VladimirIstomin::b4qs7\\\"]\"", 
         "\"person\""},
        "Entity"], ",", "\<\"Count Tolstoy\"\>"}], "}"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.852632943359818*^9, 3.852632955693153*^9}, 
   3.852633014092284*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"ffe85c36-a715-47cf-a6fb-da78aa4f0092"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"correct", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Values", "[", 
     RowBox[{
      TemplateBox[{"\"Crimean War\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"MilitaryConflict\"", ",", "\"CrimeanWar\""}], "]"}], 
        "\"Entity[\\\"MilitaryConflict\\\", \\\"CrimeanWar\\\"]\"", 
        "\:f3b5military conflict\:f3b5"},
       "Entity"], "[", 
      TemplateBox[{"\"commanders\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"MilitaryConflict\"", ",", "\"Commanders\""}], "]"}], 
        "\"EntityProperty[\\\"MilitaryConflict\\\", \\\"Commanders\\\"]\""},
       "EntityProperty"], "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"QuestionObject", "[", 
  RowBox[{
   RowBox[{"QuestionInterface", "[", 
    RowBox[{"\"\<ChooseMultiple\>\"", ",", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{
       "\"\<Prompt\>\"", "->", 
        "\"\<Select people involved with the Crimean War:\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Choices\>\"", "->", 
        RowBox[{"RandomSample", "@", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"RandomSample", "[", 
            RowBox[{"correct", ",", "5"}], "]"}], ",", 
           RowBox[{"RandomEntity", "[", 
            RowBox[{"\"\<Person\>\"", ",", "5"}], "]"}]}], "]"}]}]}]}], 
      "\[IndentingNewLine]", "|>"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"AssessmentFunction", "[", 
    RowBox[{"{", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"Values", "[", 
         RowBox[{
          TemplateBox[{"\"Crimean War\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"MilitaryConflict\"", ",", "\"CrimeanWar\""}], "]"}], 
            "\"Entity[\\\"MilitaryConflict\\\", \\\"CrimeanWar\\\"]\"", 
            "\:f3b5military conflict\:f3b5"},
           "Entity"], "[", 
          TemplateBox[{"\"commanders\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"MilitaryConflict\"", ",", "\"Commanders\""}], "]"}], 
            "\"EntityProperty[\\\"MilitaryConflict\\\", \
\\\"Commanders\\\"]\""},
           "EntityProperty"], "]"}], "]"}], "]"}], "->", "True"}], "]"}], 
     "}"}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.852633096590413*^9, 3.852633173721698*^9}, {
  3.852633208881687*^9, 3.8526333038850737`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"a4e86b56-4285-4259-91c0-02b1d9137809"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = "", 
   QuestionFramework`Private`ch$$ = {
    Entity["Person", "AbdulmecidI::7jzrc"], 
    Entity["Person", "FrancoisAchilleBazaine::7235v"], 
    Entity["Person", "FrancoisCertainCanrobert::6559q"], 
    Entity["Person", "HowardDavenport::5j5kb"], 
    Entity["Person", "IlanMeslier::r8826"], 
    Entity["Person", "JerryLewis::g5822"], 
    Entity["Person", "KamillaGafurzianova::42kx5"], 
    Entity["Person", "PatriceDeMacMahonDukeOfMagenta::2y96x"], 
    Entity["Person", "ReggieMayo::yw8gd"], 
    Entity["Person", "VasilyZavoyko::48n9x"]}}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Select people involved with the Crimean War:", SpanFromLeft}, {
         CheckboxBar[
          Dynamic[QuestionFramework`Private`input$$], 
          QuestionFramework`Private`ch$$], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          
          AssessmentFunction[{{
             Entity["Person", "QueenVictoria::6c4k7"] -> True, 
              "Earl of Aberdeen" -> True, 
              Entity["Person", "LordPalmerston::989h7"] -> True, 
              "Lord Raglan" -> True, "Sir James Simpson" -> True, 
              "Sir William Codrington" -> True, 
              Entity["Person", "NapoleonIII::6h738"] -> True, 
              Entity["Person", "JacquesLeroyDeSaintArnaud::nrz2t"] -> True, 
              Entity["Person", "FrancoisCertainCanrobert::6559q"] -> True, 
              Entity["Person", "AimablePelissier::5j26g"] -> True, 
              Entity["Person", "FrancoisAchilleBazaine::7235v"] -> True, 
              Entity["Person", "PatriceDeMacMahonDukeOfMagenta::2y96x"] -> 
              True, Entity["Person", "AbdulmecidI::7jzrc"] -> True, 
              Entity["Person", "OmarPasha::8w378"] -> True, 
              "\:0130skender Pasha" -> True, 
              "\[CapitalCCedilla]\[DotlessI]rpanl\[DotlessI] Nadir Pasha" -> 
              True, "Ismail Pasha" -> True, 
              Entity["Person", "VictorEmmanuelII::4m2d4"] -> True, 
              Entity["Person", "AlfonsoFerreroLaMarmora::f6gkq"] -> True, 
              Entity["Person", "TsarNicholasI::dn93r"] -> True, 
              Entity["Person", "TsarAlexanderII::vvy3b"] -> True, 
              Entity["Person", "AlexanderDanilovichMenshikov::s4p28"] -> True,
               Entity["Person", "PavelNakhimov::4h6f3"] -> True, 
              Entity["Person", "VasilyZavoyko::48n9x"] -> True, 
              Entity["Person", "NikolayMuravyovAmursky::95n3g"] -> True, 
              Entity["Person", "YevfimyPutyatin::wvw8d"] -> True, 
              Entity["Person", "VladimirIstomin::b4qs7"] -> True, 
              "Count Tolstoy" -> True} -> 1}]]}, {
         If[
          Or[
          AssessmentFunction[{{
               Entity["Person", "QueenVictoria::6c4k7"] -> True, 
                "Earl of Aberdeen" -> True, 
                Entity["Person", "LordPalmerston::989h7"] -> True, 
                "Lord Raglan" -> True, "Sir James Simpson" -> True, 
                "Sir William Codrington" -> True, 
                Entity["Person", "NapoleonIII::6h738"] -> True, 
                Entity["Person", "JacquesLeroyDeSaintArnaud::nrz2t"] -> True, 
                Entity["Person", "FrancoisCertainCanrobert::6559q"] -> True, 
                Entity["Person", "AimablePelissier::5j26g"] -> True, 
                Entity["Person", "FrancoisAchilleBazaine::7235v"] -> True, 
                Entity["Person", "PatriceDeMacMahonDukeOfMagenta::2y96x"] -> 
                True, Entity["Person", "AbdulmecidI::7jzrc"] -> True, 
                Entity["Person", "OmarPasha::8w378"] -> True, 
                "\:0130skender Pasha" -> True, 
                "\[CapitalCCedilla]\[DotlessI]rpanl\[DotlessI] Nadir Pasha" -> 
                True, "Ismail Pasha" -> True, 
                Entity["Person", "VictorEmmanuelII::4m2d4"] -> True, 
                Entity["Person", "AlfonsoFerreroLaMarmora::f6gkq"] -> True, 
                Entity["Person", "TsarNicholasI::dn93r"] -> True, 
                Entity["Person", "TsarAlexanderII::vvy3b"] -> True, 
                Entity["Person", "AlexanderDanilovichMenshikov::s4p28"] -> 
                True, Entity["Person", "PavelNakhimov::4h6f3"] -> True, 
                Entity["Person", "VasilyZavoyko::48n9x"] -> True, 
                Entity["Person", "NikolayMuravyovAmursky::95n3g"] -> True, 
                Entity["Person", "YevfimyPutyatin::wvw8d"] -> True, 
                Entity["Person", "VladimirIstomin::b4qs7"] -> True, 
                "Count Tolstoy" -> True} -> 1}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              
              AssessmentFunction[{{
                 Entity["Person", "QueenVictoria::6c4k7"] -> True, 
                  "Earl of Aberdeen" -> True, 
                  Entity["Person", "LordPalmerston::989h7"] -> True, 
                  "Lord Raglan" -> True, "Sir James Simpson" -> True, 
                  "Sir William Codrington" -> True, 
                  Entity["Person", "NapoleonIII::6h738"] -> True, 
                  Entity["Person", "JacquesLeroyDeSaintArnaud::nrz2t"] -> 
                  True, Entity["Person", "FrancoisCertainCanrobert::6559q"] -> 
                  True, Entity["Person", "AimablePelissier::5j26g"] -> True, 
                  Entity["Person", "FrancoisAchilleBazaine::7235v"] -> True, 
                  Entity["Person", "PatriceDeMacMahonDukeOfMagenta::2y96x"] -> 
                  True, Entity["Person", "AbdulmecidI::7jzrc"] -> True, 
                  Entity["Person", "OmarPasha::8w378"] -> True, 
                  "\:0130skender Pasha" -> True, 
                  "\[CapitalCCedilla]\[DotlessI]rpanl\[DotlessI] Nadir Pasha" -> 
                  True, "Ismail Pasha" -> True, 
                  Entity["Person", "VictorEmmanuelII::4m2d4"] -> True, 
                  Entity["Person", "AlfonsoFerreroLaMarmora::f6gkq"] -> True, 
                  Entity["Person", "TsarNicholasI::dn93r"] -> True, 
                  Entity["Person", "TsarAlexanderII::vvy3b"] -> True, 
                  Entity["Person", "AlexanderDanilovichMenshikov::s4p28"] -> 
                  True, Entity["Person", "PavelNakhimov::4h6f3"] -> True, 
                  Entity["Person", "VasilyZavoyko::48n9x"] -> True, 
                  Entity["Person", "NikolayMuravyovAmursky::95n3g"] -> True, 
                  Entity["Person", "YevfimyPutyatin::wvw8d"] -> True, 
                  Entity["Person", "VladimirIstomin::b4qs7"] -> True, 
                  "Count Tolstoy" -> True} -> 1}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|"Choices" -> {
                 Entity["Person", "PatriceDeMacMahonDukeOfMagenta::2y96x"], 
                 Entity["Person", "JerryLewis::g5822"], 
                 Entity["Person", "IlanMeslier::r8826"], 
                 Entity["Person", "KamillaGafurzianova::42kx5"], 
                 Entity["Person", "ReggieMayo::yw8gd"], 
                 Entity["Person", "HowardDavenport::5j5kb"], 
                 Entity["Person", "FrancoisAchilleBazaine::7235v"], 
                 Entity["Person", "FrancoisCertainCanrobert::6559q"], 
                 Entity["Person", "VasilyZavoyko::48n9x"], 
                 Entity["Person", "AbdulmecidI::7jzrc"]}, "ChoiceOrdering" -> 
               Sort, "MaxAnswers" -> 1, "MinAnswers" -> 1, "Prompt" -> 
               "Select people involved with the Crimean War:"|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{635., {56.433593688416295`, 60.566406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   "ChooseMultiple", <|
    "Prompt" -> "Select people involved with the Crimean War:", "Choices" -> {
       Entity["Person", "PatriceDeMacMahonDukeOfMagenta::2y96x"], 
       Entity["Person", "JerryLewis::g5822"], 
       Entity["Person", "IlanMeslier::r8826"], 
       Entity["Person", "KamillaGafurzianova::42kx5"], 
       Entity["Person", "ReggieMayo::yw8gd"], 
       Entity["Person", "HowardDavenport::5j5kb"], 
       Entity["Person", "FrancoisAchilleBazaine::7235v"], 
       Entity["Person", "FrancoisCertainCanrobert::6559q"], 
       Entity["Person", "VasilyZavoyko::48n9x"], 
       Entity["Person", "AbdulmecidI::7jzrc"]}|>], 
   AssessmentFunction[{{
      Entity["Person", "QueenVictoria::6c4k7"] -> True, "Earl of Aberdeen" -> 
       True, Entity["Person", "LordPalmerston::989h7"] -> True, "Lord Raglan" -> 
       True, "Sir James Simpson" -> True, "Sir William Codrington" -> True, 
       Entity["Person", "NapoleonIII::6h738"] -> True, 
       Entity["Person", "JacquesLeroyDeSaintArnaud::nrz2t"] -> True, 
       Entity["Person", "FrancoisCertainCanrobert::6559q"] -> True, 
       Entity["Person", "AimablePelissier::5j26g"] -> True, 
       Entity["Person", "FrancoisAchilleBazaine::7235v"] -> True, 
       Entity["Person", "PatriceDeMacMahonDukeOfMagenta::2y96x"] -> True, 
       Entity["Person", "AbdulmecidI::7jzrc"] -> True, 
       Entity["Person", "OmarPasha::8w378"] -> True, "\:0130skender Pasha" -> 
       True, "\[CapitalCCedilla]\[DotlessI]rpanl\[DotlessI] Nadir Pasha" -> 
       True, "Ismail Pasha" -> True, 
       Entity["Person", "VictorEmmanuelII::4m2d4"] -> True, 
       Entity["Person", "AlfonsoFerreroLaMarmora::f6gkq"] -> True, 
       Entity["Person", "TsarNicholasI::dn93r"] -> True, 
       Entity["Person", "TsarAlexanderII::vvy3b"] -> True, 
       Entity["Person", "AlexanderDanilovichMenshikov::s4p28"] -> True, 
       Entity["Person", "PavelNakhimov::4h6f3"] -> True, 
       Entity["Person", "VasilyZavoyko::48n9x"] -> True, 
       Entity["Person", "NikolayMuravyovAmursky::95n3g"] -> True, 
       Entity["Person", "YevfimyPutyatin::wvw8d"] -> True, 
       Entity["Person", "VladimirIstomin::b4qs7"] -> True, "Count Tolstoy" -> 
       True} -> 1}]]]], "Output",
 CellChangeTimes->{3.866198378223979*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"9951c3c3-ebd0-43ac-bf9c-9a2fdafe44c9"]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Literature", "Subsubsection",
 CellChangeTimes->{{3.852636141594013*^9, 
  3.852636142896847*^9}},ExpressionUUID->"9d6e3068-629e-4d44-b1d1-\
02dc7fac7cf5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuestionObject", "[", 
  RowBox[{"\"\<Match a passage with the author\>\"", ",", 
   RowBox[{"AssessmentFunction", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"RandomChoice", "@", 
         RowBox[{"TextCases", "[", 
          RowBox[{
           RowBox[{"ResourceData", "[", "#", "]"}], ",", "\"\<Sentence\>\""}],
           "]"}]}], "->", 
        RowBox[{"<|", 
         RowBox[{"\"\<Category\>\"", "->", 
          RowBox[{
           RowBox[{
            RowBox[{"ResourceObject", "[", "#", "]"}], "[", 
            "\"\<SourceMetadata\>\"", "]"}], "[", "\"\<Creator\>\"", "]"}]}], 
         "|>"}]}], ")"}], "&"}], "/@", 
     RowBox[{"{", 
      RowBox[{
      "\"\<The Jungle Book\>\"", ",", "\"\<Alice in Wonderland\>\"", ",", 
       "\"\<Agnes Grey\>\""}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.852635951014695*^9, 3.852635973043103*^9}, {
  3.852636003778503*^9, 3.852636111787141*^9}, {3.853232846122116*^9, 
  3.853232847424562*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"bc26e5ef-4b19-4e2c-8fd6-48dff7394e40"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input1$$ = 
   "I fear, by this time, the reader is well nigh disgusted with the folly\n\
and weakness I have so freely laid before him.", 
   QuestionFramework`Private`input2$$ = "Anne Bront\[EDoubleDot]", 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "Category" -> "Anne Bront\[EDoubleDot]", 
     "GivenAnswer" -> (
      "I fear, by this time, the reader is well nigh disgusted with the folly\
\nand weakness I have so freely laid before him." -> 
      "Anne Bront\[EDoubleDot]"), "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 7, 7, 11, 43, 37.1762231`9.322840153985254}, "Instant",
        "Gregorian", -6.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "String", "SubmissionCount" -> 3|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 3, 
   QuestionFramework`Private`submittedvalue1$$ = 
   "I fear, by this time, the reader is well nigh disgusted with the folly\n\
and weakness I have so freely laid before him.", 
   QuestionFramework`Private`submittedvalue2$$ = "Anne Bront\[EDoubleDot]", 
   QuestionFramework`Private`ch$$ = {
   "I fear, by this time, the reader is well nigh disgusted with the folly\n\
and weakness I have so freely laid before him.", 
    "The first thing she heard was a general chorus of \"There goes Bill!\" \
then the Rabbit's voice alone--\"Catch him, you by the hedge!\"", 
    "They had made a beautiful\nnest by pulling two big leaves together and \
stitching them up the edges\nwith fibers, and had filled the hollow with \
cotton and downy fluff."}}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Match a passage with the author", SpanFromLeft}, {
         PopupMenu[
          Dynamic[QuestionFramework`Private`input1$$], 
          QuestionFramework`Private`ch$$], 
         PopupMenu[
          Dynamic[QuestionFramework`Private`input2$$], {
          "Rudyard Kipling", "Lewis Carroll", "Anne Bront\[EDoubleDot]"}], 
         Which[
          And[
          Head[QuestionFramework`Private`result$$] === 
           AssessmentResultObject, {
            QuestionFramework`Private`input1$$ -> 
             QuestionFramework`Private`input2$$} === {
            QuestionFramework`Private`submittedvalue1$$ -> 
             QuestionFramework`Private`submittedvalue2$$}], 
          QuestionFramework`Private`copyAssessResultButton[
          QuestionFramework`Private`result$$], 
          And[CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "InputAssoc", 
              CurrentValue[
               EvaluationCell[], {
               TaggingRules, "FormNotebook", "QuestionID"}]}] =!= {
            QuestionFramework`Private`input1$$ -> 
             QuestionFramework`Private`input2$$}], CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "InputAssoc", 
              CurrentValue[
               EvaluationCell[], {
               TaggingRules, "FormNotebook", "QuestionID"}]}] = {
            QuestionFramework`Private`input1$$ -> 
             QuestionFramework`Private`input2$$}; Null, 
          And[Head[
             CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "AssessResult"}]] === 
           AssessmentResultObject, {
            QuestionFramework`Private`input1$$ -> 
             QuestionFramework`Private`input2$$} === FirstCase[
             CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "AssessResult"}][All], 
             KeyValuePattern[{"QuestionID" -> CurrentValue[
                  EvaluationCell[], {
                  TaggingRules, "FormNotebook", "QuestionID"}], "GivenAnswer" -> 
                Pattern[QuestionFramework`Private`in, 
                  Blank[]]}] :> QuestionFramework`Private`in]], 
          QuestionFramework`Private`result$$ = CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "AssessResult"}][
             CurrentValue[
              EvaluationCell[], {
              TaggingRules, "FormNotebook", "QuestionID"}]]; 
          QuestionFramework`Private`copyAssessResultButton[
           QuestionFramework`Private`result$$], 
          And[CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmittedAssoc"}] === CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "InputAssoc"}], CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "AssessmentMethod"}] === "Local"], 
          QuestionFramework`Private`submittedvalue1$$ = 
           QuestionFramework`Private`input1$$; 
          QuestionFramework`Private`submittedvalue2$$ = 
           QuestionFramework`Private`input2$$; 
          QuestionFramework`Private`result$$ = 
           AssessmentFunction[{
             "They had made a beautiful\nnest by pulling two big leaves \
together and stitching them up the edges\nwith fibers, and had filled the \
hollow with cotton and downy fluff." -> <|
               "Category" -> "Rudyard Kipling", "Score" -> 1|>, 
              "The first thing she heard was a general chorus of \"There goes \
Bill!\" then the Rabbit's voice alone--\"Catch him, you by the hedge!\"" -> <|
               "Category" -> "Lewis Carroll", "Score" -> 1|>, 
              "I fear, by this time, the reader is well nigh disgusted with \
the folly\nand weakness I have so freely laid before him." -> <|
               "Category" -> "Anne Bront\[EDoubleDot]", "Score" -> 1|>}][
            QuestionFramework`Private`input1$$ -> 
             QuestionFramework`Private`input2$$]; CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "AssessResult", 
              CurrentValue[
               EvaluationCell[], {
               TaggingRules, "FormNotebook", "QuestionID"}]}] = 
           QuestionFramework`Private`result$$; 
          QuestionFramework`Private`copyAssessResultButton[
           QuestionFramework`Private`result$$], True, ""]}, {
         If[
          Or[
          AssessmentFunction[{
             "They had made a beautiful\nnest by pulling two big leaves \
together and stitching them up the edges\nwith fibers, and had filled the \
hollow with cotton and downy fluff." -> <|
               "Category" -> "Rudyard Kipling", "Score" -> 1|>, 
              "The first thing she heard was a general chorus of \"There goes \
Bill!\" then the Rabbit's voice alone--\"Catch him, you by the hedge!\"" -> <|
               "Category" -> "Lewis Carroll", "Score" -> 1|>, 
              "I fear, by this time, the reader is well nigh disgusted with \
the folly\nand weakness I have so freely laid before him." -> <|
               "Category" -> "Anne Bront\[EDoubleDot]", "Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          Button[
           Framed[
            Style[
            "Submit", 12, FontColor -> 
             If[QuestionFramework`Private`buttonenabled$$, White, Black, 
               White], FontWeight -> Plain], FrameStyle -> None, ImageMargins -> 
            0, RoundingRadius -> 2, ImageSize -> {Automatic, 21}, 
            BaselinePosition -> Baseline, Background -> 
            If[QuestionFramework`Private`buttonenabled$$, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], 
           QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              
              AssessmentFunction[{
               "They had made a beautiful\nnest by pulling two big leaves \
together and stitching them up the edges\nwith fibers, and had filled the \
hollow with cotton and downy fluff." -> <|
                 "Category" -> "Rudyard Kipling", "Score" -> 1|>, 
                "The first thing she heard was a general chorus of \"There \
goes Bill!\" then the Rabbit's voice alone--\"Catch him, you by the hedge!\"" -> \
<|"Category" -> "Lewis Carroll", "Score" -> 1|>, 
                "I fear, by this time, the reader is well nigh disgusted with \
the folly\nand weakness I have so freely laid before him." -> <|
                 "Category" -> "Anne Bront\[EDoubleDot]", "Score" -> 1|>}][
              QuestionFramework`Private`input1$$ -> 
               QuestionFramework`Private`input2$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|
              "Choices" -> {
                "I fear, by this time, the reader is well nigh disgusted with \
the folly\nand weakness I have so freely laid before him.", 
                 "The first thing she heard was a general chorus of \"There \
goes Bill!\" then the Rabbit's voice alone--\"Catch him, you by the hedge!\"",
                  "They had made a beautiful\nnest by pulling two big leaves \
together and stitching them up the edges\nwith fibers, and had filled the \
hollow with cotton and downy fluff."}, 
               "Categories" -> {
                "Rudyard Kipling", "Lewis Carroll", 
                 "Anne Bront\[EDoubleDot]"}, "ChoiceOrdering" -> Sort, 
               "Prompt" -> "Match a passage with the author"|>]; 
           QuestionFramework`Private`submittedvalue1$$ = 
            QuestionFramework`Private`input1$$; 
           QuestionFramework`Private`submittedvalue2$$ = 
            QuestionFramework`Private`input2$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True], Appearance -> None, BaselinePosition -> Baseline, 
           ImageSize -> {Automatic, 21}, Evaluator -> Automatic, Method -> 
           "Preemptive"]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{473., {60.433593688416295`, 64.5664063115837}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input1$$, 
      QuestionFramework`Private`input2$$, 
      QuestionFramework`Private`submittedvalue1$$, 
      QuestionFramework`Private`submittedvalue2$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "Match a passage with the author"], 
   AssessmentFunction[{
    "They had made a beautiful\nnest by pulling two big leaves together and \
stitching them up the edges\nwith fibers, and had filled the hollow with \
cotton and downy fluff." -> <|"Category" -> "Rudyard Kipling", "Score" -> 1|>,
      "The first thing she heard was a general chorus of \"There goes Bill!\" \
then the Rabbit's voice alone--\"Catch him, you by the hedge!\"" -> <|
      "Category" -> "Lewis Carroll", "Score" -> 1|>, 
     "I fear, by this time, the reader is well nigh disgusted with the folly\n\
and weakness I have so freely laid before him." -> <|
      "Category" -> "Anne Bront\[EDoubleDot]", "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{
  3.852636015753509*^9, {3.852636096040781*^9, 3.852636132808194*^9}, {
   3.8532328133877773`*^9, 3.853232849467033*^9}, 3.8661983118431983`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"7124dd99-b2c5-41c3-8d23-bb37721b9df2"]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Art", "Subsubsection",
 CellChangeTimes->{{3.866198333208215*^9, 
  3.8661983336029496`*^9}},ExpressionUUID->"b073e000-781f-4b78-88ee-\
10dde7ae4f13"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"photogs", "=", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"Pirkle Jones\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"Person\"", ",", "\"PirkleJones::8p665\""}], "]"}], 
       "\"Entity[\\\"Person\\\", \\\"PirkleJones::8p665\\\"]\"", "\"person\""},
      "Entity"], ",", 
     TemplateBox[{"\"Dorothea Lange\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"Person\"", ",", "\"DorotheaLange::9dyg4\""}], "]"}], 
       "\"Entity[\\\"Person\\\", \\\"DorotheaLange::9dyg4\\\"]\"", 
       "\"person\""},
      "Entity"], ",", 
     TemplateBox[{"\"Robert Capa\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"Person\"", ",", "\"RobertCapa::2339j\""}], "]"}], 
       "\"Entity[\\\"Person\\\", \\\"RobertCapa::2339j\\\"]\"", "\"person\""},
      "Entity"], ",", 
     TemplateBox[{"\"Ansel Adams\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"Person\"", ",", "\"AnselAdams::94p85\""}], "]"}], 
       "\"Entity[\\\"Person\\\", \\\"AnselAdams::94p85\\\"]\"", 
       "\:f3b5person\:f3b5"},
      "Entity"]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"c", "=", 
     RowBox[{"RandomChoice", "[", "photogs", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"QuestionObject", "[", 
    RowBox[{
     RowBox[{"QuestionInterface", "[", 
      RowBox[{"\"\<MultipleChoice\>\"", ",", 
       RowBox[{"<|", 
        RowBox[{"\"\<Prompt\>\"", "->", 
         RowBox[{"Column", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Identify the photographer\>\"", ",", 
            RowBox[{"Image", "[", 
             RowBox[{
              RowBox[{"RandomChoice", "@", 
               RowBox[{"DeleteMissing", "@", 
                RowBox[{"EntityValue", "[", 
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{
                    RowBox[{"EntityValue", "[", 
                    RowBox[{"c", ",", "\"\<NotableArtworks\>\""}], "]"}], ",", 
                    RowBox[{"UpTo", "[", "10", "]"}]}], "]"}], ",", 
                  "\"\<Image\>\""}], "]"}]}]}], ",", 
              RowBox[{"ImageSize", "->", "200"}]}], "]"}]}], "}"}], "]"}]}], 
        "|>"}]}], "]"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
     RowBox[{"AssessmentFunction", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{"photogs", "->", "False"}], "]"}], ",", 
         RowBox[{"c", "->", "True"}]}], "|>"}], "]"}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.852637473654994*^9, 3.852637591265065*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"b94eb42c-313c-4792-9ceb-28dc0b06b47c"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = "", 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = "", 
   QuestionFramework`Private`ch$$ = {
    Entity["Person", "AnselAdams::94p85"], 
    Entity["Person", "DorotheaLange::9dyg4"], 
    Entity["Person", "PirkleJones::8p665"], 
    Entity["Person", "RobertCapa::2339j"]}}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
         Column[{"Identify the photographer", 
           Image[CompressedData["
1:eJyMvQdcVFm6tzv3hO/MnDN5ppNtThhBySKI5CAZyZJFQCQjWTIYEcWcQHIG
JYMoYkbMObTaats5Tvf09Myc0/09Va+9p8aZc+/t39v7t2rXrs2u9az/G9Ze
u5wSFu+x6l9+8pOfJP+UjUdomkVSUmiG56954RWXHB0ZF7HSIS4lIjIiyTjs
X9m5lv9387+q3d5U13OkdbDnaH9XR19nO1tpDHQfERvq6xoe7D15rO/EQM/x
/u5Tg/2njw1gZ4YGz50YunDyxOjI8MVTJy+dOYVdPnv6yrkzV8+fvXbh3I2L
F7CbYxduXRoVu3354p0rY3evXsLuXVHZ3ctjr9idSxeVt26PjWKy5/7Vy9iD
a1ceXr8qRlu984pi965cxu5fVtmdixfvjo3dHh29ef787fPn746Osr1x5syN
c+eunTlz5dSpSydPXjxxQjFeYpdHRngLoyF7xkZUduHE8bPHBk8P9J/q72N7
ZnCABttzQ8fYT3ukrxejcbzr6HBP10hfD3ayt/tEd6fY6WP9Z4YGzp04dn54
CDt7fJA9pwb7Tg50YSOD3RiN4f7Oob6jx3qP0NX0vHDp7Wrv6WwT625tOtpU
315f09FQ29XS2H+k7WhrY1d7c3dHCwa4Y72dygd5KShlJ1v2D/f1nODCertp
jAz0wfH88HGBKDZ2ekST47ULbM9eHz2H3bh4/m9AgTt6/h/txoVzmu3r58/S
EI4YWDXRs+f22Eu7dZFzjt4cvXDrgsoAhwkvwN08e5bt1ZGRseFheF0YGjo3
OHh2YEAxXp4/dgzjLYwGe1THHBsUdid7e050dx3vAkfXcE83L4UaJm+JHTva
AUSQsR3qPDJ4pB1T7ezpPNHbdbK/B2oqcP10Yxc7j3W3KzbY1TbQ2dp7tKXn
SDOygghoAHSkrbGjtYGtClZL45HGutbaqubqypaaw2111TDiyCMtDVjv0TbQ
Y5BiPy8xESYcRZ7He7qGujuPdR3FaJzs70WPZ48fQ49iClBQqoU5Inb5LAo9
deXc6avngXvmyplT2GVw/2iyB7t69rSmAVGwAl1UKSZj4MYFlV0/D+tz186d
vXr2zNXTpzHAYTRQ00tlIajjxxU6UDvT3y/2CkppyFuwE+m9QlB48VKxY0fh
1QEssYGOtv721r62FkzV6GhFL4OdHUPd9Bu9d4T2wNH2viPNWG9HE9bd1tDV
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
ehsbOyRJIjpu3HgnF2c0CF4dHZ35c+fhS+ur6uqqqmsra2oPV9Gor65prK1r
qiMpBSIJKlGyUYAqMzCKvZw9UxMUz6kC19WN0QAlezSX4iu6U0xjcf6xl889
qVcbKmucZKGa3BfQXGB/c/TC7bGLdy9fUjG6eRm7f+OSeE5NGUr9SHSjgYRp
37wy9s7dW+dGTnS1tzTXVResy4wIDs5ITibexUfHxEREJscmluQVlW/Ztj6/
eG18cmzUmrXJqempGdGRq8NCwvGcdDi6c3Nxl/CHgQZH6r3cB0+IoMhPiHRk
oRIcYYeyCJEAooGRlOJ+wUQo5JiI8FUhQaEciS8FrkiVNnDByp/jgypVztWm
WvzZz342depUBBgZsSptberqqGgIqiAersXA11BTC77meoIjCSqVe5MaYr0y
P0PRJ0btIBPar6jveHePmHDUZCer1JQVp5rPyChRTyb/5Y6P4FMIymrDvyc4
piKlxsdWZraVm4OP79xUyn+KlKf37z57cO+duzePtDRsKMwryc/ZVFyQEr8m
JiIiJz0dgsmx8elJqRsKSnZt3VW+uTwvIy8uOr4wpyBtbXrcmvjQ4LDIiKg1
q2MDA4KAhfTABEQKATJMwMmcGDvZg5TYQ2JJnY5vxGcS8nhLyMKUnTCCCAfD
UbYkM+ynzak4DKbsnD51xpuvv8UWjpwTsXu6e2D+vn7ey73MzZYo+IQgAlTh
a2gUgj9avRIW22rrsPa6eiAKQfCJ3FSxr6v7RE/vcG8fRgN7RWuKaS7hlrRT
7kTIsl6FnYDTJCimEKQEuHN1VJynksnAkZCnvm948713Hrx77847t27AEW+w
s2xL6YZitnt3bCvOzaVYwNISEzOS16YnpeSkZyPAktySdanr0hPTM1IyM1LS
M9IyC/IKUWJwYAjSI2DRk2gKQJTeGN07W2sOjhEPCQU0CCPgIjTxnBxP/wtx
KJPPYMAlt+GDfITxEBO9JjE+CaWvjiIFXskYQHTkruPHTWDLIOEwRoKDnb2j
vYOJMdGT0mPuhLfHCzuVF62swYtqalCsubZe8z5Fa00tBsSO+gYcqRB8mXwe
7UR6sDvZ1096gKkaA32a+OSRNEx52FD85ysENdlpElQMGaru3115qUGlHlSS
mWcP7qpnYy7hmesrDlbu2dV4uOLgnp17ysvKSzdt3ViC/0xPSipct25zcTEF
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
K6Pnbl29NNB9tKbiwK5tpehuTeRKLzfnuOhVOVRsCfHJ8XFpyUnpKclIL2Nt
anJ8AgHO3dklIjQMD6mrrYMSo8Ijo1dG0fP0HjKhBxACwmEkkwoqfg9xSfmA
uwtaEXzvzv1tW7eTctCmuxjzOECyGoiADEUgtJ6uXio4PkvSkpmeRWZCBisL
dznnuqwcdtKG79YtZdSVfJDLILziEoEFI7ZobfGiJeZmlrCjvUBbT3eBAXBh
Jw0UClygQ5ArZyxJ+ioCxItW7FP5z/279+zbtbvywEHUV1dJ+KsDIu4RQ1bA
0lx/KAIk/PV3dmIcQG2FYEn8YJeZkuLn6WlpYhzq59NQeUjm1hDd1fNn5TEQ
4qDkOTI7igBVdwxPDZ88ptqCDwPfuZETQ33dVQf37d6+NScjFXxYVmoyUW+N
Sn2rE9bEgA//qcaXkpqUHBu9OikuHrcZHbEq0M/fSE//rdde19fRy1ybQX+u
WR1LV2P0ISGJZA8QUnTDkWyfVESKCDiGhYTjKglYUAYcjpQtXYcAOR6aaG2g
bzAnO5cT4l27O3uAC6DQ4LAtm0qXe3hJViM3lciI8Kgcib9FkvhnC3Nrot6b
r7+NDJc5uJgtXorPHD9uErD0dUmcTADKW1AWrDT467IairFHoyi3sDiviO36
gpKtmzaTmBEysC0lG7Zt2rJz67YdpWWIa+fWraTicOxoaW5vbmptpOKoZ8vL
7iMd/d1dbJvqag/u3cNOPNieHeUrQ4Kd7ex058xChju3bFqzMqy1tlqWg5Jz
yuomKSJk6e+tSxeBeH5k5OKZM7euXLlw6hSZLeOEHJLBsC4tbf/OnYwQ0pKc
9HQsOTY2PDCQuiAtNSU7KyN1bXJM9Oo1q2OSE5OSEhLjY+OiI6PoOqm22DJc
6caCvOLKQ9XBgWGMdsINXQcd3BEcgUgUgxoOEz8pd+7YL7qjrwDN4MfISfCu
kGUMEOBwkhDnr5DznDwxQpWHMHGYCBNkfAq9yz1fmRHF0+7ZtRfKiBGJzZ2l
M+6NiW+/OUl/ofEiQ7P5cxZqz9UVmzVjntb0ufNmL+AYGuQ2GHmp1PtCcNe2
neWl2zeXbMJ2lG3bXrp1y4aNoCxdT+5dsrGwmC19CME927fvLS8XcGwbayk9
qml0dbQP9vYM9fclxcUSgEgkYiJXUWeFBq7AoNZ4uILUZVNBXkLUqj1lpZKI
3hwbxW2KDHGq+FJSGpLSq6OjZ06cQN1UAakJCYDDKMYZRWyp7CjP0xIT0Xh2
aiouNDY6KmZ1VHJSQlZm+rqs7Nx1ORlp6bExa5wcl82ZpYr7eBsoiHBomBib
ZWfmlhRtZHj//rckhBNQE4B4C2mADy9KTcenBDqJ38//8xfEHSmuGQPEuGqS
ggMVyDkwICg6cjXpCm6WzgTc/r0HEuISkR7eEtFRthMoM9IygU5bXDRwGSRs
szKyp0+ZNUdLe+a0OQAyNjC1WGKzZLElBr7ZM+dPmThj6qSZMF0wX5/DAKq3
0BAx4kghyJfCh5CC7t2xB3wocUORaoICI+gf3L33wK49+3bs2rN9x+5t2/bt
2HFozx4yGcQFncoD+w8fPIDVV1dB8PhAf19XZ/66bG8PdxwaUYl62UhPl4Or
9u3JS0/tbG68f/0qEXBjfu72jet721txqm11NSSo2L7tZQd2bCfn4WDquM3F
67HMlNT8rHVFOXlpicm7yrYzkIL9AuKjY7LWphVk57A/OzWdfBJ3Abj83Lyi
gsLM9IyVYeF2Nrbz5swVBeHWkAzsZNIDHDgoKwvbrIycLZvKgEhwwWsZ6i+i
SxEIvYou6B+ZMUOSSKbiYCUq4wDQRK2KpqYjusk9PtLL0s1bGYzQEa+LFz3S
fpQchr+OO+V4QEMKMXIq9uCiiYlq9emwtVpqh/TgBb6lZtZs4QUsRIf0gIjp
zNODIPtpUHrgYHG86iJR5U4heGjvwd3bd6HEXdvLy7eWYXt37qo6cIhMhqK+
5lAlBHeUwnQ3Kc2P+A7t370LwW7bsnnPjp2gHD17rq2pkcwhMjyMAhkZromK
RpXoZUNBAekNOeq1ixfJV1ETWlZNjxQVrc/JRVmlRcW4x92lW4tzc/Hehety
YbcuLaNso2o5dKCPHxBh6rrMifM72Nj6eC4vzi8ozCnYvH5DcWER4BCdj5e3
qcliAz19a0srDzdVL1Fck6ggLoYrBMEHEXIGPCfhpjC/pKy0PMAvCI68pIeJ
TTL1oV4s4c4YII0syCvMzy3gs0uXWMjdQJwn+AL8VsiMCnTKSrcR9SCOeHGk
ZD7yQaSHGBGdFIycmZNwWk6iWhGqvTA6El/hamK0BEBwNNQzMdJfjNFeqG2A
CTX2YxxDPkMoZNT9WDOqkjEI4kjLNm3durGULbZz2/aDe/e1NDSSmiKxuqrD
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
4vWFRcnxcWWbt9RXV10evXB25MTY2bPdHa2b1xdt3lSyb1f5N19/8flnn/z5
u2//+69//vabP/Kp2Jg1X37+BdFwgbbOpAkTZUUTeaYsyiUFlRv3aAoFISgy
XqIGLpH+gQ4mizxRLnCBiDsFKJU+VSGGh4Qmow7uuE36Vr2u3p7xI+UP2ax4
V04iv9cEJmC5uXhiiBFkyBDdyaQo/pP4SGJDQ/UYqZEpW231DBsxBS8KQdyC
shIVT8KXKivdpp7KSKGK55q3bCo90n4Uz4ljpP8pFuht+hx/yHbNmrj09Mz9
+w/u3r03NzefVISsA5lQGJKcmJtbkI6KGElTf/Ob373++pskVIwfRhGJMQOb
EUu8AxbfncFP/o/bsbGwpH43W2RiqKtnrG+wxGSxiaHRcjf36IhV20u3DPb2
jBw7NtTbm7k2ae6MGbrz5+RmprXUV9dUHMhKTao7fPDW9Ut/+eNXn3703ofv
Pf3um69ePH38w/f/kxAfS0w8XFFJJsZ1/uQn/8Lo4nqASGig//GlEPzVL35N
byAolCJ1ATTpdrQjP7IkmECAymTilJf0IQ0crGQ4glseK4MXH5QfqeAkUurK
ChlJdUSYhEhJSPCl1IYQhKP6h/JUDeRJ7U/xiDwRKSUGO7G5s1XPYsjPznAq
+hOIDC38RnpqBmGdsbQuKyc1JQ3vASaEBkH8Id5M9OXvvyIrax3qo+jDGZJq
oikiGjqiSOcAslPRIEZ8VNWM02e/9eYEPMOUSdNlSRjDmK/ANRCYkuLi3Z1d
jPT058+es9jImCQzMjS0IDu7o6mp5tChbZs2NdXU3L1x9ctPPrx389rI0MDh
A3vDgwJCV/heOn/68oUzo2dOPrxz7fs/f/0/331z5/rlzz95/6vPP/r84w/O
nRo2X2I6ZTK6Q2WqQUWFkpy8lpGm+ulOG3vyFvoTvUOQFJRkm6Elv2kACzhK
hix5iGwBJKtoYEQf4o1xjHwdXJncHGEMSHqP9PCofEeAyhyFJKWyCk6mBGWE
qL2rDXp0d10etCLUx8vf3zeQ7Qr/YPB5L/cLDV4ZHrqKnV6evr7e+PMQqV+4
EmAxANAg7NYmp2ZnrivftoPymStnKOIBNm/GoZaRZuBC5bcUpk+fqadnACl4
kXnCjngHXDyh/AQfyORJYVwoAoS+ype+Pfn118YRd+TRG74sF0Dqwt/FKXl7
eIIvNnr10bb2I61td2/eev7o0e2rV6+PjdUfPtxYXU14Li/d1FJf09ZYlxwX
k5GSiAA3FuXdvnbp3Mhxtt9+9dkfv/wU++H7v3z9xad/+PyTkeOD+3fvIFBq
TZv61htvkt4TyAryCmVCDEzby8rBJLdKcaq4vpqqWsn26R9JR2UeTJ53kIRE
ZtU4WJ5tQWXyLhKWKQiIy7SzPGuGsyWeyu+F8imJqlwAowUvRCfjiLgkoGBh
IRFxaxLhSANwK1T3PUP8fFZErYpZGRYZ4BcEvuUePhHhUXwECYjJOsad5bvy
cymqCjaUbCQYoQtGCxeZlpaB3Naty2XL0CXe/eIXv0JTeKS4uATxnACF189/
/ksRKT5KvCjgKO3Ro2qP+jYl/orKhRErTqyvp3+w/xjyLykorK6o9F3uVVdV
/ec/fnv7+o0Ht25dHR1tra/fv3NnSV6e6udcwoJDAnyjV4YW5mR1tjWfGR5C
gC/efQd2n3343p9g9v6zD58/+cNnH925cbWjpbG9uSElIdZ1maO9tZWvt09J
UTGhQX6Qhz708fKlb2XGm69Jz5OiHK6oYhjLLDd9jsOUqRh5LBpxKSCQFQ34
IklOKCFSZrChjzeDjkxTyKO+0Ed3/C2+O0MXdw0CeexablfJ7/0isZCgcE93
bwgiRqhFR66hvWZ1PPiwyIjVKHHVymj+hDyyzcXwXTgb7BAgiuCP8i0YqxR9
+H+yRJIN1EfhIJWC/EaN/KjCG2+8BTUcLOmK/GgGcGEns20Y+6XMx8hO8djy
62E4kI62I8cGhj548X7nkaPklkD0dHXTmTuvoab2wJ69e8vL87Oy2F67eHFV
SIiZkZG5idHs6VMcrC3qDh+6fmn0xuWLSO/pO/cAhwyfP37w6N6tzz968cGz
x/7envoL5m8v3TRlwjh/b69AP9/0lLUpCYkkhy5OzlSIFBr0Hl+cSkoqPi6J
b93d2YNeEAj9gNxkhTyY6CiY4vcARF/Bi+0Kf3oyEmqgpzzMTM+SioM2p6Ib
KUzk7hL44MjH5XabREwcoKwJZ4uOgIX60BcoaYMJQ4Z4USSJEmkgSVAGB4bF
xiQQ5hj5uFAGFRfM+flbGLGPihX3ggxJrblskFH34TxJYPCW6t9XV/10sPzM
FxBRGWQBxB4UCjJ2AkviIB71l7/8tWSkmExrIPk9u/bW1dRXVVZv3VJaeagi
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
A/3g1MQ0raI8tRgQ/z/OuTMA
            "], "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
            ImageSize -> 200, Interleaving -> True, Magnification -> 
            Automatic, 
            MetaInformation -> <|
             "Source" -> 
              "http://www.sfmoma.org/explore/collection/artwork/111739", 
              "URL" -> 
              "http://www.wolframcdn.com/waimage/hset073/c55/\
c55bb96814261bd28475320d0043cfd3_v001s.jpg"|>]}], SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], 
          QuestionFramework`Private`ch$$, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          
          AssessmentFunction[{
           Entity["Person", "PirkleJones::8p665"] -> False, 
            Entity["Person", "DorotheaLange::9dyg4"] -> True, 
            Entity["Person", "RobertCapa::2339j"] -> False, 
            Entity["Person", "AnselAdams::94p85"] -> False}]]}, {
         If[
          Or[
          AssessmentFunction[{
             Entity["Person", "PirkleJones::8p665"] -> False, 
              Entity["Person", "DorotheaLange::9dyg4"] -> True, 
              Entity["Person", "RobertCapa::2339j"] -> False, 
              Entity["Person", "AnselAdams::94p85"] -> False}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              
              AssessmentFunction[{
               Entity["Person", "PirkleJones::8p665"] -> False, 
                Entity["Person", "DorotheaLange::9dyg4"] -> True, 
                Entity["Person", "RobertCapa::2339j"] -> False, 
                Entity["Person", "AnselAdams::94p85"] -> False}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|"Choices" -> {
                 Entity["Person", "PirkleJones::8p665"], 
                 Entity["Person", "DorotheaLange::9dyg4"], 
                 Entity["Person", "RobertCapa::2339j"], 
                 Entity["Person", "AnselAdams::94p85"]}, "ChoiceOrdering" -> 
               Sort, "MaxAnswers" -> 1, "MinAnswers" -> 1, "Prompt" -> 
               Column[{"Identify the photographer", 
                  Image[CompressedData["
1:eJyMvQdcVFm6tzv3hO/MnDN5ppNtThhBySKI5CAZyZJFQCQjWTIYEcWcQHIG
JYMoYkbMObTaats5Tvf09Myc0/09Va+9p8aZc+/t39v7t2rXrs2u9az/G9Ze
u5wSFu+x6l9+8pOfJP+UjUdomkVSUmiG56954RWXHB0ZF7HSIS4lIjIiyTjs
X9m5lv9387+q3d5U13OkdbDnaH9XR19nO1tpDHQfERvq6xoe7D15rO/EQM/x
/u5Tg/2njw1gZ4YGz50YunDyxOjI8MVTJy+dOYVdPnv6yrkzV8+fvXbh3I2L
F7CbYxduXRoVu3354p0rY3evXsLuXVHZ3ctjr9idSxeVt26PjWKy5/7Vy9iD
a1ceXr8qRlu984pi965cxu5fVtmdixfvjo3dHh29ef787fPn746Osr1x5syN
c+eunTlz5dSpSydPXjxxQjFeYpdHRngLoyF7xkZUduHE8bPHBk8P9J/q72N7
ZnCABttzQ8fYT3ukrxejcbzr6HBP10hfD3ayt/tEd6fY6WP9Z4YGzp04dn54
CDt7fJA9pwb7Tg50YSOD3RiN4f7Oob6jx3qP0NX0vHDp7Wrv6WwT625tOtpU
315f09FQ29XS2H+k7WhrY1d7c3dHCwa4Y72dygd5KShlJ1v2D/f1nODCertp
jAz0wfH88HGBKDZ2ekST47ULbM9eHz2H3bh4/m9AgTt6/h/txoVzmu3r58/S
EI4YWDXRs+f22Eu7dZFzjt4cvXDrgsoAhwkvwN08e5bt1ZGRseFheF0YGjo3
OHh2YEAxXp4/dgzjLYwGe1THHBsUdid7e050dx3vAkfXcE83L4UaJm+JHTva
AUSQsR3qPDJ4pB1T7ezpPNHbdbK/B2oqcP10Yxc7j3W3KzbY1TbQ2dp7tKXn
SDOygghoAHSkrbGjtYGtClZL45HGutbaqubqypaaw2111TDiyCMtDVjv0TbQ
Y5BiPy8xESYcRZ7He7qGujuPdR3FaJzs70WPZ48fQ49iClBQqoU5Inb5LAo9
deXc6avngXvmyplT2GVw/2iyB7t69rSmAVGwAl1UKSZj4MYFlV0/D+tz186d
vXr2zNXTpzHAYTRQ00tlIajjxxU6UDvT3y/2CkppyFuwE+m9QlB48VKxY0fh
1QEssYGOtv721r62FkzV6GhFL4OdHUPd9Bu9d4T2wNH2viPNWG9HE9bd1tDV
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
ehsbOyRJIjpu3HgnF2c0CF4dHZ35c+fhS+ur6uqqqmsra2oPV9Gor65prK1r
qiMpBSIJKlGyUYAqMzCKvZw9UxMUz6kC19WN0QAlezSX4iu6U0xjcf6xl889
qVcbKmucZKGa3BfQXGB/c/TC7bGLdy9fUjG6eRm7f+OSeE5NGUr9SHSjgYRp
37wy9s7dW+dGTnS1tzTXVResy4wIDs5ITibexUfHxEREJscmluQVlW/Ztj6/
eG18cmzUmrXJqempGdGRq8NCwvGcdDi6c3Nxl/CHgQZH6r3cB0+IoMhPiHRk
oRIcYYeyCJEAooGRlOJ+wUQo5JiI8FUhQaEciS8FrkiVNnDByp/jgypVztWm
WvzZz342depUBBgZsSptberqqGgIqiAersXA11BTC77meoIjCSqVe5MaYr0y
P0PRJ0btIBPar6jveHePmHDUZCer1JQVp5rPyChRTyb/5Y6P4FMIymrDvyc4
piKlxsdWZraVm4OP79xUyn+KlKf37z57cO+duzePtDRsKMwryc/ZVFyQEr8m
JiIiJz0dgsmx8elJqRsKSnZt3VW+uTwvIy8uOr4wpyBtbXrcmvjQ4LDIiKg1
q2MDA4KAhfTABEQKATJMwMmcGDvZg5TYQ2JJnY5vxGcS8nhLyMKUnTCCCAfD
UbYkM+ynzak4DKbsnD51xpuvv8UWjpwTsXu6e2D+vn7ey73MzZYo+IQgAlTh
a2gUgj9avRIW22rrsPa6eiAKQfCJ3FSxr6v7RE/vcG8fRgN7RWuKaS7hlrRT
7kTIsl6FnYDTJCimEKQEuHN1VJynksnAkZCnvm948713Hrx77847t27AEW+w
s2xL6YZitnt3bCvOzaVYwNISEzOS16YnpeSkZyPAktySdanr0hPTM1IyM1LS
M9IyC/IKUWJwYAjSI2DRk2gKQJTeGN07W2sOjhEPCQU0CCPgIjTxnBxP/wtx
KJPPYMAlt+GDfITxEBO9JjE+CaWvjiIFXskYQHTkruPHTWDLIOEwRoKDnb2j
vYOJMdGT0mPuhLfHCzuVF62swYtqalCsubZe8z5Fa00tBsSO+gYcqRB8mXwe
7UR6sDvZ1096gKkaA32a+OSRNEx52FD85ysENdlpElQMGaru3115qUGlHlSS
mWcP7qpnYy7hmesrDlbu2dV4uOLgnp17ysvKSzdt3ViC/0xPSipct25zcTEF
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
K6Pnbl29NNB9tKbiwK5tpehuTeRKLzfnuOhVOVRsCfHJ8XFpyUnpKclIL2Nt
anJ8AgHO3dklIjQMD6mrrYMSo8Ijo1dG0fP0HjKhBxACwmEkkwoqfg9xSfmA
uwtaEXzvzv1tW7eTctCmuxjzOECyGoiADEUgtJ6uXio4PkvSkpmeRWZCBisL
dznnuqwcdtKG79YtZdSVfJDLILziEoEFI7ZobfGiJeZmlrCjvUBbT3eBAXBh
Jw0UClygQ5ArZyxJ+ioCxItW7FP5z/279+zbtbvywEHUV1dJ+KsDIu4RQ1bA
0lx/KAIk/PV3dmIcQG2FYEn8YJeZkuLn6WlpYhzq59NQeUjm1hDd1fNn5TEQ
4qDkOTI7igBVdwxPDZ88ptqCDwPfuZETQ33dVQf37d6+NScjFXxYVmoyUW+N
Sn2rE9bEgA//qcaXkpqUHBu9OikuHrcZHbEq0M/fSE//rdde19fRy1ybQX+u
WR1LV2P0ISGJZA8QUnTDkWyfVESKCDiGhYTjKglYUAYcjpQtXYcAOR6aaG2g
bzAnO5cT4l27O3uAC6DQ4LAtm0qXe3hJViM3lciI8Kgcib9FkvhnC3Nrot6b
r7+NDJc5uJgtXorPHD9uErD0dUmcTADKW1AWrDT467IairFHoyi3sDiviO36
gpKtmzaTmBEysC0lG7Zt2rJz67YdpWWIa+fWraTicOxoaW5vbmptpOKoZ8vL
7iMd/d1dbJvqag/u3cNOPNieHeUrQ4Kd7ex058xChju3bFqzMqy1tlqWg5Jz
yuomKSJk6e+tSxeBeH5k5OKZM7euXLlw6hSZLeOEHJLBsC4tbf/OnYwQ0pKc
9HQsOTY2PDCQuiAtNSU7KyN1bXJM9Oo1q2OSE5OSEhLjY+OiI6PoOqm22DJc
6caCvOLKQ9XBgWGMdsINXQcd3BEcgUgUgxoOEz8pd+7YL7qjrwDN4MfISfCu
kGUMEOBwkhDnr5DznDwxQpWHMHGYCBNkfAq9yz1fmRHF0+7ZtRfKiBGJzZ2l
M+6NiW+/OUl/ofEiQ7P5cxZqz9UVmzVjntb0ufNmL+AYGuQ2GHmp1PtCcNe2
neWl2zeXbMJ2lG3bXrp1y4aNoCxdT+5dsrGwmC19CME927fvLS8XcGwbayk9
qml0dbQP9vYM9fclxcUSgEgkYiJXUWeFBq7AoNZ4uILUZVNBXkLUqj1lpZKI
3hwbxW2KDHGq+FJSGpLSq6OjZ06cQN1UAakJCYDDKMYZRWyp7CjP0xIT0Xh2
aiouNDY6KmZ1VHJSQlZm+rqs7Nx1ORlp6bExa5wcl82ZpYr7eBsoiHBomBib
ZWfmlhRtZHj//rckhBNQE4B4C2mADy9KTcenBDqJ38//8xfEHSmuGQPEuGqS
ggMVyDkwICg6cjXpCm6WzgTc/r0HEuISkR7eEtFRthMoM9IygU5bXDRwGSRs
szKyp0+ZNUdLe+a0OQAyNjC1WGKzZLElBr7ZM+dPmThj6qSZMF0wX5/DAKq3
0BAx4kghyJfCh5CC7t2xB3wocUORaoICI+gf3L33wK49+3bs2rN9x+5t2/bt
2HFozx4yGcQFncoD+w8fPIDVV1dB8PhAf19XZ/66bG8PdxwaUYl62UhPl4Or
9u3JS0/tbG68f/0qEXBjfu72jet721txqm11NSSo2L7tZQd2bCfn4WDquM3F
67HMlNT8rHVFOXlpicm7yrYzkIL9AuKjY7LWphVk57A/OzWdfBJ3Abj83Lyi
gsLM9IyVYeF2Nrbz5swVBeHWkAzsZNIDHDgoKwvbrIycLZvKgEhwwWsZ6i+i
SxEIvYou6B+ZMUOSSKbiYCUq4wDQRK2KpqYjusk9PtLL0s1bGYzQEa+LFz3S
fpQchr+OO+V4QEMKMXIq9uCiiYlq9emwtVpqh/TgBb6lZtZs4QUsRIf0gIjp
zNODIPtpUHrgYHG86iJR5U4heGjvwd3bd6HEXdvLy7eWYXt37qo6cIhMhqK+
5lAlBHeUwnQ3Kc2P+A7t370LwW7bsnnPjp2gHD17rq2pkcwhMjyMAhkZromK
RpXoZUNBAekNOeq1ixfJV1ETWlZNjxQVrc/JRVmlRcW4x92lW4tzc/Hehety
YbcuLaNso2o5dKCPHxBh6rrMifM72Nj6eC4vzi8ozCnYvH5DcWER4BCdj5e3
qcliAz19a0srDzdVL1Fck6ggLoYrBMEHEXIGPCfhpjC/pKy0PMAvCI68pIeJ
TTL1oV4s4c4YII0syCvMzy3gs0uXWMjdQJwn+AL8VsiMCnTKSrcR9SCOeHGk
ZD7yQaSHGBGdFIycmZNwWk6iWhGqvTA6El/hamK0BEBwNNQzMdJfjNFeqG2A
CTX2YxxDPkMoZNT9WDOqkjEI4kjLNm3durGULbZz2/aDe/e1NDSSmiKxuqrD
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
4vWFRcnxcWWbt9RXV10evXB25MTY2bPdHa2b1xdt3lSyb1f5N19/8flnn/z5
u2//+69//vabP/Kp2Jg1X37+BdFwgbbOpAkTZUUTeaYsyiUFlRv3aAoFISgy
XqIGLpH+gQ4mizxRLnCBiDsFKJU+VSGGh4Qmow7uuE36Vr2u3p7xI+UP2ax4
V04iv9cEJmC5uXhiiBFkyBDdyaQo/pP4SGJDQ/UYqZEpW231DBsxBS8KQdyC
shIVT8KXKivdpp7KSKGK55q3bCo90n4Uz4ljpP8pFuht+hx/yHbNmrj09Mz9
+w/u3r03NzefVISsA5lQGJKcmJtbkI6KGElTf/Ob373++pskVIwfRhGJMQOb
EUu8AxbfncFP/o/bsbGwpH43W2RiqKtnrG+wxGSxiaHRcjf36IhV20u3DPb2
jBw7NtTbm7k2ae6MGbrz5+RmprXUV9dUHMhKTao7fPDW9Ut/+eNXn3703ofv
Pf3um69ePH38w/f/kxAfS0w8XFFJJsZ1/uQn/8Lo4nqASGig//GlEPzVL35N
byAolCJ1ATTpdrQjP7IkmECAymTilJf0IQ0crGQ4glseK4MXH5QfqeAkUurK
ChlJdUSYhEhJSPCl1IYQhKP6h/JUDeRJ7U/xiDwRKSUGO7G5s1XPYsjPznAq
+hOIDC38RnpqBmGdsbQuKyc1JQ3vASaEBkH8Id5M9OXvvyIrax3qo+jDGZJq
oikiGjqiSOcAslPRIEZ8VNWM02e/9eYEPMOUSdNlSRjDmK/ANRCYkuLi3Z1d
jPT058+es9jImCQzMjS0IDu7o6mp5tChbZs2NdXU3L1x9ctPPrx389rI0MDh
A3vDgwJCV/heOn/68oUzo2dOPrxz7fs/f/0/331z5/rlzz95/6vPP/r84w/O
nRo2X2I6ZTK6Q2WqQUWFkpy8lpGm+ulOG3vyFvoTvUOQFJRkm6Elv2kACzhK
hix5iGwBJKtoYEQf4o1xjHwdXJncHGEMSHqP9PCofEeAyhyFJKWyCk6mBGWE
qL2rDXp0d10etCLUx8vf3zeQ7Qr/YPB5L/cLDV4ZHrqKnV6evr7e+PMQqV+4
EmAxANAg7NYmp2ZnrivftoPymStnKOIBNm/GoZaRZuBC5bcUpk+fqadnACl4
kXnCjngHXDyh/AQfyORJYVwoAoS+ype+Pfn118YRd+TRG74sF0Dqwt/FKXl7
eIIvNnr10bb2I61td2/eev7o0e2rV6+PjdUfPtxYXU14Li/d1FJf09ZYlxwX
k5GSiAA3FuXdvnbp3Mhxtt9+9dkfv/wU++H7v3z9xad/+PyTkeOD+3fvIFBq
TZv61htvkt4TyAryCmVCDEzby8rBJLdKcaq4vpqqWsn26R9JR2UeTJ53kIRE
ZtU4WJ5tQWXyLhKWKQiIy7SzPGuGsyWeyu+F8imJqlwAowUvRCfjiLgkoGBh
IRFxaxLhSANwK1T3PUP8fFZErYpZGRYZ4BcEvuUePhHhUXwECYjJOsad5bvy
cymqCjaUbCQYoQtGCxeZlpaB3Naty2XL0CXe/eIXv0JTeKS4uATxnACF189/
/ksRKT5KvCjgKO3Ro2qP+jYl/orKhRErTqyvp3+w/xjyLykorK6o9F3uVVdV
/ec/fnv7+o0Ht25dHR1tra/fv3NnSV6e6udcwoJDAnyjV4YW5mR1tjWfGR5C
gC/efQd2n3343p9g9v6zD58/+cNnH925cbWjpbG9uSElIdZ1maO9tZWvt09J
UTGhQX6Qhz708fKlb2XGm69Jz5OiHK6oYhjLLDd9jsOUqRh5LBpxKSCQFQ34
IklOKCFSZrChjzeDjkxTyKO+0Ed3/C2+O0MXdw0CeexablfJ7/0isZCgcE93
bwgiRqhFR66hvWZ1PPiwyIjVKHHVymj+hDyyzcXwXTgb7BAgiuCP8i0YqxR9
+H+yRJIN1EfhIJWC/EaN/KjCG2+8BTUcLOmK/GgGcGEns20Y+6XMx8hO8djy
62E4kI62I8cGhj548X7nkaPklkD0dHXTmTuvoab2wJ69e8vL87Oy2F67eHFV
SIiZkZG5idHs6VMcrC3qDh+6fmn0xuWLSO/pO/cAhwyfP37w6N6tzz968cGz
x/7envoL5m8v3TRlwjh/b69AP9/0lLUpCYkkhy5OzlSIFBr0Hl+cSkoqPi6J
b93d2YNeEAj9gNxkhTyY6CiY4vcARF/Bi+0Kf3oyEmqgpzzMTM+SioM2p6Ib
KUzk7hL44MjH5XabREwcoKwJZ4uOgIX60BcoaYMJQ4Z4USSJEmkgSVAGB4bF
xiQQ5hj5uFAGFRfM+flbGLGPihX3ggxJrblskFH34TxJYPCW6t9XV/10sPzM
FxBRGWQBxB4UCjJ2AkviIB71l7/8tWSkmExrIPk9u/bW1dRXVVZv3VJaeagi
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
A/3g1MQ0raI8tRgQ/z/OuTMA
                   "], "Byte", ColorSpace -> "RGB", 
                   ImageResolution -> {72, 72}, ImageSize -> 200, 
                   Interleaving -> True, Magnification -> Automatic, 
                   MetaInformation -> <|
                    "Source" -> 
                    "http://www.sfmoma.org/explore/collection/artwork/111739",
                     "URL" -> 
                    "http://www.wolframcdn.com/waimage/hset073/c55/\
c55bb96814261bd28475320d0043cfd3_v001s.jpg"|>]}]|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{222., {159.4335936884163, 163.5664063115837}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   "MultipleChoice", <|"Prompt" -> Column[{"Identify the photographer", 
        Image[CompressedData["
1:eJyMvQdcVFm6tzv3hO/MnDN5ppNtThhBySKI5CAZyZJFQCQjWTIYEcWcQHIG
JYMoYkbMObTaats5Tvf09Myc0/09Va+9p8aZc+/t39v7t2rXrs2u9az/G9Ze
u5wSFu+x6l9+8pOfJP+UjUdomkVSUmiG56954RWXHB0ZF7HSIS4lIjIiyTjs
X9m5lv9387+q3d5U13OkdbDnaH9XR19nO1tpDHQfERvq6xoe7D15rO/EQM/x
/u5Tg/2njw1gZ4YGz50YunDyxOjI8MVTJy+dOYVdPnv6yrkzV8+fvXbh3I2L
F7CbYxduXRoVu3354p0rY3evXsLuXVHZ3ctjr9idSxeVt26PjWKy5/7Vy9iD
a1ceXr8qRlu984pi965cxu5fVtmdixfvjo3dHh29ef787fPn746Osr1x5syN
c+eunTlz5dSpSydPXjxxQjFeYpdHRngLoyF7xkZUduHE8bPHBk8P9J/q72N7
ZnCABttzQ8fYT3ukrxejcbzr6HBP10hfD3ayt/tEd6fY6WP9Z4YGzp04dn54
CDt7fJA9pwb7Tg50YSOD3RiN4f7Oob6jx3qP0NX0vHDp7Wrv6WwT625tOtpU
315f09FQ29XS2H+k7WhrY1d7c3dHCwa4Y72dygd5KShlJ1v2D/f1nODCertp
jAz0wfH88HGBKDZ2ekST47ULbM9eHz2H3bh4/m9AgTt6/h/txoVzmu3r58/S
EI4YWDXRs+f22Eu7dZFzjt4cvXDrgsoAhwkvwN08e5bt1ZGRseFheF0YGjo3
OHh2YEAxXp4/dgzjLYwGe1THHBsUdid7e050dx3vAkfXcE83L4UaJm+JHTva
AUSQsR3qPDJ4pB1T7ezpPNHbdbK/B2oqcP10Yxc7j3W3KzbY1TbQ2dp7tKXn
SDOygghoAHSkrbGjtYGtClZL45HGutbaqubqypaaw2111TDiyCMtDVjv0TbQ
Y5BiPy8xESYcRZ7He7qGujuPdR3FaJzs70WPZ48fQ49iClBQqoU5Inb5LAo9
deXc6avngXvmyplT2GVw/2iyB7t69rSmAVGwAl1UKSZj4MYFlV0/D+tz186d
vXr2zNXTpzHAYTRQ00tlIajjxxU6UDvT3y/2CkppyFuwE+m9QlB48VKxY0fh
1QEssYGOtv721r62FkzV6GhFL4OdHUPd9Bu9d4T2wNH2viPNWG9HE9bd1tDV
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
ehsbOyRJIjpu3HgnF2c0CF4dHZ35c+fhS+ur6uqqqmsra2oPV9Gor65prK1r
qiMpBSIJKlGyUYAqMzCKvZw9UxMUz6kC19WN0QAlezSX4iu6U0xjcf6xl889
qVcbKmucZKGa3BfQXGB/c/TC7bGLdy9fUjG6eRm7f+OSeE5NGUr9SHSjgYRp
37wy9s7dW+dGTnS1tzTXVResy4wIDs5ITibexUfHxEREJscmluQVlW/Ztj6/
eG18cmzUmrXJqempGdGRq8NCwvGcdDi6c3Nxl/CHgQZH6r3cB0+IoMhPiHRk
oRIcYYeyCJEAooGRlOJ+wUQo5JiI8FUhQaEciS8FrkiVNnDByp/jgypVztWm
WvzZz342depUBBgZsSptberqqGgIqiAersXA11BTC77meoIjCSqVe5MaYr0y
P0PRJ0btIBPar6jveHePmHDUZCer1JQVp5rPyChRTyb/5Y6P4FMIymrDvyc4
piKlxsdWZraVm4OP79xUyn+KlKf37z57cO+duzePtDRsKMwryc/ZVFyQEr8m
JiIiJz0dgsmx8elJqRsKSnZt3VW+uTwvIy8uOr4wpyBtbXrcmvjQ4LDIiKg1
q2MDA4KAhfTABEQKATJMwMmcGDvZg5TYQ2JJnY5vxGcS8nhLyMKUnTCCCAfD
UbYkM+ynzak4DKbsnD51xpuvv8UWjpwTsXu6e2D+vn7ey73MzZYo+IQgAlTh
a2gUgj9avRIW22rrsPa6eiAKQfCJ3FSxr6v7RE/vcG8fRgN7RWuKaS7hlrRT
7kTIsl6FnYDTJCimEKQEuHN1VJynksnAkZCnvm948713Hrx77847t27AEW+w
s2xL6YZitnt3bCvOzaVYwNISEzOS16YnpeSkZyPAktySdanr0hPTM1IyM1LS
M9IyC/IKUWJwYAjSI2DRk2gKQJTeGN07W2sOjhEPCQU0CCPgIjTxnBxP/wtx
KJPPYMAlt+GDfITxEBO9JjE+CaWvjiIFXskYQHTkruPHTWDLIOEwRoKDnb2j
vYOJMdGT0mPuhLfHCzuVF62swYtqalCsubZe8z5Fa00tBsSO+gYcqRB8mXwe
7UR6sDvZ1096gKkaA32a+OSRNEx52FD85ysENdlpElQMGaru3115qUGlHlSS
mWcP7qpnYy7hmesrDlbu2dV4uOLgnp17ysvKSzdt3ViC/0xPSipct25zcTEF
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
K6Pnbl29NNB9tKbiwK5tpehuTeRKLzfnuOhVOVRsCfHJ8XFpyUnpKclIL2Nt
anJ8AgHO3dklIjQMD6mrrYMSo8Ijo1dG0fP0HjKhBxACwmEkkwoqfg9xSfmA
uwtaEXzvzv1tW7eTctCmuxjzOECyGoiADEUgtJ6uXio4PkvSkpmeRWZCBisL
dznnuqwcdtKG79YtZdSVfJDLILziEoEFI7ZobfGiJeZmlrCjvUBbT3eBAXBh
Jw0UClygQ5ArZyxJ+ioCxItW7FP5z/279+zbtbvywEHUV1dJ+KsDIu4RQ1bA
0lx/KAIk/PV3dmIcQG2FYEn8YJeZkuLn6WlpYhzq59NQeUjm1hDd1fNn5TEQ
4qDkOTI7igBVdwxPDZ88ptqCDwPfuZETQ33dVQf37d6+NScjFXxYVmoyUW+N
Sn2rE9bEgA//qcaXkpqUHBu9OikuHrcZHbEq0M/fSE//rdde19fRy1ybQX+u
WR1LV2P0ISGJZA8QUnTDkWyfVESKCDiGhYTjKglYUAYcjpQtXYcAOR6aaG2g
bzAnO5cT4l27O3uAC6DQ4LAtm0qXe3hJViM3lciI8Kgcib9FkvhnC3Nrot6b
r7+NDJc5uJgtXorPHD9uErD0dUmcTADKW1AWrDT467IairFHoyi3sDiviO36
gpKtmzaTmBEysC0lG7Zt2rJz67YdpWWIa+fWraTicOxoaW5vbmptpOKoZ8vL
7iMd/d1dbJvqag/u3cNOPNieHeUrQ4Kd7ex058xChju3bFqzMqy1tlqWg5Jz
yuomKSJk6e+tSxeBeH5k5OKZM7euXLlw6hSZLeOEHJLBsC4tbf/OnYwQ0pKc
9HQsOTY2PDCQuiAtNSU7KyN1bXJM9Oo1q2OSE5OSEhLjY+OiI6PoOqm22DJc
6caCvOLKQ9XBgWGMdsINXQcd3BEcgUgUgxoOEz8pd+7YL7qjrwDN4MfISfCu
kGUMEOBwkhDnr5DznDwxQpWHMHGYCBNkfAq9yz1fmRHF0+7ZtRfKiBGJzZ2l
M+6NiW+/OUl/ofEiQ7P5cxZqz9UVmzVjntb0ufNmL+AYGuQ2GHmp1PtCcNe2
neWl2zeXbMJ2lG3bXrp1y4aNoCxdT+5dsrGwmC19CME927fvLS8XcGwbayk9
qml0dbQP9vYM9fclxcUSgEgkYiJXUWeFBq7AoNZ4uILUZVNBXkLUqj1lpZKI
3hwbxW2KDHGq+FJSGpLSq6OjZ06cQN1UAakJCYDDKMYZRWyp7CjP0xIT0Xh2
aiouNDY6KmZ1VHJSQlZm+rqs7Nx1ORlp6bExa5wcl82ZpYr7eBsoiHBomBib
ZWfmlhRtZHj//rckhBNQE4B4C2mADy9KTcenBDqJ38//8xfEHSmuGQPEuGqS
ggMVyDkwICg6cjXpCm6WzgTc/r0HEuISkR7eEtFRthMoM9IygU5bXDRwGSRs
szKyp0+ZNUdLe+a0OQAyNjC1WGKzZLElBr7ZM+dPmThj6qSZMF0wX5/DAKq3
0BAx4kghyJfCh5CC7t2xB3wocUORaoICI+gf3L33wK49+3bs2rN9x+5t2/bt
2HFozx4yGcQFncoD+w8fPIDVV1dB8PhAf19XZ/66bG8PdxwaUYl62UhPl4Or
9u3JS0/tbG68f/0qEXBjfu72jet721txqm11NSSo2L7tZQd2bCfn4WDquM3F
67HMlNT8rHVFOXlpicm7yrYzkIL9AuKjY7LWphVk57A/OzWdfBJ3Abj83Lyi
gsLM9IyVYeF2Nrbz5swVBeHWkAzsZNIDHDgoKwvbrIycLZvKgEhwwWsZ6i+i
SxEIvYou6B+ZMUOSSKbiYCUq4wDQRK2KpqYjusk9PtLL0s1bGYzQEa+LFz3S
fpQchr+OO+V4QEMKMXIq9uCiiYlq9emwtVpqh/TgBb6lZtZs4QUsRIf0gIjp
zNODIPtpUHrgYHG86iJR5U4heGjvwd3bd6HEXdvLy7eWYXt37qo6cIhMhqK+
5lAlBHeUwnQ3Kc2P+A7t370LwW7bsnnPjp2gHD17rq2pkcwhMjyMAhkZromK
RpXoZUNBAekNOeq1ixfJV1ETWlZNjxQVrc/JRVmlRcW4x92lW4tzc/Hehety
YbcuLaNso2o5dKCPHxBh6rrMifM72Nj6eC4vzi8ozCnYvH5DcWER4BCdj5e3
qcliAz19a0srDzdVL1Fck6ggLoYrBMEHEXIGPCfhpjC/pKy0PMAvCI68pIeJ
TTL1oV4s4c4YII0syCvMzy3gs0uXWMjdQJwn+AL8VsiMCnTKSrcR9SCOeHGk
ZD7yQaSHGBGdFIycmZNwWk6iWhGqvTA6El/hamK0BEBwNNQzMdJfjNFeqG2A
CTX2YxxDPkMoZNT9WDOqkjEI4kjLNm3durGULbZz2/aDe/e1NDSSmiKxuqrD
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
4vWFRcnxcWWbt9RXV10evXB25MTY2bPdHa2b1xdt3lSyb1f5N19/8flnn/z5
u2//+69//vabP/Kp2Jg1X37+BdFwgbbOpAkTZUUTeaYsyiUFlRv3aAoFISgy
XqIGLpH+gQ4mizxRLnCBiDsFKJU+VSGGh4Qmow7uuE36Vr2u3p7xI+UP2ax4
V04iv9cEJmC5uXhiiBFkyBDdyaQo/pP4SGJDQ/UYqZEpW231DBsxBS8KQdyC
shIVT8KXKivdpp7KSKGK55q3bCo90n4Uz4ljpP8pFuht+hx/yHbNmrj09Mz9
+w/u3r03NzefVISsA5lQGJKcmJtbkI6KGElTf/Ob373++pskVIwfRhGJMQOb
EUu8AxbfncFP/o/bsbGwpH43W2RiqKtnrG+wxGSxiaHRcjf36IhV20u3DPb2
jBw7NtTbm7k2ae6MGbrz5+RmprXUV9dUHMhKTao7fPDW9Ut/+eNXn3703ofv
Pf3um69ePH38w/f/kxAfS0w8XFFJJsZ1/uQn/8Lo4nqASGig//GlEPzVL35N
byAolCJ1ATTpdrQjP7IkmECAymTilJf0IQ0crGQ4glseK4MXH5QfqeAkUurK
ChlJdUSYhEhJSPCl1IYQhKP6h/JUDeRJ7U/xiDwRKSUGO7G5s1XPYsjPznAq
+hOIDC38RnpqBmGdsbQuKyc1JQ3vASaEBkH8Id5M9OXvvyIrax3qo+jDGZJq
oikiGjqiSOcAslPRIEZ8VNWM02e/9eYEPMOUSdNlSRjDmK/ANRCYkuLi3Z1d
jPT058+es9jImCQzMjS0IDu7o6mp5tChbZs2NdXU3L1x9ctPPrx389rI0MDh
A3vDgwJCV/heOn/68oUzo2dOPrxz7fs/f/0/331z5/rlzz95/6vPP/r84w/O
nRo2X2I6ZTK6Q2WqQUWFkpy8lpGm+ulOG3vyFvoTvUOQFJRkm6Elv2kACzhK
hix5iGwBJKtoYEQf4o1xjHwdXJncHGEMSHqP9PCofEeAyhyFJKWyCk6mBGWE
qL2rDXp0d10etCLUx8vf3zeQ7Qr/YPB5L/cLDV4ZHrqKnV6evr7e+PMQqV+4
EmAxANAg7NYmp2ZnrivftoPymStnKOIBNm/GoZaRZuBC5bcUpk+fqadnACl4
kXnCjngHXDyh/AQfyORJYVwoAoS+ype+Pfn118YRd+TRG74sF0Dqwt/FKXl7
eIIvNnr10bb2I61td2/eev7o0e2rV6+PjdUfPtxYXU14Li/d1FJf09ZYlxwX
k5GSiAA3FuXdvnbp3Mhxtt9+9dkfv/wU++H7v3z9xad/+PyTkeOD+3fvIFBq
TZv61htvkt4TyAryCmVCDEzby8rBJLdKcaq4vpqqWsn26R9JR2UeTJ53kIRE
ZtU4WJ5tQWXyLhKWKQiIy7SzPGuGsyWeyu+F8imJqlwAowUvRCfjiLgkoGBh
IRFxaxLhSANwK1T3PUP8fFZErYpZGRYZ4BcEvuUePhHhUXwECYjJOsad5bvy
cymqCjaUbCQYoQtGCxeZlpaB3Naty2XL0CXe/eIXv0JTeKS4uATxnACF189/
/ksRKT5KvCjgKO3Ro2qP+jYl/orKhRErTqyvp3+w/xjyLykorK6o9F3uVVdV
/ec/fnv7+o0Ht25dHR1tra/fv3NnSV6e6udcwoJDAnyjV4YW5mR1tjWfGR5C
gC/efQd2n3343p9g9v6zD58/+cNnH925cbWjpbG9uSElIdZ1maO9tZWvt09J
UTGhQX6Qhz708fKlb2XGm69Jz5OiHK6oYhjLLDd9jsOUqRh5LBpxKSCQFQ34
IklOKCFSZrChjzeDjkxTyKO+0Ed3/C2+O0MXdw0CeexablfJ7/0isZCgcE93
bwgiRqhFR66hvWZ1PPiwyIjVKHHVymj+hDyyzcXwXTgb7BAgiuCP8i0YqxR9
+H+yRJIN1EfhIJWC/EaN/KjCG2+8BTUcLOmK/GgGcGEns20Y+6XMx8hO8djy
62E4kI62I8cGhj548X7nkaPklkD0dHXTmTuvoab2wJ69e8vL87Oy2F67eHFV
SIiZkZG5idHs6VMcrC3qDh+6fmn0xuWLSO/pO/cAhwyfP37w6N6tzz968cGz
x/7envoL5m8v3TRlwjh/b69AP9/0lLUpCYkkhy5OzlSIFBr0Hl+cSkoqPi6J
b93d2YNeEAj9gNxkhTyY6CiY4vcARF/Bi+0Kf3oyEmqgpzzMTM+SioM2p6Ib
KUzk7hL44MjH5XabREwcoKwJZ4uOgIX60BcoaYMJQ4Z4USSJEmkgSVAGB4bF
xiQQ5hj5uFAGFRfM+flbGLGPihX3ggxJrblskFH34TxJYPCW6t9XV/10sPzM
FxBRGWQBxB4UCjJ2AkviIB71l7/8tWSkmExrIPk9u/bW1dRXVVZv3VJaeagi
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
A/3g1MQ0raI8tRgQ/z/OuTMA
         "], "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
         ImageSize -> 200, Interleaving -> True, Magnification -> Automatic, 
         MetaInformation -> <|
          "Source" -> 
           "http://www.sfmoma.org/explore/collection/artwork/111739", "URL" -> 
           "http://www.wolframcdn.com/waimage/hset073/c55/\
c55bb96814261bd28475320d0043cfd3_v001s.jpg"|>]}]|>], 
   AssessmentFunction[{
    Entity["Person", "PirkleJones::8p665"] -> False, 
     Entity["Person", "DorotheaLange::9dyg4"] -> True, 
     Entity["Person", "RobertCapa::2339j"] -> False, 
     Entity["Person", "AnselAdams::94p85"] -> False}]]]], "Output",
 CellChangeTimes->{{3.852637534031336*^9, 3.8526375981152277`*^9}, {
   3.853165206354759*^9, 3.853165211705227*^9}, {3.853234012955591*^9, 
   3.853234019293529*^9}, 3.8661983508074903`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"f40fd8c2-8956-461f-bf68-0fc208d4cf0d"]
}, {2}]],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"66345c7b-c3a3-400a-8df9-b18a711501a9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuestionSelector", "Subsection",
 CellChangeTimes->{{3.8661952362281103`*^9, 3.8661952386200557`*^9}, 
   3.866199155435525*^9},ExpressionUUID->"24f57a37-c155-4e0f-97c0-\
7cb3cd11200a"],

Cell["\<\
Randomly selects a question (or several questions) from a pool of questions\
\>", "Item",
 CellChangeTimes->{{3.8661960050434895`*^9, 3.8661960074680324`*^9}, {
  3.8661960587064705`*^9, 3.8661961135248365`*^9}, {3.866198511855632*^9, 
  3.866198513737604*^9}},ExpressionUUID->"442fb01f-0deb-45ea-a78e-\
18a73accf2f7"],

Cell["Create a pool of questions:", "CodeText",
 CellChangeTimes->{{3.8661992038997073`*^9, 
  3.8661992081703854`*^9}},ExpressionUUID->"9762be66-6f2c-40d0-9191-\
16bb12f63eb0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questions", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"QuestionObject", "[", 
     RowBox[{
      RowBox[{"\"\<True or False: \>\"", "<>", 
       RowBox[{"CommonName", "[", "#", "]"}], "<>", "\"\< has a moon.\>\""}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"AssessmentFunction", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         TemplateBox[{"\"number of moons\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"Planet\"", ",", "\"MoonCount\""}], "]"}], 
           "\"EntityProperty[\\\"Planet\\\", \\\"MoonCount\\\"]\""},
          "EntityProperty"], "]"}], ">", 
        TemplateBox[{"0", 
          RowBox[{
            FrameBox[
             StyleBox[
             "\"moons\"", ShowStringCharacters -> False, StripOnInput -> 
              False], FrameMargins -> 1, FrameStyle -> GrayLevel[0.85], 
             BaselinePosition -> Baseline, RoundingRadius -> 3, StripOnInput -> 
             False]}], "moons", 
          RowBox[{"IndependentUnit", "[", "\"moons\"", "]"}]},
         "Quantity"]}], "]"}]}], "]"}], "&"}], "/@", 
   RowBox[{"EntityList", "[", "\"\<Planet\>\"", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8661960050434895`*^9, 3.8661960074680324`*^9}, {
  3.8661960587064705`*^9, 3.8661961135248365`*^9}, {3.866198511855632*^9, 
  3.866198518895811*^9}, {3.866198975622063*^9, 3.8661990379371147`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"e566a216-f460-4b18-be9a-83e630e0db71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
     QuestionFramework`Private`result$$ = "", 
     QuestionFramework`Private`buttonenabled$$ = True, 
     QuestionFramework`Private`submissionCount$$ = 0, 
     QuestionFramework`Private`submittedvalue$$ = ""}, 
     DynamicBox[ToBoxes[
       Framed[
        Grid[{{"True or False: Mercury has a moon.", SpanFromLeft}, {
           RadioButtonBar[
            Dynamic[QuestionFramework`Private`input$$], {
            True -> "True", False -> "False"}, Appearance -> "Vertical"], 
           QuestionFramework`Private`generalquestionTest[
           QuestionFramework`Private`result$$, 
            QuestionFramework`Private`input$$, 
            QuestionFramework`Private`submittedvalue$$, 
            AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
           If[
            Or[
            AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
             CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "FormNotebook", "SubmissionOptions", 
                "GroupSubmissionFlag"}] === True], "", 
            QuestionFramework`Private`submitButton[
            QuestionFramework`Private`result$$ = 
              QuestionFramework`Private`postProcessAssessment[
                AssessmentFunction[{False -> <|"Score" -> 1|>}][
                QuestionFramework`Private`input$$, "SubmissionCount" -> 
                 QuestionFramework`Private`submissionCount$$], <|
                "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
                 1, "Prompt" -> "True or False: Mercury has a moon."|>]; 
             QuestionFramework`Private`submittedvalue$$ = 
              QuestionFramework`Private`input$$; 
             QuestionFramework`Private`submissionCount$$ = 
              QuestionFramework`Private`getSubmissionCount[
               QuestionFramework`Private`result$$]; 
             QuestionFramework`Private`buttonenabled$$ = If[
                QuestionFramework`Private`reachedMaxSubmissionsQ[
                QuestionFramework`Private`result$$, 
                 QuestionFramework`Private`submissionCount$$], False, True, 
                True]]], 
           If[
           Head[QuestionFramework`Private`result$$] === 
            AssessmentResultObject, 
            Row[{
              If[Head[
                 QuestionFramework`Private`result$$["Explanation"]] === 
               String, 
               QuestionFramework`Private`result$$["Explanation"], ""]}, 
             Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
         Spacings -> {1, 1}], FrameStyle -> 
        RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
        RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
        If[
         MatchQ[
          CurrentValue[
           EvaluationNotebook[], TaggingRules], 
          KeyValuePattern["FormNotebook" -> Blank[List]]], 
         ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
        "Panel"], StandardForm],
      ImageSizeCache->{161., {45.933593688416295`, 50.066406311583705`}},
      TrackedSymbols:>{
       QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
        QuestionFramework`Private`submittedvalue$$}],
     DynamicModuleValues:>{}],
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Mercury has a moon."], 
     AssessmentFunction[{False -> <|"Score" -> 1|>}]]], ",", 
   InterpretationBox[
    DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
     QuestionFramework`Private`result$$ = "", 
     QuestionFramework`Private`buttonenabled$$ = True, 
     QuestionFramework`Private`submissionCount$$ = 0, 
     QuestionFramework`Private`submittedvalue$$ = ""}, 
     DynamicBox[ToBoxes[
       Framed[
        Grid[{{"True or False: Venus has a moon.", SpanFromLeft}, {
           RadioButtonBar[
            Dynamic[QuestionFramework`Private`input$$], {
            True -> "True", False -> "False"}, Appearance -> "Vertical"], 
           QuestionFramework`Private`generalquestionTest[
           QuestionFramework`Private`result$$, 
            QuestionFramework`Private`input$$, 
            QuestionFramework`Private`submittedvalue$$, 
            AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
           If[
            Or[
            AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
             CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "FormNotebook", "SubmissionOptions", 
                "GroupSubmissionFlag"}] === True], "", 
            QuestionFramework`Private`submitButton[
            QuestionFramework`Private`result$$ = 
              QuestionFramework`Private`postProcessAssessment[
                AssessmentFunction[{False -> <|"Score" -> 1|>}][
                QuestionFramework`Private`input$$, "SubmissionCount" -> 
                 QuestionFramework`Private`submissionCount$$], <|
                "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
                 1, "Prompt" -> "True or False: Venus has a moon."|>]; 
             QuestionFramework`Private`submittedvalue$$ = 
              QuestionFramework`Private`input$$; 
             QuestionFramework`Private`submissionCount$$ = 
              QuestionFramework`Private`getSubmissionCount[
               QuestionFramework`Private`result$$]; 
             QuestionFramework`Private`buttonenabled$$ = If[
                QuestionFramework`Private`reachedMaxSubmissionsQ[
                QuestionFramework`Private`result$$, 
                 QuestionFramework`Private`submissionCount$$], False, True, 
                True]]], 
           If[
           Head[QuestionFramework`Private`result$$] === 
            AssessmentResultObject, 
            Row[{
              If[Head[
                 QuestionFramework`Private`result$$["Explanation"]] === 
               String, 
               QuestionFramework`Private`result$$["Explanation"], ""]}, 
             Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
         Spacings -> {1, 1}], FrameStyle -> 
        RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
        RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
        If[
         MatchQ[
          CurrentValue[
           EvaluationNotebook[], TaggingRules], 
          KeyValuePattern["FormNotebook" -> Blank[List]]], 
         ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
        "Panel"], StandardForm],
      ImageSizeCache->{153., {45.933593688416295`, 50.066406311583705`}},
      TrackedSymbols:>{
       QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
        QuestionFramework`Private`submittedvalue$$}],
     DynamicModuleValues:>{}],
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Venus has a moon."], 
     AssessmentFunction[{False -> <|"Score" -> 1|>}]]], ",", 
   InterpretationBox[
    DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
     QuestionFramework`Private`result$$ = "", 
     QuestionFramework`Private`buttonenabled$$ = True, 
     QuestionFramework`Private`submissionCount$$ = 0, 
     QuestionFramework`Private`submittedvalue$$ = ""}, 
     DynamicBox[ToBoxes[
       Framed[
        Grid[{{"True or False: Earth has a moon.", SpanFromLeft}, {
           RadioButtonBar[
            Dynamic[QuestionFramework`Private`input$$], {
            True -> "True", False -> "False"}, Appearance -> "Vertical"], 
           QuestionFramework`Private`generalquestionTest[
           QuestionFramework`Private`result$$, 
            QuestionFramework`Private`input$$, 
            QuestionFramework`Private`submittedvalue$$, 
            AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
           If[
            Or[
            AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
             CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "FormNotebook", "SubmissionOptions", 
                "GroupSubmissionFlag"}] === True], "", 
            QuestionFramework`Private`submitButton[
            QuestionFramework`Private`result$$ = 
              QuestionFramework`Private`postProcessAssessment[
                AssessmentFunction[{True -> <|"Score" -> 1|>}][
                QuestionFramework`Private`input$$, "SubmissionCount" -> 
                 QuestionFramework`Private`submissionCount$$], <|
                "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
                 1, "Prompt" -> "True or False: Earth has a moon."|>]; 
             QuestionFramework`Private`submittedvalue$$ = 
              QuestionFramework`Private`input$$; 
             QuestionFramework`Private`submissionCount$$ = 
              QuestionFramework`Private`getSubmissionCount[
               QuestionFramework`Private`result$$]; 
             QuestionFramework`Private`buttonenabled$$ = If[
                QuestionFramework`Private`reachedMaxSubmissionsQ[
                QuestionFramework`Private`result$$, 
                 QuestionFramework`Private`submissionCount$$], False, True, 
                True]]], 
           If[
           Head[QuestionFramework`Private`result$$] === 
            AssessmentResultObject, 
            Row[{
              If[Head[
                 QuestionFramework`Private`result$$["Explanation"]] === 
               String, 
               QuestionFramework`Private`result$$["Explanation"], ""]}, 
             Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
         Spacings -> {1, 1}], FrameStyle -> 
        RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
        RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
        If[
         MatchQ[
          CurrentValue[
           EvaluationNotebook[], TaggingRules], 
          KeyValuePattern["FormNotebook" -> Blank[List]]], 
         ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
        "Panel"], StandardForm],
      ImageSizeCache->{149., {45.933593688416295`, 50.066406311583705`}},
      TrackedSymbols:>{
       QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
        QuestionFramework`Private`submittedvalue$$}],
     DynamicModuleValues:>{}],
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Earth has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]]], ",", 
   InterpretationBox[
    DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
     QuestionFramework`Private`result$$ = "", 
     QuestionFramework`Private`buttonenabled$$ = True, 
     QuestionFramework`Private`submissionCount$$ = 0, 
     QuestionFramework`Private`submittedvalue$$ = ""}, 
     DynamicBox[ToBoxes[
       Framed[
        Grid[{{"True or False: Mars has a moon.", SpanFromLeft}, {
           RadioButtonBar[
            Dynamic[QuestionFramework`Private`input$$], {
            True -> "True", False -> "False"}, Appearance -> "Vertical"], 
           QuestionFramework`Private`generalquestionTest[
           QuestionFramework`Private`result$$, 
            QuestionFramework`Private`input$$, 
            QuestionFramework`Private`submittedvalue$$, 
            AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
           If[
            Or[
            AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
             CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "FormNotebook", "SubmissionOptions", 
                "GroupSubmissionFlag"}] === True], "", 
            QuestionFramework`Private`submitButton[
            QuestionFramework`Private`result$$ = 
              QuestionFramework`Private`postProcessAssessment[
                AssessmentFunction[{True -> <|"Score" -> 1|>}][
                QuestionFramework`Private`input$$, "SubmissionCount" -> 
                 QuestionFramework`Private`submissionCount$$], <|
                "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
                 1, "Prompt" -> "True or False: Mars has a moon."|>]; 
             QuestionFramework`Private`submittedvalue$$ = 
              QuestionFramework`Private`input$$; 
             QuestionFramework`Private`submissionCount$$ = 
              QuestionFramework`Private`getSubmissionCount[
               QuestionFramework`Private`result$$]; 
             QuestionFramework`Private`buttonenabled$$ = If[
                QuestionFramework`Private`reachedMaxSubmissionsQ[
                QuestionFramework`Private`result$$, 
                 QuestionFramework`Private`submissionCount$$], False, True, 
                True]]], 
           If[
           Head[QuestionFramework`Private`result$$] === 
            AssessmentResultObject, 
            Row[{
              If[Head[
                 QuestionFramework`Private`result$$["Explanation"]] === 
               String, 
               QuestionFramework`Private`result$$["Explanation"], ""]}, 
             Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
         Spacings -> {1, 1}], FrameStyle -> 
        RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
        RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
        If[
         MatchQ[
          CurrentValue[
           EvaluationNotebook[], TaggingRules], 
          KeyValuePattern["FormNotebook" -> Blank[List]]], 
         ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
        "Panel"], StandardForm],
      ImageSizeCache->{148., {45.933593688416295`, 50.066406311583705`}},
      TrackedSymbols:>{
       QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
        QuestionFramework`Private`submittedvalue$$}],
     DynamicModuleValues:>{}],
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Mars has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]]], ",", 
   InterpretationBox[
    DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
     QuestionFramework`Private`result$$ = "", 
     QuestionFramework`Private`buttonenabled$$ = True, 
     QuestionFramework`Private`submissionCount$$ = 0, 
     QuestionFramework`Private`submittedvalue$$ = ""}, 
     DynamicBox[ToBoxes[
       Framed[
        Grid[{{"True or False: Jupiter has a moon.", SpanFromLeft}, {
           RadioButtonBar[
            Dynamic[QuestionFramework`Private`input$$], {
            True -> "True", False -> "False"}, Appearance -> "Vertical"], 
           QuestionFramework`Private`generalquestionTest[
           QuestionFramework`Private`result$$, 
            QuestionFramework`Private`input$$, 
            QuestionFramework`Private`submittedvalue$$, 
            AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
           If[
            Or[
            AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
             CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "FormNotebook", "SubmissionOptions", 
                "GroupSubmissionFlag"}] === True], "", 
            QuestionFramework`Private`submitButton[
            QuestionFramework`Private`result$$ = 
              QuestionFramework`Private`postProcessAssessment[
                AssessmentFunction[{True -> <|"Score" -> 1|>}][
                QuestionFramework`Private`input$$, "SubmissionCount" -> 
                 QuestionFramework`Private`submissionCount$$], <|
                "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
                 1, "Prompt" -> "True or False: Jupiter has a moon."|>]; 
             QuestionFramework`Private`submittedvalue$$ = 
              QuestionFramework`Private`input$$; 
             QuestionFramework`Private`submissionCount$$ = 
              QuestionFramework`Private`getSubmissionCount[
               QuestionFramework`Private`result$$]; 
             QuestionFramework`Private`buttonenabled$$ = If[
                QuestionFramework`Private`reachedMaxSubmissionsQ[
                QuestionFramework`Private`result$$, 
                 QuestionFramework`Private`submissionCount$$], False, True, 
                True]]], 
           If[
           Head[QuestionFramework`Private`result$$] === 
            AssessmentResultObject, 
            Row[{
              If[Head[
                 QuestionFramework`Private`result$$["Explanation"]] === 
               String, 
               QuestionFramework`Private`result$$["Explanation"], ""]}, 
             Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
         Spacings -> {1, 1}], FrameStyle -> 
        RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
        RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
        If[
         MatchQ[
          CurrentValue[
           EvaluationNotebook[], TaggingRules], 
          KeyValuePattern["FormNotebook" -> Blank[List]]], 
         ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
        "Panel"], StandardForm],
      ImageSizeCache->{155., {45.933593688416295`, 50.066406311583705`}},
      TrackedSymbols:>{
       QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
        QuestionFramework`Private`submittedvalue$$}],
     DynamicModuleValues:>{}],
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Jupiter has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]]], ",", 
   InterpretationBox[
    DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
     QuestionFramework`Private`result$$ = "", 
     QuestionFramework`Private`buttonenabled$$ = True, 
     QuestionFramework`Private`submissionCount$$ = 0, 
     QuestionFramework`Private`submittedvalue$$ = ""}, 
     DynamicBox[ToBoxes[
       Framed[
        Grid[{{"True or False: Saturn has a moon.", SpanFromLeft}, {
           RadioButtonBar[
            Dynamic[QuestionFramework`Private`input$$], {
            True -> "True", False -> "False"}, Appearance -> "Vertical"], 
           QuestionFramework`Private`generalquestionTest[
           QuestionFramework`Private`result$$, 
            QuestionFramework`Private`input$$, 
            QuestionFramework`Private`submittedvalue$$, 
            AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
           If[
            Or[
            AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
             CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "FormNotebook", "SubmissionOptions", 
                "GroupSubmissionFlag"}] === True], "", 
            QuestionFramework`Private`submitButton[
            QuestionFramework`Private`result$$ = 
              QuestionFramework`Private`postProcessAssessment[
                AssessmentFunction[{True -> <|"Score" -> 1|>}][
                QuestionFramework`Private`input$$, "SubmissionCount" -> 
                 QuestionFramework`Private`submissionCount$$], <|
                "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
                 1, "Prompt" -> "True or False: Saturn has a moon."|>]; 
             QuestionFramework`Private`submittedvalue$$ = 
              QuestionFramework`Private`input$$; 
             QuestionFramework`Private`submissionCount$$ = 
              QuestionFramework`Private`getSubmissionCount[
               QuestionFramework`Private`result$$]; 
             QuestionFramework`Private`buttonenabled$$ = If[
                QuestionFramework`Private`reachedMaxSubmissionsQ[
                QuestionFramework`Private`result$$, 
                 QuestionFramework`Private`submissionCount$$], False, True, 
                True]]], 
           If[
           Head[QuestionFramework`Private`result$$] === 
            AssessmentResultObject, 
            Row[{
              If[Head[
                 QuestionFramework`Private`result$$["Explanation"]] === 
               String, 
               QuestionFramework`Private`result$$["Explanation"], ""]}, 
             Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
         Spacings -> {1, 1}], FrameStyle -> 
        RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
        RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
        If[
         MatchQ[
          CurrentValue[
           EvaluationNotebook[], TaggingRules], 
          KeyValuePattern["FormNotebook" -> Blank[List]]], 
         ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
        "Panel"], StandardForm],
      ImageSizeCache->{154., {45.933593688416295`, 50.066406311583705`}},
      TrackedSymbols:>{
       QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
        QuestionFramework`Private`submittedvalue$$}],
     DynamicModuleValues:>{}],
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Saturn has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]]], ",", 
   InterpretationBox[
    DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
     QuestionFramework`Private`result$$ = "", 
     QuestionFramework`Private`buttonenabled$$ = True, 
     QuestionFramework`Private`submissionCount$$ = 0, 
     QuestionFramework`Private`submittedvalue$$ = ""}, 
     DynamicBox[ToBoxes[
       Framed[
        Grid[{{"True or False: Uranus has a moon.", SpanFromLeft}, {
           RadioButtonBar[
            Dynamic[QuestionFramework`Private`input$$], {
            True -> "True", False -> "False"}, Appearance -> "Vertical"], 
           QuestionFramework`Private`generalquestionTest[
           QuestionFramework`Private`result$$, 
            QuestionFramework`Private`input$$, 
            QuestionFramework`Private`submittedvalue$$, 
            AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
           If[
            Or[
            AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
             CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "FormNotebook", "SubmissionOptions", 
                "GroupSubmissionFlag"}] === True], "", 
            QuestionFramework`Private`submitButton[
            QuestionFramework`Private`result$$ = 
              QuestionFramework`Private`postProcessAssessment[
                AssessmentFunction[{True -> <|"Score" -> 1|>}][
                QuestionFramework`Private`input$$, "SubmissionCount" -> 
                 QuestionFramework`Private`submissionCount$$], <|
                "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
                 1, "Prompt" -> "True or False: Uranus has a moon."|>]; 
             QuestionFramework`Private`submittedvalue$$ = 
              QuestionFramework`Private`input$$; 
             QuestionFramework`Private`submissionCount$$ = 
              QuestionFramework`Private`getSubmissionCount[
               QuestionFramework`Private`result$$]; 
             QuestionFramework`Private`buttonenabled$$ = If[
                QuestionFramework`Private`reachedMaxSubmissionsQ[
                QuestionFramework`Private`result$$, 
                 QuestionFramework`Private`submissionCount$$], False, True, 
                True]]], 
           If[
           Head[QuestionFramework`Private`result$$] === 
            AssessmentResultObject, 
            Row[{
              If[Head[
                 QuestionFramework`Private`result$$["Explanation"]] === 
               String, 
               QuestionFramework`Private`result$$["Explanation"], ""]}, 
             Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
         Spacings -> {1, 1}], FrameStyle -> 
        RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
        RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
        If[
         MatchQ[
          CurrentValue[
           EvaluationNotebook[], TaggingRules], 
          KeyValuePattern["FormNotebook" -> Blank[List]]], 
         ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
        "Panel"], StandardForm],
      ImageSizeCache->{156., {45.933593688416295`, 50.066406311583705`}},
      TrackedSymbols:>{
       QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
        QuestionFramework`Private`submittedvalue$$}],
     DynamicModuleValues:>{}],
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Uranus has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]]], ",", 
   InterpretationBox[
    DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
     QuestionFramework`Private`result$$ = "", 
     QuestionFramework`Private`buttonenabled$$ = True, 
     QuestionFramework`Private`submissionCount$$ = 0, 
     QuestionFramework`Private`submittedvalue$$ = ""}, 
     DynamicBox[ToBoxes[
       Framed[
        Grid[{{"True or False: Neptune has a moon.", SpanFromLeft}, {
           RadioButtonBar[
            Dynamic[QuestionFramework`Private`input$$], {
            True -> "True", False -> "False"}, Appearance -> "Vertical"], 
           QuestionFramework`Private`generalquestionTest[
           QuestionFramework`Private`result$$, 
            QuestionFramework`Private`input$$, 
            QuestionFramework`Private`submittedvalue$$, 
            AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
           If[
            Or[
            AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
             CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "FormNotebook", "SubmissionOptions", 
                "GroupSubmissionFlag"}] === True], "", 
            QuestionFramework`Private`submitButton[
            QuestionFramework`Private`result$$ = 
              QuestionFramework`Private`postProcessAssessment[
                AssessmentFunction[{True -> <|"Score" -> 1|>}][
                QuestionFramework`Private`input$$, "SubmissionCount" -> 
                 QuestionFramework`Private`submissionCount$$], <|
                "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
                 1, "Prompt" -> "True or False: Neptune has a moon."|>]; 
             QuestionFramework`Private`submittedvalue$$ = 
              QuestionFramework`Private`input$$; 
             QuestionFramework`Private`submissionCount$$ = 
              QuestionFramework`Private`getSubmissionCount[
               QuestionFramework`Private`result$$]; 
             QuestionFramework`Private`buttonenabled$$ = If[
                QuestionFramework`Private`reachedMaxSubmissionsQ[
                QuestionFramework`Private`result$$, 
                 QuestionFramework`Private`submissionCount$$], False, True, 
                True]]], 
           If[
           Head[QuestionFramework`Private`result$$] === 
            AssessmentResultObject, 
            Row[{
              If[Head[
                 QuestionFramework`Private`result$$["Explanation"]] === 
               String, 
               QuestionFramework`Private`result$$["Explanation"], ""]}, 
             Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
         Spacings -> {1, 1}], FrameStyle -> 
        RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
        RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
        If[
         MatchQ[
          CurrentValue[
           EvaluationNotebook[], TaggingRules], 
          KeyValuePattern["FormNotebook" -> Blank[List]]], 
         ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
        "Panel"], StandardForm],
      ImageSizeCache->{163., {45.933593688416295`, 50.066406311583705`}},
      TrackedSymbols:>{
       QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
        QuestionFramework`Private`submittedvalue$$}],
     DynamicModuleValues:>{}],
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Neptune has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]]]}], "}"}]], "Output",
 CellChangeTimes->{{3.866198976517844*^9, 3.8661990384490433`*^9}},
 CellLabel->"Out[52]=",ExpressionUUID->"1b9c0594-4532-4b51-917d-045a07325b10"]
}, Open  ]],

Cell["Create the generator:", "CodeText",
 CellChangeTimes->{{3.8661992172406106`*^9, 
  3.866199220684768*^9}},ExpressionUUID->"d87cbc2a-46c4-4abb-81bf-\
44fbe1b8e1f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qs", "=", 
  RowBox[{"QuestionSelector", "[", "questions", "]"}]}]], "Input",
 CellChangeTimes->{{3.866199041180179*^9, 3.866199049112206*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"365aa65d-9ee7-4bf5-aa7f-83550491fb56"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionSelector",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["8", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["8", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionSelector[{
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Mercury has a moon."], 
     AssessmentFunction[{False -> <|"Score" -> 1|>}]], 
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Venus has a moon."], 
     AssessmentFunction[{False -> <|"Score" -> 1|>}]], 
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Earth has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]], 
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Mars has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]], 
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Jupiter has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]], 
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Saturn has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]], 
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Uranus has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]], 
    QuestionObject[
     QuestionInterface[Automatic, "True or False: Neptune has a moon."], 
     AssessmentFunction[{True -> <|"Score" -> 1|>}]]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8661990451928806`*^9, 3.866199049634654*^9}},
 CellLabel->"Out[54]=",ExpressionUUID->"4252c612-bfb6-4b97-af5e-ce380a067e1a"]
}, Open  ]],

Cell["Evaluate the generator:", "CodeText",
 CellChangeTimes->{{3.8661992289471827`*^9, 3.866199231965513*^9}, 
   3.8661993122196817`*^9},ExpressionUUID->"0da622dd-1b46-44cb-baae-\
c9d2965ff86c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qs", "[", "]"}]], "Input",
 CellChangeTimes->{{3.866198982655248*^9, 3.8661989843636913`*^9}, {
  3.8661990598434887`*^9, 3.86619907076703*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"e424f1d7-3199-425c-820a-c237a245519c"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"True or False: Mercury has a moon.", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              AssessmentFunction[{False -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|
              "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
               1, "Prompt" -> "True or False: Mercury has a moon."|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{161., {45.933593688416295`, 50.066406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "True or False: Mercury has a moon."], 
   AssessmentFunction[{False -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8661989847447085`*^9, 3.866199071028867*^9}},
 CellLabel->"Out[61]=",ExpressionUUID->"ca427657-76f3-4e81-95d3-34e0e60aee06"]
}, Open  ]],

Cell["Simpler workflow from within QuestionNotebook", "Item",
 CellChangeTimes->{{3.866199236402472*^9, 
  3.8661992483166466`*^9}},ExpressionUUID->"a7eb57cc-b95b-4d5c-9903-\
23445bfff450"]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuestionGenerator", "Subsection",
 CellChangeTimes->{{3.8661991437181005`*^9, 
  3.866199146306366*^9}},ExpressionUUID->"eb417f71-22ed-4932-940d-\
4350f618356a"],

Cell["Generate a question using RandomEntity:", "CodeText",
 CellChangeTimes->{{3.8662041381714573`*^9, 
  3.8662041573218803`*^9}},ExpressionUUID->"43d5ff86-08be-48be-9ce2-\
2c43f8b701f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<dino\>\"", ":>", 
      RowBox[{
       RowBox[{"RandomEntity", "[", "\"\<Dinosaur\>\"", "]"}], "[", 
       "\"\<Name\>\"", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<Is \>\"", "<>", "#dino", "<>", "\"\< a dinosaur?\>\""}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"{", "True", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
     "&"}]}], "]"}], "[", "]"}]], "Input",
 CellChangeTimes->{
  3.866199299008782*^9, 3.866199400130722*^9, {3.866199447874195*^9, 
   3.8661994491748657`*^9}, {3.86619949650677*^9, 3.866199500870426*^9}, {
   3.8661998452080297`*^9, 3.866199852176118*^9}},
 CellLabel->"In[69]:=",
 CellID->2081513519,ExpressionUUID->"e94a6961-3676-4811-ad84-e1cca06c074a"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Is Lophostropheus a dinosaur?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{True -> 1}]]}, {
         If[
          Or[AssessmentFunction[{True -> 1}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            QuestionFramework`Private`postProcessAssessment[
              AssessmentFunction[{True -> 1}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], <|
              "Choices" -> {True, False}, "MaxAnswers" -> 1, "MinAnswers" -> 
               1, "Prompt" -> "Is Lophostropheus a dinosaur?"|>]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{144., {45.933593688416295`, 50.066406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "Is Lophostropheus a dinosaur?"], 
   AssessmentFunction[{True -> 1}]]]], "Output",
 CellChangeTimes->{{3.8661998464422035`*^9, 3.866199852845729*^9}},
 CellLabel->"Out[69]=",ExpressionUUID->"71178ba2-9a50-4697-9498-09319683d9ef"]
}, Open  ]],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"eab5d3ef-fcdc-4377-b1ee-2871655779bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["How to Build a QuestionNotebook", "Subsection",
 CellChangeTimes->{{3.810921196478631*^9, 3.8109212049425316`*^9}, {
  3.811073915189776*^9, 3.8110739159069333`*^9}, {3.841100038985436*^9, 
  3.841100040994135*^9}, {3.841105666808714*^9, 3.8411056737519164`*^9}, {
  3.8432555938532896`*^9, 3.843255595014283*^9}, {3.8432556259705734`*^9, 
  3.843255628500326*^9}, {3.866204167503719*^9, 
  3.8662041714866824`*^9}},ExpressionUUID->"ba1ab39b-7bc7-4d83-b287-\
b14813c4aa29"],

Cell[CellGroupData[{

Cell["Authoring Notebook", "Subsubsection",
 CellChangeTimes->{{3.8109212145306892`*^9, 3.8109212382265415`*^9}, {
  3.810921685533086*^9, 3.8109217003184037`*^9}, {3.810921735406293*^9, 
  3.810921737627802*^9}, {3.8109239935921025`*^9, 
  3.8109239964937534`*^9}},ExpressionUUID->"38040a16-149e-4349-96e3-\
fbdc5dc1fe07"],

Cell["The Authoring Notebook is where the Quiz is created", "Subsubitem",
 CellChangeTimes->{{3.810921705127486*^9, 3.810921774278036*^9}, {
  3.8109218397802715`*^9, 3.8109218397802715`*^9}, {3.810923929887198*^9, 
  3.810923929888198*^9}, {3.810923999160344*^9, 3.8109240066825695`*^9}, {
  3.8411060550641937`*^9, 
  3.8411060627633142`*^9}},ExpressionUUID->"9d4a700e-fdf7-4847-b6e9-\
491796013e97"],

Cell["Within the Authoring Notebook:", "Text",
 CellChangeTimes->{{3.810921705127486*^9, 3.810921774278036*^9}, {
  3.8109218397802715`*^9, 3.8109218397802715`*^9}, {3.8109239414227724`*^9, 
  3.8109239713081055`*^9}, {3.8109240089200726`*^9, 
  3.810924009692255*^9}},ExpressionUUID->"838e82fe-1473-4e11-bacb-\
c5c460e3248f"],

Cell[TextData[{
 "Insert ",
 StyleBox["Questions",
  FontColor->GrayLevel[0.5]]
}], "Subsubitem",
 CellChangeTimes->{{3.810921705127486*^9, 3.810921774278036*^9}, {
  3.81092185976978*^9, 3.8109218826960526`*^9}, {3.810921918816167*^9, 
  3.810921918816167*^9}, {3.8109221595564423`*^9, 3.810922186183354*^9}, {
  3.8109238183111105`*^9, 3.8109238338225975`*^9}, {3.841100057975703*^9, 
  3.8411000883516903`*^9}, {3.8411001208856635`*^9, 
  3.8411001208861637`*^9}},ExpressionUUID->"67844362-e17f-49d1-9e1d-\
eb22146868c7"],

Cell[TextData[StyleBox["Write content",
 FontColor->GrayLevel[0]]], "Subsubitem",
 CellChangeTimes->{{3.810921705127486*^9, 3.810921774278036*^9}, {
  3.81092185976978*^9, 3.8109218826960526`*^9}, {3.810921918816167*^9, 
  3.810921918816167*^9}, {3.8109221595564423`*^9, 3.810922186183354*^9}, {
  3.8109238183111105`*^9, 3.8109238338225975`*^9}, {3.841100057975703*^9, 
  3.8411000883516903`*^9}, {3.8411001244732213`*^9, 
  3.841100149991642*^9}},ExpressionUUID->"3bf2470a-a143-41e5-813f-\
e2261c718316"],

Cell[TextData[{
 "Choose how responses to questions are handled in the Settings menu (",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztlMtOWlEUhkk76bDTdta36LTDTm36AEqpaSA2UWKphABeIgoqE4hyESNR
SAgQIomCBhSBhIEGqgYSLgpY7vAM/cpJmg7AYjp1JWdnnX32+te//rX2eTPx
dezzM5FINPOCZWz827vp6fHvH17y8nFq5svklOTT+ym5ZFIy/XbiOZuveV7x
/PZ/Ptl/W71ebzabnU6n0Wjgt1qtdruNX6vVHgt1e3ubSqVCodDNzU2pVDo/
P49EIldXV9VqdXQ0ToLj9/uNRuPs7KzVat3f319YWNBoNNvb28lkEpIj4rBm
MhmJRHJ4eAiNxcVFmUx2cHBweXm5srKi1+trffsnFLUQEo/HCS+Xy4jDTqFQ
oK5er7e3t7e8vPyjb/f398NAoE2Uz+eDDzjURTj7hOCwojwptFqtWCxWqVRk
HMaNfqHzxsYGdVUqFWI5Sfbd3V2TyXR8fEwidthn0+l0bm1twXkgFL3mvEKh
4KRwBofsHo/n5OSEulwu193dHRkpPBAI0BH8gVCEZ7NZu90+Pz8PAbLDB5xc
Lod/enrqcDjOzs4oMxwOK5VK5mRYKwWt3G63VCrN5/OEUxd8cLrdLj0FinCg
mBPEvLi4GKYVZxKJxNLSEn0XdBbqikaj4GxubkKYkimK1Wazra+vP6AVVTCH
pKPvIDOokHT0jeGkfTDnE4loNDo8oNX19TWpdTodDYrFYvBHZxzEgQk4iAln
CmdQg8HgMK0IJB33gmOgQY9X8rb6hgMfwufm5lZXV+HJ3A7E+YMmJIIec4hE
9B2pKQcfZLPZzN0R6hrlJgLI30CtVjMMNIu+C8Pv9XoNBsPOzs6Id1Aw2pdO
py0Wi1wuPzo6ohFra2tcGQosFosj/hn+5kYjUIlA/GbfBP9ROE820H4BGYpt
xA==
     "], {{0, 26.}, {25., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{72., 72.}],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{25., 26.},
   PlotRange->{{0, 25.}, {0, 26.}}]], "Input",ExpressionUUID->
  "caf76876-2ae6-47d8-a98b-5c02547c1573"],
 ")"
}], "Subsubitem",
 CellChangeTimes->{{3.810921705127486*^9, 3.810921774278036*^9}, {
  3.81092185976978*^9, 3.810921956176367*^9}, {3.8411001618506002`*^9, 
  3.8411001941512446`*^9}, {3.8411061869432383`*^9, 3.841106188632619*^9}, {
  3.8432560726626515`*^9, 
  3.843256080308995*^9}},ExpressionUUID->"9ec8ca29-ffd0-4809-9061-\
0997cbb86334"],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"38b74c29-f854-4ae2-a7c3-673a9c109881"]
}, Open  ]],

Cell[CellGroupData[{

Cell["User Notebook", "Subsubsection",
 CellChangeTimes->{{3.8109220216145396`*^9, 
  3.810922030865625*^9}},ExpressionUUID->"6d0e71d4-6409-49a3-b002-\
508d8439ed98"],

Cell[CellGroupData[{

Cell["\<\
The \[OpenCurlyDoubleQuote]Generate\[CloseCurlyDoubleQuote] button in the \
Authoring Notebook opens an index notebook which informs the author how to \
distribute their coursework\
\>", "Item",
 CellChangeTimes->{{3.810923784522846*^9, 3.8109238109164524`*^9}, {
   3.8109240215279045`*^9, 3.8109240218489847`*^9}, {3.841103119925313*^9, 
   3.8411031453576*^9}, {3.8411062765883245`*^9, 3.841106291316274*^9}, 
   3.8432560299534254`*^9},ExpressionUUID->"5e6942a7-12f1-44cb-a9cc-\
9455e7c26f12"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3e1zFFeC7/mJ3X2xL/cv6I69d17M7o19sSFerDpCbKhfWNcQAWMPtNus
29DT+LYHeUx7Box7rmlCRAPhaDNgPGLBG0zU6k4brF0algdbaksjbIEMNKJb
yKJBV24GWg+AxIOAFqaQYbMqqzJP5jknH6qyMqsqv5+Ipq2qfDh5slTnp3NO
Zv6Pf732+f/03/zZn/3Z3//3xj/P/3BD89/93Q9/+lf/g/HD8tf//m9+/Por
q599fd0rP37l7/63v/5vjRd/ZPzz3xn/y/33PQAAgLT61r//D3cBAADSyshC
zwIAAKQVWQgAAKQZWQgAAKQZWQgAAKSZmYWWLVv2L2XYsGFD0scBAABQim8X
s9D169ef5l0PyVwr6eMo3fd+tOYHS5MuRIX9/T8dyvkvW16u9J5e3vJfYtoT
AADR+LYwRvbVV18ZzVjYLaxaterJkyf+y33vR+/8c75F/vD9DYmEDzMQ/NPf
i6+1nZyZN5Lc3OiHFWy7C/lACgil5QbVYfj5aCwfWG990RZmrVK0fTET054A
AIiGmYWMPGMEoQcPHvzLv/yLvMzmzZuNf1esWNElefvtt/2z0NINv7p05/FT
0fyDP36x+5XKHJLG671TuT2PfSS++OHofL48Myf/c+X23PbFLfOoZ3/73lL5
9XC5QXkYfshCAADofFuYL3T9+nU5C+3du9fISEbgee655/5R0tra6pOFlm79
YsbMG/OPZq5dunTpq6n7hVw0N/ZRjHGokDycIWLpax+cGL40ePhn36v8nnNV
MNW7Xno9XG5QHoYfshAAADpWFjK7hlxZyEg7RsNmxCHjv40stEJivOidhd49
d7eQe371mtUn8r1fnDHz0fzVI7HNK3nvtw/Ch4hIFOLL/LxxzI/GPnrZ9Xq4
3FDSYZCFAADQ+VZxjMzsuDCz0KFDhzZv3my8+ODBA2sGkZF8hiRGWPLKQksz
F7/ObfbR7zOuGULrT9x8knvn5oliR0lhfq8wEaY4z0aaG1OcevTP7/xI7s9Z
+oMN73/ofDe/oaEb+SO8MXRI2KjvLhSTm8x1zFk+xZ19+P7f6XuWCpnnD7//
/aPcQNngu87X5dygOATvw3CtJxVayELFZZR153PkARaRs9DSDXvzJf1/PviH
F7VVBABAYqz7C7W2tlpjZL/+9a+N/zaizldffbVs2TJr4b+WGAHJKwvtGzGj
0Mg+6a3XeyfzYWiq93XzhUJ7LXR4FMeWxD6Q7/3ixB8fzAsTj+6OZOyBtlcy
w46JSY/vXzvxi+8Jg1Q2c6NBdvH08Z1Lv9pgt/ltA2a06fkXx84e3zy59S+V
tVDYybXj7+X/Y/7a8VfE1x1ZaOlrzq2KM6v0h6FYb26id6tV5kLdTlwYnHpk
H9njO8MZxyCl35EHqRxXFnrlo7G5fHFiHQ8FACA4cb6QNXfa+NFovsxpQtaS
4nyhn//859brHlno9d6pJ2YKUIyE7fvSmZMCZKGlWwem582MM/WVNfNofuak
2fAuzeQ7Xoz4cMN6N9cGL3r9w3OX/m0m/97Te5OX8j7drtlFYXqTObvJmtwk
tOWFLGQvdK0QQuavHlmpqgY787x85Gr+srWRfUufVWWhYnIoHOC1GTO5zM98
kcs1+sMorleYklVYz746rlC3ZnYRD0uYwBTgyINUjpiFissXyg8AQDVy3V/I
mi9kDpOJSxpZ6ERRV1eX9bpHFlL1uthvDsw43vTPQi8f+bfH7sb5zK1Cnlpk
LT977heFt7/3s59bXRbqssi7yIcVYR9LX+u6Zr40vKdYcHOduavHC1tfuvvC
A0euU1ZDPh/o/jvv3cFZIfrkj2D3BfOliV+/rj8Mcz0xcbzyqz/kMlOx061Q
t4+m+n/xPUfN5fe+SH/kj8UjD1Q5VhZa+tqv8gFt/sEoXUIAgCr2rX/3P1v/
Lc+dDqLMfqH50Q/Nn32z0NJf/SG3tUcTvzlkO/Vvf7Ib9MLdguYf3Lj0xWHX
DJ5AWcjYhSMgFEo6ku+LefDb98x1BqQtFS5018xodmSepftG8gnh6pGXC3uz
stDWM3fyNTL2kdCJUtx0oQ5Vh1FY786lX9v1cnT4prCYau50cUt/+NVfLnIc
uXyOzCPXLOKqnEIWuvBFoYdroosgBACoamYW8r6/kDev+UIfjj7W9ZcU5wtZ
d/bxzUKq6TIFVnZ5ZfcX14qX7OdGcuy5LIGykP3jokX6heQspCi8vJNihnjl
eL4vZXbwXXMtK1uor/Zyvqo6DGEEzM0jCwkvLtJWj9h3F7AGZ5wlcN5GAACA
qvMt1f2FxPnS1o+l3F+oMKrlcR1ZsT8hQBZ6+fi13CrZ29cuuZ378HVh27nL
nE4M3zCn+M6N7PvLRfLGtLvI/zjVu1bIQoXL2IuJrtwsVBzTevT7/nN3xNdd
+3nWVaTXFQUW13sw9V+lijGnEymzUKE3qZD7XLspbvn8fbtEmkVclWNlofmZ
M135AT7SEACgqn1LdX+hX//610NDQ+YC4r0WT0h+/vOfe95fqHhRvdEw/sIe
sipOJXG0zoX22rrI3r5JY7HdL7Szsxd2i6NfS5daMWvp1g8+sO9i9FpPfnRp
bnhPrrH/zyfNRto5XueOFsWfb52xpt4UBrXseyGVn4WeffmjsdzI0qNHj8TX
l340lj/gR3/4lTWutL53Kv9a8Up81WEU1pu/1vWamDiFiikU78HwB8Was+YL
Gclmkf7I/yQeeaDKKWQhc07Ryx+OzpGGAADVTXl/odbWViP/GHHICELGi94P
KfO577R1aVR+Fk/XoUMnBq3rrhyXFxVb2rmbwycOdX3xlX2FuJUwXv7wstk4
P5r5KrcpY7FLNx7MFW5faDa8xd10fXHl7rzZ2Jt9PIWJLU/nJga7DnWd+Eg9
5FRovQvFsLdiXawWSRayM47z9cKEp6fzd6/kq2r4ZqEw9vPS1IdRWO/x/alc
qQuVbG/YGkUzasdRu8KGAxx5kMpxX1NvDgiShgAAVevbqvsLPVuMQ2IQKvl5
ZEs3HL/iuCVN3uObg64HklmpqbjAF786M+NKGKptPb5zfu+KZ3NXjXV9df+x
672bJ624VQwMJnOkRzHktHRr7x9du3DeiCeSLPTs0vd+OytlIfkOSfkbDPWK
V6SrDiM3UWrwpuvY5x9c69ooFm924o93HbcGEion0JEHqRzpXovFCe3Xjr8i
jDsCAFAtlPcXejY/NGY2ddZgWYnPIzMt/cHP//nESOHeOA+++lR9m+alr/3j
4S+GL126NHjin/NPCNv+qTDpRdxWV36x3HI/d975+Ht/9/7h4nvSzaCt7Q9/
0WXeNzp3yx7NLk4MXsov6b4gTbmOWVD3ZpwrOCc1Pfvsy/tOKSY7uY7BfXzq
w7DW+1BdaqsejQM7YNZwl+YUeB15oMr5jfuYlm79OH8wF0/80wpV9QAAkKhv
/fvcdWSu+wtZQ2PWYNmzzueRGf9tbSFQFjIVuzS4CTEAAKgSyvsLmbeoMV80
4pCRhYywJD6P7MSJE9ZaIbKQMB/68Z1rg+bMluP7Yns8KwAAgMu3i3Ong9xf
SHwSmfVimCz0rOKBVtbNFgEAAGJnjZGZ9xcyp0+HMjAwYCSaUDsVZvwMf3H4
H1/jWVUAACAh1nVkhg0bNlwviRGHEjwEAACAkpn9QgAAAOn0bbIQAABIMfE6
MgAAgLT51r/7n5IuAgAAQGKMLPQ0OX3B/FnUAu4XAADUFiNd3A3pP/wv/2vJ
SebcuXP37t1TvvXNN99cvHjx7NmzunWNFc+cORPwuMhCAAAgiBKy0E9+8pOS
s9Dg4KAuC83Pz4+MjHhkofv37xtZqORdAwAAKMWZhax+oSdPnrje0mUha8k/
/elPp0+fLnnXAAAASnFmod/85jf379/Xvfv73//eo1+ILAQAACohzixkRB0x
C33zzTfXr1//8ssvjRRk/Hvq1KkTJ04Y/33x4sWRkZE//vGP4rpGFvriiy9K
P04AAACVOLPQmTNnXFnICDxGQDp//vy5c+c+//zzvr4+478HBweNH7/66itz
MXOY7MGDB+aDzAAAACKkDDyrVq2qRBY6ffq0EWnEVx4/fvz1119ns9m5ubnh
4WFjgfn5eeNH40XjLXFJY0X6hQAAQOSUQcgUQxYSXbp06Te/+Y3uXcbIAABA
JeiCkC4OlZOFTp06pZs7PT8/Pzw87DEKZoQoY/WSdw0AAKCk6xGy/vvOnTtR
ZaEvvvji1q1byrfMuUOjo6O6dWdnZ5kvBAAAIidnIdePEWah3/72t1NTU7p3
s9nso0ePdO9OTk4yRgYAACLnykLykFmEWejSpUtjY2Pz8/NhV3z8+PHvf//7
8+fPl7xrAAAAJdX8aC/lZKGbN2+ePn36+vXr33zzTfC1njx5Yqxy5syZycnJ
kncNAACgFGcWevz48VdffTUwMHDjxg3XJfMeqxgJyljl8uXLoRIUAABAEHFm
IcPDhw9HR0fPnj37hz/84c6dOw8ePJjTMN4yFjAWMxY2gpDxSlSHDAAAYIk5
Cz3Nd/VMTk4ODw//7ne/M+8yLTt37pzx1m9/+9svv/xyfHw8YCcSAABAWPFn
IQAAgOqh7JbRIQsBAIA6QxYCAABpRhYCAABpRhYCAABpRhYCAABpRhYCAABp
RhYCAABpRhYCAABpRhYCAABpRhYCAABpRhYCAABpRhYCAABpRhYCAABpRhYC
AABpRhYCAABpRhYCAABpRhYCAABpRhYCAABpRhYCAABpRhYCAABpRhYCAABp
RhYCAAA16p6Kx1vWuyKyEAAAqFGXL18+4mS8Yr5lxJ4jEutdEVkIAADUKFef
T29vr5iFPN4VkYUAAEDtMkLO5aLu7u6BgQHdkn19fWQhAABQZ4ws1Fd07Ngx
shAAAEgtXdrxfpcsBAAA6gNZCAAApBlZCAAApBlZCAAApBlZCAAApFk8Wei1
116r5EEAAACUKJ4s1NraWsmDAAAAKBFjZAASdvVcl8O5q0mXCECqkIUAJKyn
rcGhrSfpEgFIlTRnoezs9fGxwT7rj9G+wbHx8Zm5pIsFl+zk0CeZHVu3bt2R
+WRoMpt0carI3YufOftTPrt4N+kylYQsBCBR6ctC2dmLvZltrcubGxvUGpsX
r96U+WTwGqmoGkz3tLUIZ6elrWc66SJVjcuZHyxwfHZfymh/l6saWQhAotKU
hbKTQ4e2rWjSRCBZ03PrM6fph0jWYPsS12lZ0j6YdKGqBVkIAKKQliyUvdK9
ZbmuJ8hL4+I3MmfpiYiENKQTYIqsu5WkoRSQhQAgCqnIQtP920vKQZaWtZ0j
9A+V7XLmpdBNHv1CHshCABCF+s9Crvkmgsbm5a0bt+7IHDY7KQ7s2bqx9cVn
NGNoTas7iENlKiULMV/IA1kIAKJQ51koO5L54XcUwWbFto8vzmqizdy1k5k3
Fiv6kYxm+Ga8xa8zJWUhx3VkvdqzlkpkIQCIQl1noezA9hZnW5FLNG8dGvW/
Qiw7eXrvaqmLqHljF2modCVmIeiQhQAgCnWchbKD7c8runaCj7BkRzKr3N1D
zW09tXkHl2pAFooYWQgAolC/Wehq5xpXkGlclQk75Ucx2ej5vUOVKXD9IwtF
jCwEAFGo2yw0tNfVKdS4qqOUdiI3zuba0FvH6RoqCVkoYmQhAIhCnWahbP87
za7unPbBEmfdyh1MazonlEu6758T4okI7odTlvAwhbkZ8Ykip4bHr0c2z9j9
tBJj4wEeViLdTuiXG13Xx//4fecCqsOOoGbkI8g9bqWEp624yqIqSm5Hw6fE
/UR3GiShslBihXd8MNU1H0UWKvXzP3H+U9ensOvMlYBHLX3Eu7p6h5hSCNSe
+sxC2Z42V3x5ZX/pT76Wg5UmDLn7PUL8le5uDF7KXApausmhQzt1jxRpemb1
ptIvvso/rmTTat1tBvy2LnUD+VPUmFwzIbo+cpWzZ732CMJWj6ssYlG8TkPu
5g079Rculi5UFoq98HPXTu7XfHryGz1kP1yujCxU/ud/unuj6/c74IdM7jPm
lg9AjarLLCRHoXVHyxnWksOQentxZ6Hsle5tK7XPVRPkbp4d7mki2cnT6hsL
qLbevHLnCcXWk81Cc6MfB33ginEA27qDdAWo44T6mkPFbpZvV1VTGSLIQpUp
fH6rC/03Wrype2lZKLLP//TRde65hWs6/f54Ulyb0byxmyQE1KS6zELSvYp1
g1pBSeGqcUufYrE4s1D2ytG3A2aVguB3iyzlPt1GW9nvageSy0JzQ/vXam6w
qT+AxW8f9ctDijgxfTZQlCiKtt+g3CxUmcJnRzpCbfWto1e6Q2ehiD//chry
yzWXO9wXmZKEgNpVj1loonON80uq/Kc2SJt8cd+IvFRsWShka2MJciXddM+W
cG2MraXtU3GuxNhHbyxxWOz+G77pGecCS974aMy/Znwqdfpsu3QrhID84qI7
Tuzrlu+64CdAj0NgZWWhyhRedSMKXy0truTqk4Uq8fmX01DL9oEIsxOAalaP
Wahvi+tramN32SMTA9tdo2Sqb+uYspDyqSJNKzZlPhkcM+eL5qeRfpLZpBgj
8vqCf6qcO9HQuPjVnQfs6dIeG29oXHfEo0Eo6TqycFlIfaPxxuaV+doxj8Cc
IXxgZ+tziiPw7PtQPChWOAPPtW7LHM7VU97wqS7NLqK7R1U5WagihVfd00u1
9cOZbcqtF3l+MCr1+ZcvktBdcCH/lhgffKZMAzWsDrNQsD6ckKRmXNXqxJKF
Lne4G/vGxW/rbqWtGizyuKJObsq8ponMjR6Shyma3+nXZq2KZyFVU9y0eq92
qojyCDxuvqCLE7lnuoQ4A2VOX7NFkoWiK7yq+j0+nLk5aZqhTI8Phjw25f35
/0mIz7+UhpSfBcVtNtYdvflEW2IA1a8Os5DU4pY7WyjP3ZI0bx/w3XMFspDx
be1KQn6TOHKDFs5VjG9uzRru3i/9kkXy3+get1+qdBaSJyjl5qL49AnODe2T
GlfdSJAyTrS0dXtPKlZEhIjCUPlZKMrCK+5uKk8ic1M/Oln7wZD34feUQHnQ
zutTLSUtaWHF3wu+vyUAql0dZiFpiCySG7dJLYliqxXPQvJfpC/tCzAf+mpn
63dcW1cWbGTfi47FVHlPIs2cUM8rz6lsFrp7/K2AQxzSIUhDHpreLTlOBLuX
+d2j61zbD1Kz/srMQtEWXnF300D3eVfNMNJ8MEr+/LsClFc1SWmoZUvfXY+3
SUJAPajDLBQktVRmq5XOQlJr7zP5xyLdFEBdstIuX5faSu1qFc1CV/e/4lww
aOXkyIFO2bvlLkvgedDSuG00HUNlZaGICy/NqHu+/dyjwMcR6INR6c9/sTTu
uGNnankQLcKZ8ACSQxaKcKsVzkJSmxTiBpLu2wwoxw3dhQg40Wro4FaHD/o0
Y5KVzELStkPeXVPq1VDVkLsswSfluzsro3lYRllZKNrCS/exeGX/vwWfQhPo
/kIRf/71pZN7qswjnu7+2XcdL5OEgHpBFopwq5XNQlL/S6jW3t2eqSplrGOV
qxRBRiCCq2AWkooeepKYVDhF70fpt0cu46PhudUyslCkhVfVf4jZxEHKFvXn
36t4UhoyUs9XA9v/4wLXayQhoE6QhSLcamWzkPvbPNzlce7GSlk2ecqH/hKd
ElQuCwUfp9Nzdx0opsWQhTR7yXZvdG485LWbQcoW9ef/kmdWy47scx50Y2OA
S8wA1CiyUIRbrWgWKvch74GaQvkynYbirVuulR+JKpeFAuSY8Hta1eG+8SNZ
SLOXGD6cke/iU59+KykNiUhCQH0hC0W41YpmIfcSSzb+0v2IbE/v/9i5vma6
yOUPtXf0bXrmxdaNew70DY6V8Ih3Vf1El4XKeoCrrnhyoCILafZSXp9NoLJF
/vnveuQ3iKdNQyQhoN7UYRYKMvEjPOkqHMWV47FmoXJpC5cd6fR/mFfuQePb
wvYWVSwLSbNVSoq/0kCbtBWykGYv5WbRErJQufwGyfKU99EOeK8AADWkDrOQ
PAM4gnYn0EYrmYVKeNCpN8/CBX/Ie/7xFr3B5hRVLAuVO36i2RVZKGjhS992
0PUr8PkPkIWePp38f1vda/7048hm0AGoEnWYhSoySCZdMqzqbKqfLJSXnRw6
pH4olczjQQ4ex0AWKg9ZqHSBstDdvi2KLtIwd64CUBPqMQtJX5vlP5As2L13
K5mFpI6pcgUv3NzM8KkDeza2vviMdyxqXPz2kT943V6vyrOQ/0gbWUizl9Lv
XRS0bBX4/PtmIXUSyiENAXWmHrOQ/BSOsmcMSTfVVW4x1vlCkcwIDys7e918
yPjyZvl6s3wj4fV0tPjmTodtiwMWjyyk2Uu5t5IsYb5QxT//+iSUQxoC6kpd
ZiGpF8fjeaGBSCNk6u/6imYhd3MTyRNnyzB3bfCQak6RRyNRuSzkzqol9QT6
74kspNmL/yV43gKULebPv5SEGpuadE/mAFDz6jILyXfrLy8MSVFoSfugarlY
7y8U0eM9yzR9tl16yru2riuXhaJ43pf7ybSKziWykGYv0r0WQyaVEu4vVNHP
v5yE1nRevdyxyvmIY9IQUDfqMwvJPUNhH08lkB7s2PD83iHlkmV8XQe477S7
7yOa5rR88vMqdQ+qr+AzONxxtbGtJ2QzJT3bVdGck4V0e3EHyZD1H6Rs8X3+
5dEx82E02ZF9P3C+ThoC6kSdZqGnd3vaXAGmeWO3fiaLB/kCFm2sKuM2N6U8
j0wXyUrz+Y4lDjs+D/o8Kalg8g2bTZV8Nqu7pQzbEyhFIdV+yELavbjrv/md
/qBPqQ9Ytgp//i3Zge2uJGQnHvl+Q6QhoC7UaxZSPFvLe16vhvxQCq9GtsQH
vStbYvk59XePv+XqgFl3NOQBZbPaL27pvr7t54KGoaB32qtkFpKnt4fpCZTb
v0BTtMlCFqn3tHHdkZtBP0DSx19Ztsp+/otLSJ8E5wQ4uc+INATUgfrNQoqu
obB3jJ0b2ueeDOPdiElTToK1x4orVlRZSDFaFyre5R6+3bx671n1GtKUm+f3
/i5YWyb9wa67iquiWUjeeuCmUn7WgmZVspDHXqQw2rLlXwN1zU0fXef+LVOX
raKff3MRKQnJ3cnT3RvdY+akIaDW1XEWUn1rGd+ea/cPBbptrGJWcO5b75zn
t57UHvh/TWavHH1LvnZXmYWU3VSr9gU6HmE3LWszqvZA+uM8YHKUyqR/ukcp
M2yDP95BDr+BjmC6p81d/7qzRhby2ov0ATKiSvek38ffCCjy7Rl0ZVN//v8U
4Bj8P/+qJKTOxHJ4M74XQowIAqg6dZ2F8u3cf5S+aBsXv5E56fEgrezsReUT
KIyW9Uufbzz5L1fPP12zk6f3qh+FqslC+embC1zLNi7f0n3Fq8nJXunestz5
7b38/xqWFlN0pPklx+zkie3L3e2CfhpHKeNYYR51pQi/javaT+vbY6OFfHux
uylu2dKn6c8gC3nuRc4S3p8g1afHp2yqx6Uan/+uEj7/7k5PRRJa06n5eF7u
cAe4l/Z9Sd8QULvqPAvp/u5syD9Ia/2eA119g2PjBcOnunK3EdQ8dCJgd7w8
TSn/gIpDwsPds7PXx3N3cl7v8cQvXRbKH9APFQfUtGJTpnfY9QD5/B2jt62U
7ouoOxbFaIVmy7mbLvbuXS/XlecUdfnyPqMd+3j4+my2WC2jUuMT7rGfuvC7
13UE2dkrg4d2virlIO+b6JGFfPaivj9h7hP0ifALMDczNvhJZpP8uQxSNs0v
dLmff0WOMy8e05VCymReiwOocnWfhZ7mvrc61J0vgTUu3uLb2V/kfbta7R4a
3eNMuiz0VDN8Z22peXH+OrDFupamaXWH/kt7umeLIh84t7xE/yyOlrZPPQOj
NP3VTW4Ewz4CPTvS+RPdCWh6xrtq/AZ1yEK+e9H+7eGlsaXF2Z/nXbboP/+K
59H7jW4rViENATUrDVnoab43fmew564rvjt/2H461OUqXnlCqXFVpnufu7nx
yEJPc9O6968tJXItfvuo53BCrvj9moGLANv2fBxZ/kTILYhD+VnoqWbky7/8
y7ef8Am8ZKEghQ/5+Tf+0Og569qDb9ki/fwrPpRBHrGhuuSBNATUppRkoby5
UeU0IH9NK3b6tZIu02c184AU296Wm+wjNzfeWSh/PEP73wjR6AR6lLwpO3k6
E2bTobbt2XEQSRbKV06okx3wDJOFAhY+6EezcfEb5nQiV+EClS2iz78iCQW9
F5lifhppCKhJacpCednJoUM7tY8W9fgm9b4YV70jxVQFYYvPte60v5yHDm4V
fdAX8BkGc6O9mU2rPZ8g3/TM6k2Z3oBRRTiA2Yu9npM6St529kq3LqfIjaCr
YoLXzNMglZM7CYeGggZdd1kOBr7Z30TfByUfRfCtem427sLnArViQllBY/PK
TfvtWe2uwgUvW9mf/yvd7VtdMv2Bf9On+zPutfd9dj3o2gCqReqykCU3gbOv
63Bmh/UltiNzuKvr1PD16+c1/e8ta/f/Lsj1u6LcJF3HbnJ76RMmklbscPYc
6IpmR/Km89s+NTxezrbzFXNgT2VrpUA6gtzuyiw/gsnNXxaq3qx5c7Z8tLup
2OcfQP1LbxbyphvkCjLhBgAA1A6ykJb27ifkIQAA6gdZyJP2iqTG5f905kHS
pQMAAGUjC/maGz3kzkONy7cHn14JAACqGFkoEPF2Jo2r2sNdUQYAAKoXWSiw
3HTqhS1rO7l/CAAAdYQsFEZ2bo4gBABAXSELAQCANCMLAQCANCMLAQCANCML
AQCANCMLAQCANCMLAQCAVLnn1NvbSxYCAADpYWSbI05kIQAAkB73VHQLk4UA
AECakYUAAECakYUAAECakYUAAECakYUAAECakYUAAECakYUAAECakYUAAECa
kYUAAECakYUAAECakYUAAECakYUAAECakYUAAECadXd3DwwMyK+ThQAAQBoc
O3aMLAQAAFKLMTIAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBm
ZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEA
AJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBmZCEAAJBm
tZKF7t27dxkAAKSVkQRc2cBjmYBbMNVQFuoDAABpJScZ8d3e3t4jR46IWcjj
XXk7NZGFAAAAdIyc45F2vN8lCwEAgBpl9f+YPT9TU1PKxchCAACgLllzgS5c
uEAWAgAAqcUYGQAASDOyEAAASDOyEAAASDOyEAAASDOyEAAASDOyEAAASDOy
EAAASDOyEAAASDOyEAAASDOyEOrR1XNdBeeuJl2W8O5e/KxQ+s8u3k26MABQ
98hCCZqbGR8fn5lLuhj1qKetoaCtJ+myhHc581Kh9C9lFL9gAIBIkYWe5jPJ
2GBf4S/xU8PxxJOrB9c25Zu7ptUfxtDe2V0Ngfsa7L6V2uudIAsBAIJKdRbK
Tg4d2tn6XFODpLF55aZM72gFM9FYxyprb3E0eHbz2tDQsqUvSLax80RFCljR
gSCyEAAgqNRmobmh/W8sbpRTkEPTip0nJrMV2X+2/53mYvB663jlu13ELBQw
DVU4Czka/CcRb5wsBAAIKp1ZaLp/+3IxBzU2L169fmvextYXn3F0FLWs7Ryp
SBzKXvkss2Pr1j0fV7L7yeLMQoHSEFkoKWQhAIhTGrPQ1c41dhBqWZs5ec0V
RrKzFz/etsJORC3bByrTORQjdxYKcFRkoaSQhQAgTunLQmISamn79KZuueyV
o2+1FBd8vn2wxtOQnIV80xBZKClkIQCIU9qyUHZguxVwXto38shz4bt9W4oL
N67plO5TE+QeNvpldFOHhQu+/AW/eY6QhVparCrwTEOhstDczPjwKbNQfYNj
12d1m7Ur5JcblxQ2v2TjLwNdsSbsw+9qP1UWcqyuL6FKdva6daVhKRcahlzf
Nwtlr5yxPgOfnv7qQcjiAABEKctC2Z62YqdQ8zv9/q3h1f2v6PNAkL4H/TK6
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
QOLIQkgEWahWGN8PxrdE0l9U9ez27dse9f/o0aOkCwikAlkI8SML1YobN24k
/RVV5x4+fOh9CpIuIJAKxnddPF+qgIUsVCseP348kf+LKekvqvo0MzPjewpu
3bo1wSkAKuz+/fsxfKMCIrJQDXn48OHU1NREfkg96a+rumKEnCD1/+TJk+vX
r09Q/0DFeE/bAyqELFRzjER0+/btW4iC8dnOZrOh6n9mZoauISByxq/V7Oxs
hb42AdllwYULF8hCQFjffPNNFkBE5ufnk/6dRur0Say0Y2Qb8fXe3l6yEAAA
SI/LKmQhAAAAGVkIAACkGVkIAACkGVkIAACkGVkIAACkGVkIAACkGVkIAACk
GVkIAACkGVkIAACkWW9v74ULF+TXyUIAACANjh07NjAwIL9OFgIAAGlAvxAA
AEgz5gsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0
IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsB
AIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA0IwsBAIA6c09DuXCt
ZCGj/JcBAEBayUnGYxnjv49I6iAL9QEAgLSSk4z4bm9vr5h2XN1BU1NTdZCF
AAAAdIyc45F2vN8lCwEAgBplZBixX2hqakq5GFkIAADUJWum0IULF8hCAAAg
tRgjAwAAaUYWAgAAaUYWAgAAaUYWAgAAaUYWAgAAaUYWAgAAaUYWAgAAaUYW
AgAAaUYWqlZXz3UVnLuadFlQq+5e/KzwKfrs4t2kCxMevwQAYkEWqlY9bQsa
TG09SZfFw9zM+Pj4zFzSxYDa5cxLhU/RSxnFr2q162lrqIVfAgC1jiyUZ/39
WT1/PddCFrp6cG1TvohNqz+slZbW7ikJfLLt3onq+XgERBYCAH9kIUO2/53m
4nfuK/tj6Yz3H7uogSw01rGqWG2109Ta6aChoWVLX5BsY7fIFTnKSg4EkYUA
wB9ZyMglx99qbIi5Ufdvo2ogCwkZsvGt4zXSYyJmoYBpqMJZqJINPlkIAPyR
hZ7ePbquQfT83qHK77QuspCRhq58ltmxdeuej0drZsaQMwsFSkNkoaSQhQDE
gix0df8rha6NxkLvUPM7/dlK77VOslANcmchIw1tH/A+32ShpJCFAMQi9Vlo
aO/zxQSUabf+s+JhiCyUFDkL+aYhslBSyEIAYpH2LCREof6s3UXkN/slyG1b
FMvYs2R/uXFJ4Ut+ycZfKq9SUmahuZmxwb78sn2DY9dngye27Oz14ppdp4Z9
L4JXlH1uZviUueNrcx6LSe8I84GNQpjbCFQG9WrCQZd28Z+QhVpaWgKloTBZ
KGhFC5ezvf/j4uZ//H7xNc9p1MI+/D4GqizkXD3c/RBCfo4kczPjxXMZ5BPs
m4WmL/RZVdY7dDNkaQDAlO4slO1/57vmV605SWiic03hq9fncrIgf247lnmS
f8n+aldybMuZhbKTpzPrn2tyrdD03PrM2WnvQ5w8vX/TyuZG976anmvdqZ/l
4yi7sYm9fyNswW6W9NVgv7Ox22jv5kY/3iYVorF55bbuK16tYfZKt3q1fMmt
2gzV5SFkobZDPW1CGjr1SLNKoCwUsqJV3VMiddtv1OPOVuljkKuRQxeUnwPn
GTLqU7F604pNvxryCzWlfY78Sp4r+qb9pyd1HwLvLDR9tn1VsUCNqzIjFR/Z
BlCvUp2Fsj1t3zG/SYvzpe1LyrzDULxZqHukY7XUilityeKdui6N7GT3lsVS
6yVqWdupbEGEsr+XsfOCu1kKkoVeypzt8SiF/s5E0/3bl2tXa1y8paO9eEV/
yVmo5+m0Mw2pK9I3C5VQ0eGzUHakc22LxxrKcymeyEN2clCs/dZRbSwt/XNk
mhvK6D+/OY3Lt/cro5xHFsqOZOwgpFsfAAJJcxYygk8hCtnBx75M3PNyshKz
UP4mzXln2l8svPli+5nii44hAzsLFSd1G3+Cb9xzoKur68CejY4/sZ9vH1Q0
RGIzn//7O3M4P5RwOLNNXNv4g/pLqUNE2VI3PbPEsLh5S6gs1NjU1Fgowfod
uSIczuxYL3YwNK7plGOn2NJ5HbrPOfA8LWb7Ot290bq5lLoi/bJQ8IoW8kJ2
9nrxtB/+aXGRnx4uvuYefXLUR+PiV7cV9nFgj1iXLW09rkggn0irKt3nQXf0
JR2epuT5bqQDXYqiK8r+VJ+FHLlQuSYAhJDiLGTNDmpY0zlhvWqHoebtA9p1
S8xCYTZgZ6H89/1bh1wDEXND+6w2RlHUq51rhL+aT7hHIcThhYaX9rlbMWcT
2rRi28cXVVM7gmQhs51sd42DZCe77RZWrh+h9KpDHz309uJSbwnlzkIB0pBn
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
IQBBkIUSFyQLvSvo7u72bQLOnz8fdhWg/pCFAARBFkqcbxYaHR1tEGzevNm3
CTh58qS4yu7du6NrXoCaQRYCEARZKHEBs9C7775bQltw/vx5shBSiywEIAiy
UOLIQqig/l0vNDRs6Ix+w50bGhpe2NUf/YZtubKXtwuyEIAgyEKJq5oslG81
iyrcysn7jXGHyTHyg3Gc4+p3XALlF6PuFngvmN9wJSrXLwtF8HEiCwGIB1ko
ceVkoe7u7mXLli1atMj4VzmPKGgWyjdcQrOTa+gq0Zmg2fULL5Tb6NUG7ywk
1kDA7hz/LFQxXlkooo8TWQhAPMhCiSs5Cxnhx9WVYISiwcFBcZlgWSjfd5BQ
k5pr7zZ0fl52q1cLCm17kCwUMD/EmFlVu1afssg+TmQhAPEgCyWutCx08OBB
96BKXmtrq7hYoCzkP/NDGMFxLFhorIS3C02gu2PA7MFQNJDFeKBo9sRBFntF
9avu1+24oSy6ciOdG/IFtFfIv+P60a9OCuEkty3ne44hI7m+1VnIs8SuYbX8
q4VqLCz9wq7P5Q4m3ZYchyfsXNyNWELtp6b0j1OheMWq27DL/aGwqzVgRiIL
AQiCLJS40rKQkXkaNIz8Yy0WJAv17/q+V8vijDXOZrPQrhZ/Fhd1hRvzx89V
GzeXcregjp+NH8x9qF91vmwczwKhEGLpzE4Z7UYWKJKGag+ugCF2zhRWK6Qx
VyQM0S/kmOaTK5lweC84T8f/3979v1ZxLngcd/+mk7uQCyn4ywbi5UJLxLbb
JVlo916aH6Sg0YWKpGClEKl4UeoFlxC4q5sSFLXWw0Zy28TQhkZQr72ryEqX
mPQ2XmNsSe1BdJ8zc87M833mJDlnTs7zfv0gOXPmmXlmTjzPJ8/zzIwl6Ggn
Xq2qbUvadpKXynK1jq7Ik9GZUz8li+lhpjuuHfWXi/IrqbZpys3ZIUYWApAH
WahwG8tCfX19riwk31kxTxZSWlrLuyX9b/O0LbN3OkjxQU5JSRunrp42+O60
Ydu8fSv1I7IHLM9GjPOglZVf2hKINTNp+8rIQhrt3Cnr+mqiHpu8xHKirGHI
FTSMGGb7tfF3C7l+nayV13895P4+6Zx7kIUA5EEWKtzGslB/f78rC83Oziar
bbpfyBIcpFbJfNceGXJEIXuMkDOBc6klRxjdO8bQnrnp3FlIG+5SdmDr38mb
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
V7x3RFS88uDSQXcVS70HPnOmWv/RibJ7J/5ifCZpqBkp3xl/23lqu3cdnX5i
K2ZFFgKAdhJ0Fnr55LN//3X8yj+DOp01vfOjL3956c9CK58dTJrMai/Q2IWr
129XB1UujB1+M21Me4/N6XuUJjP19HTXyu//WGxAlP14v9wX0v3uhNnoVxZO
7/l1fY1qL9C56iBOdSTp3PHfp8nKWlbUe2pEigrOPdcP3MhCSvmeN/d/ci4a
D7owdlTqiekeHNNCoDGbXVT8ULTnq+c+OaR04uzcd6QehKorRTs498mH2Sem
GoTGBtMTsOv3R6MdVIvLpaO4pUhDTX2SmLRntXbyB7r+aLHm65Nv1N5/4+TX
9YUNjegBAJos7Cyk9Pe4Z1BLU4VO33yhD+uopIvNeg9eMkaF5MBgjMxpN4Ic
PKmN+VSWymlps28hHcYTRef1Dhg5DViSX2XuWK9vz1+dVjpFjCwkHVjv3rM3
tZE4ucNIq7hy0Jai6zfP/KuaxHoPntdG+vQTo+c06di7dx/7szaSJncY7RyZ
Un4N1A4ec8+idslZ7R6Z8vf10RkEAG0p8CykzgNyDK8Yq8wdq8+6NrLQk0v7
6g3nvkvWcCWFpXcnHjoqJ1LXyW9+sZROY5mx/YWTySzdkwsZB7Lz2Jz6VnqR
XGnnobJ1EK1y50xaPT0LpZt+7eSCazJUl23n0kFbusq0jbu3L52YdycW1cql
p7x738UfbIN7T6ZGdial5Q9FykLd+y7Zzot00ynbeScLAUDbCz4LqZ0+tiJJ
8km6jqRJJEYWyn7kQlqFaD6u9R33kJ27bU2vXXJe5JVWPJqcnZKikGceuRRb
1CyUq3vtyaX9XZbM4D4dqTTmuasnb+cvSt7Ru/Vcu6jVTsmY6RlznxfPrwNZ
CAC2gXCzUNI7keYAWwJJm/n0XW/j10AV9OJ52s10HVfvj0dacW0H6Rt6X5Wz
5nKoSDvKtIylFf+XLnMnW3XQlfKhpHL/LVcu/XzdYetl9RTYuq3yfNTpOpau
QLIQALS9cLNQ2rhJQyhGr4Y8azoJSg1kocra9+ldfvQ7zmwuC2XtfP3RYnKT
npo//M6ehSwJMXPfUty4Pz5YjyrpPXQskt3Le2/soD2BQvpUlCw0faQ+Jvm7
P3gql34s8nltLAtZakcWAoC2RxZ66RvisQ+g5Wgg1+9dGzv89j95L29vThaq
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
E7FnYGDg1KlT4ucPPvggzj99fX3i5ezs7PDwsFhCHAI2gywEhIYsVLiGspCI
OvJY2GhEXiJykchIW988AMEgCwGhIQsVLk8WunHjhgg8cb/QqVOnPKuJsCRW
iNff6iaiJSYOlEp7Tsw0YasHJnKvPnNij3v95tRQ3nqkgepia5GFgNCQhQqX
mYVEqolnBwl9fX0i53hWjofJYuLnHF/8Myde70qKNK+Nt+x3T0na75e1xS3L
Qtr+Z4z3HGEkLrfxpFI9387Szc1Z4ap+aPk/MrIQEBqyUOEys5CINP39/SIC
jY+Py0FIZKRTp07JF5TFxMvZ2VnxlkhQ9+7dy2oipBzSaPfJhtX2m7T5Ewe6
6vttSRbS80zUGSOdB2+/0Cb5slB1v0ShJiALAfAhCxXOn4XicTEt7YiFQ0ND
8cTp+AoysY7IP9o68XiZ+ys/SgAHJhbzNhFbpbZf95tNzkK2pCOWdaX7bWYW
knKfgSzUJI2FfLIQEBqyUOH8WUiEGREctO6d4eFhEX4mJyfjl+LdgYEBsUQb
PhOr9fX1edsHf8NbbbZtg0hxk/1lMrUlaWf0/h5rqvDv13h35sTr+m6kSswo
BZUdpdXbc+KE9KYj6FQPtr692irmAVprKK2mHpc8DBe9I61pTglS3qy/5dp2
7eijCGcd4kvfrL+f1kZdXd6v+FQX5eWiGvJp9BRzHYh6oNbDSasrv+Wqbt6N
2E6hedKtyEJAaMhChfNnoXK5XIpm/iRxaHZ2tqurKwlCCfkKMrFyPEbmmTKU
0QehDp+pXTm1BkcJF7VNaVu17CRjv2rSUParJi1vFlIHwdRXjj6CaN6UnOlc
O1ZqqAYredO1cbe0UDIImLdfyNyt8RGIdy3desmbUbCpxwPpE7LX2HbupZj7
epdaGamYq0vNe6r0s53UL56/Zq2uu/bqRvS+R/qFAPiQhQqXOV9IhB851cQh
x1xNBKH+/v6kSCkaIPPMF8rTPZN2EiirGz0r8gK52bHlnozuKMt+0krI+/Fl
IWvXjdxo2tpFqUnPPEC5ydXXi17LycrcTa4sZD0I50egb8aZH3xFq7V27d99
RHIxy74svxfqW0YZZUdauOrKtxFLriMLAXAhCxUuMwuJPCNCTmYWGh0dNbOQ
Z7Pe/hkjhWTECXs+sO6igX4hI5DJhT1ZKBpWM+rXaL+Q6wClH+XxO3XcRukr
0Q4wXxZyjC5mJTrLm9lZSB3vcmQxs+K2Yq5+IeWyPbVQ/iykXPPo3Yj260EW
AuBDFiqcPwslj9hIBsXiUTPzyvqBgYEkL4n4FF9c74tDvg4aRxZydZuYgyHV
F46Ld/LPF7JnIUfQyp2F8s8XsldLy0LuxNOULOT8CLTN5MxC6migr19Iqbin
mDlLyji0rOp6s1C+jZCFADSALFS4zLnT5qXxu3fvjp+7Eb8UP4yOjorVtPsr
yqNmNr7ryBobIzOGU6rt0ITrOubc15E1ZYzMNsM7Wua7jsxMaObPim0yRmYZ
B8uThTzFnFevuyNwg2NkuTZCFgLQALJQ4TKvqS8ZjxiLR83iOdVx4LFedy/y
kshIvi99/b46eseDd+60Y1ZvusgfeOQ2TWrics+dNjKJvD9j4nLJaCgz7y/k
OkBzQrC8pQl7FWZOHEjCgnPeTaNzpzefhYwRrXxjZJ5i7tThPFUNZKHcG7Gd
ytxhiCwEhIYsVLjM+UIDkYfRLCB5+alTp8TyoaEhEYfkt+KfJycnrUNpBunC
+ahFEyxvKX+Mxy3LiXQsxGxlshsf5VJnkUPq+9WDi+uaemUT4g29Q0K5IN7S
W6FMYLFc6xYXsuzYd019SesvkUaLDpyYSEJGl3WvtoEk3zX1WzJfSD1IUbV8
84XcxbTToZ4966lqJAvl3Yi129B+0k1kISA0ZKHCZWahONXEj+HwjnlVxfcj
itcXMSnrW39jcvyVLZqeHI3OtpRxIVzYzNCZMVe+HZGFgNCQhQqX59msIg6J
kBOHIs+wVzygJlaI1894AMfGZWahxqZnbDMdfXCbZe8022aniywEhIYsVLg8
WSgWRx35LouTETnz+B9kv0XcWag+dLLNOgJyqo+zdObRbRH94vltloOqyEJA
aMhChWs0Cw0PD8ezgJLhsHg2kXh3fHxcZKGM+dIAvMhCQGjIQoXLn4UeRs+g
7+vrE/lnaGhIxJ541nQch16JiB+aNjQGBIEsBISGLFS4hrJQbHJyMr6CLI49
8cvR0dEcV40ByEAWAkJDFircBrIQgOYhCwGhIQsVjiwEtBWyEBAaslDhyEJA
WyELAaEhCxWOLAS0FbIQEBqyUOHIQkBbIQsBoSELFY4sBLQVshAQGrJQ4dbW
1sTX7+LiYtEtAICq77//vuhvBQAtRRYqXKVSKfq7H0Dq8ePHRX8rAGgpslA7
WF1dLfrrH0AVnUJAgMhCbUKch6IbASB0P/zwQ6VSKfrLAEArPJUsLy+ThdrE
8+fPxal+/Pjx3wG01tra2i+//FL0dwCA1hEZ5qIqSTt3Vbdu3UreFf9q75bL
ZbIQAADYdp7axG+JbDNtSLKQ+RZZCAAAQEMWAgAAISMLAQCAkJGFAABAyMhC
AAAgZGQhAAAQMrIQAAAIGVkIAACEjCwEAABCRhYCAAAhIwsBAICQkYUAAEDI
yEIAACBkZCEAABAyshAAAAgZWQgAAISMLAQAAEJGFgIAACEjCwEAgJCRhQAA
QMjIQgAAIGRyzhkcHNSSj1iyurpKFgIAAJ1KSz5yHIpfkoUAAEAHM7NQHIeS
n8lCAACgg5mDYjLmCwEAgM5mph1PECILAQCADmMNPK4gRBYCAAAdxpV5yEIA
ACAEZCEAABAyshAAAAgZWQgAAIRsA1mo0SIAACA0f/3rX4uuQrOQhQAAQCay
EAAACBlZCAAAhIwsBAAAQubMQp8O7tgx+KnysupXH95wLbnx4a/iJUkxsYr4
WXlgaguRhQAAQCZbFrrx4T/+w47BwUE91MQ/xNnHtqSWiuo/iGwkhanWIwsB
AIBM7jGyT9MsJP0oAk416RhLVvUstMEktGPHjsYL2ZGFAABApjxZqJZ/pMXm
ktVVZYxsY0loR13DJSPTkeQlWQgAAGTawiyklE3fzmuHqsHSVWQhAADQqGZk
oWSQrNZNNJE9e3qHzYYPKiay0P8D994p1Q==
    "], {{0, 650.1687289088865}, {578.9276340457443, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{339.6776340457443, Automatic},
  ImageSizeRaw->{578.9276340457443, 650.1687289088865},
  PlotRange->{{0, 578.9276340457443}, {0, 650.1687289088865}}]], "Input",Expre\
ssionUUID->"610e8397-b4a1-4836-b188-01fac4992857"]
}, Open  ]],

Cell["Share link to the Notebook on Wolfram Cloud", "Item",
 CellChangeTimes->{{3.810923784522846*^9, 3.8109238109164524`*^9}, {
  3.8109240215279045`*^9, 3.8109240218489847`*^9}, {3.841103119925313*^9, 
  3.841103184800239*^9}, {3.843256037811654*^9, 
  3.843256039706627*^9}},ExpressionUUID->"2454de25-184a-4181-906a-\
38ae3601c04f"],

Cell["Share the notebook itself", "Item",
 CellChangeTimes->{{3.810923784522846*^9, 3.8109238109164524`*^9}, {
   3.8109240215279045`*^9, 3.8109240218489847`*^9}, {3.841103119925313*^9, 
   3.8411031527302294`*^9}, {3.8411031872922397`*^9, 3.8411031935942445`*^9}, 
   3.8411034799686995`*^9, {3.8432560440046406`*^9, 3.8432560535896297`*^9}, {
   3.8662006723885756`*^9, 
   3.866200672390069*^9}},ExpressionUUID->"89bed26e-f306-4783-b9c9-\
c7d8de2ef298"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Courseware with QuestionNotebook", "Subsubsection",
 CellChangeTimes->{{3.810923784522846*^9, 3.8109238109164524`*^9}, {
   3.8109240215279045`*^9, 3.8109240218489847`*^9}, {3.841103119925313*^9, 
   3.8411031527302294`*^9}, {3.8411031872922397`*^9, 3.8411031935942445`*^9}, 
   3.8411034799686995`*^9, {3.8432560440046406`*^9, 3.8432560535896297`*^9}, {
   3.8662006743561087`*^9, 
   3.866200694968999*^9}},ExpressionUUID->"d3d16cd1-4822-4ce6-b8da-\
5d83dd1b7d33"],

Cell[TextData[{
 "What it ",
 StyleBox["is",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellChangeTimes->{{3.8662011605121565`*^9, 3.866201161644653*^9}, 
   3.866204188811635*^9},ExpressionUUID->"cb402cb2-06f8-4cb6-9d00-\
09e251a32436"],

Cell["Courseware authoring in a notebook environment", "Item",
 CellChangeTimes->{{3.8662011667606087`*^9, 3.866201206969804*^9}, {
  3.8662016613046923`*^9, 
  3.8662016723544583`*^9}},ExpressionUUID->"db0d172b-8de7-4490-bbcd-\
f520fe7d139c"],

Cell["Shareable", "Item",
 CellChangeTimes->{{3.8662011667606087`*^9, 
  3.866201212225878*^9}},ExpressionUUID->"e87e127f-3b33-4f08-8737-\
d80ff3b9ab0b"],

Cell["Flexible", "Item",
 CellChangeTimes->{{3.8662011667606087`*^9, 
  3.866201219345665*^9}},ExpressionUUID->"510b995e-634b-443d-9c48-\
9fb33a6c422f"],

Cell[TextData[{
 "What it is ",
 StyleBox["not",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellChangeTimes->{{3.8662012214331493`*^9, 3.866201222911996*^9}, 
   3.866204190940073*^9},ExpressionUUID->"896d4a0c-1aa3-40b8-b782-\
4be375bfae38"],

Cell["An LMS", "Item",
 CellChangeTimes->{{3.8662006968594985`*^9, 3.8662007052665462`*^9}, 
   3.8662011716206045`*^9, {3.866201679614772*^9, 
   3.866201679616272*^9}},ExpressionUUID->"952a42f3-3081-447c-8b30-\
425e0432c9c5"],

Cell["\<\
Possible to create courseware with this tool in the cloud environment\
\>", "Item",
 CellChangeTimes->{{3.8662006968594985`*^9, 3.8662007052665462`*^9}, 
   3.8662011716206045`*^9, {3.8662016839010315`*^9, 3.866201717698916*^9}, 
   3.8662042189903316`*^9},ExpressionUUID->"72db937a-d479-4ec2-acf2-\
9fcaf8739258"],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"c98f5331-7b2f-4ee1-89e7-835b9deb69af"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using Question Notebook", "Chapter",
 CellChangeTimes->{{3.843125778378207*^9, 3.8431257823280907`*^9}, {
  3.866200050046837*^9, 3.8662000509022684`*^9}, {3.866204935156686*^9, 
  3.8662049481231823`*^9}},ExpressionUUID->"f4ddc869-4313-4dd8-b8d7-\
956cb1df57f3"],

Cell["\<\
Putting it all together now, lets create a small piece of courseware using \
QuestionNotebook.\
\>", "Text",
 CellChangeTimes->{{3.866204875906288*^9, 
  3.8662049169664993`*^9}},ExpressionUUID->"63702fe9-718e-47d2-a038-\
3e6c2f4db6f1"],

Cell["Link to a sample quiz I wrote:", "Text",
 CellChangeTimes->{{3.8662015612463393`*^9, 3.8662015722374287`*^9}, {
  3.8662016123260183`*^9, 
  3.8662016134605813`*^9}},ExpressionUUID->"551861fe-e587-45a1-a386-\
aedfa0f77237"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Hyperlink", "[", 
  RowBox[{"\"\<Dino Quiz\>\"", ",", 
   RowBox[{
   "CloudObject", "[", 
    "\"\<https://www.wolframcloud.com/obj/sschroeder0/Quizzes/\
MyDinosaurQuizSample/quizapi\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.8662013669850597`*^9, {3.8662015758402987`*^9, 3.8662016072223663`*^9}, 
   3.8662020376394773`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"19f8dd6a-2e7a-4429-b3fb-d1ea18aa2e6e"],

Cell[BoxData[
 TemplateBox[{"\"Dino Quiz\"", {
    URL["https://www.wolframcloud.com/obj/sschroeder0/Quizzes/\
MyDinosaurQuizSample/quizapi"], None}, ButtonData},
  "HyperlinkDefault"]], "Output",
 CellChangeTimes->{{3.8662015803399415`*^9, 3.8662016074703703`*^9}, 
   3.8662020394586515`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"21b90caa-5f59-4479-bcd5-9fc5ca1d4176"]
}, {2}]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<GetQuestionAssessments\>\"", "]"}], 
  "[", 
  RowBox[{
   RowBox[{
   "CloudObject", "[", 
    "\"\<https://www.wolframcloud.com/obj/sschroeder0/Quizzes/\
MyDinosaurQuizSample\>\"", "]"}], ",", "All", ",", "All"}], "]"}]], "Input",
 CellChangeTimes->{{3.8662004830914197`*^9, 3.8662004844295893`*^9}, 
   3.866202030476859*^9, 3.8662021649095726`*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"8de053e4-f766-4ce6-a4cb-3e3d11421a11"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"demonstrations-testing@wolfram.com\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       RowBox[{
        TagBox["AssessmentResultObject",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       AssessmentResultObject[{<|
         "QuestionID" -> "a0121e00-c844-46ca-99d4-e32c4785fb8d", "Score" -> 1,
           "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
          "GivenAnswer" -> "Cretaceous", "Explanation" -> None, "Timestamp" -> 
          DateObject[{2022, 7, 7, 12, 2, 9.647197`7.736976133804065}, 
            "Instant", "Gregorian", -5.], "AssessmentOptions" -> {}, 
          "AnswerComparisonMethod" -> "String"|>}, <|
        "ResultStorage" -> Automatic, Permissions -> "Public", "ScoreSummary" -> 
         1.|>],
       Editable->False,
       SelectWithContents->True,
       Selectable->False], ",", 
      InterpretationBox[
       RowBox[{
        TagBox["AssessmentResultObject",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       AssessmentResultObject[{<|
         "QuestionID" -> "d25e2916-ed41-4bd7-a905-9348f65b8bb9", "Score" -> 1,
           "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
          "GivenAnswer" -> 63.1, "Explanation" -> None, "Timestamp" -> 
          DateObject[{2022, 7, 7, 12, 2, 28.19937`8.202814387410319}, 
            "Instant", "Gregorian", -5.], "AssessmentOptions" -> {}, 
          "AnswerComparisonMethod" -> "Item"|>}, <|
        "ResultStorage" -> Automatic, Permissions -> "Public", "ScoreSummary" -> 
         1.|>],
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], "}"}]}], ",", 
   RowBox[{"\<\"averyd@wolfram.com\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       RowBox[{
        TagBox["AssessmentResultObject",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"0/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"0/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       AssessmentResultObject[{<|
         "QuestionID" -> "a0121e00-c844-46ca-99d4-e32c4785fb8d", "Score" -> 0,
           "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> False, 
          "GivenAnswer" -> "Jurassic", "Explanation" -> None, "Timestamp" -> 
          DateObject[{2022, 7, 7, 12, 0, 55.088908`8.493639137813862}, 
            "Instant", "Gregorian", -5.], "AssessmentOptions" -> {}, 
          "AnswerComparisonMethod" -> "String"|>}, <|
        "ResultStorage" -> Automatic, Permissions -> "Public", "ScoreSummary" -> 
         0.|>],
       Editable->False,
       SelectWithContents->True,
       Selectable->False], ",", 
      InterpretationBox[
       RowBox[{
        TagBox["AssessmentResultObject",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       AssessmentResultObject[{<|
         "QuestionID" -> "a0121e00-c844-46ca-99d4-e32c4785fb8d", "Score" -> 1,
           "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
          "GivenAnswer" -> "Cretaceous", "Explanation" -> None, "Timestamp" -> 
          DateObject[{2022, 7, 7, 12, 1, 4.277229`7.383737490786348}, 
            "Instant", "Gregorian", -5.], "AssessmentOptions" -> {}, 
          "AnswerComparisonMethod" -> "String"|>}, <|
        "ResultStorage" -> Automatic, Permissions -> "Public", "ScoreSummary" -> 
         1.|>],
       Editable->False,
       SelectWithContents->True,
       Selectable->False], ",", 
      InterpretationBox[
       RowBox[{
        TagBox["AssessmentResultObject",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"0/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Question Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                    RowBox[{
                    TagBox["\"Correct: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"0/1\"", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       AssessmentResultObject[{<|
         "QuestionID" -> "d25e2916-ed41-4bd7-a905-9348f65b8bb9", "Score" -> 0,
           "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> False, 
          "GivenAnswer" -> 44.1, "Explanation" -> None, "Timestamp" -> 
          DateObject[{2022, 7, 7, 12, 1, 14.201032`7.90489489138783}, 
            "Instant", "Gregorian", -5.], "AssessmentOptions" -> {}, 
          "AnswerComparisonMethod" -> "Item"|>}, <|
        "ResultStorage" -> Automatic, Permissions -> "Public", "ScoreSummary" -> 
         0.|>],
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.866200485254033*^9, {3.8662020973789434`*^9, 3.866202114226745*^9}, {
   3.8662021580519037`*^9, 3.8662021666195354`*^9}},
 CellLabel->"Out[17]=",ExpressionUUID->"4f8e62c5-a5de-4942-bed8-68cd026c38d1"]
}, Open  ]],

Cell["Join me in creating a quiz!", "Text",
 CellChangeTimes->{{3.8662016327119913`*^9, 
  3.8662016373497305`*^9}},ExpressionUUID->"8eb1a43d-bcda-45cc-8793-\
465084f23804"],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"ce18f128-df55-403f-b56c-b2c7643ba6e6"],

Cell[CellGroupData[{

Cell["Summary", "Subsection",
 CellChangeTimes->{{3.841103747338435*^9, 3.8411037516795473`*^9}, {
  3.8431256919325857`*^9, 
  3.8431256935175*^9}},ExpressionUUID->"4cd741c4-ca1b-4d81-80df-d5603d971c67"],

Cell["Question Notebook is a powerful tool for educators ", "Text",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000419461879*^9}, {3.811000555523288*^9, 
  3.811000568545648*^9}, {3.8411033928741693`*^9, 3.84110339662132*^9}, {
  3.8411038566466565`*^9, 3.8411038674403114`*^9}, {3.841104009039522*^9, 
  3.8411040145105486`*^9}, {3.866200063924385*^9, 
  3.8662000650436316`*^9}},ExpressionUUID->"9ae8ebc6-0490-4d59-b975-\
a791044bb097"],

Cell["Streamlines courseware creation", "Item",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000419461879*^9}, {3.811000555523288*^9, 
  3.811000568545648*^9}, {3.8411033922228336`*^9, 3.8411033922233334`*^9}, {
  3.841103875602668*^9, 
  3.8411039227914953`*^9}},ExpressionUUID->"287cb8a7-3186-48d2-b505-\
9cab2a463203"],

Cell["\<\
Create content with the full flexibility of Wolfram Language notebooks\
\>", "Item",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000419461879*^9}, {3.811000555523288*^9, 
  3.811000568545648*^9}, {3.8411033922228336`*^9, 3.8411033922233334`*^9}, {
  3.841103875602668*^9, 3.8411038978138247`*^9}, {3.841103941656951*^9, 
  3.8411039722675123`*^9}, {3.8411041018549232`*^9, 
  3.841104101855424*^9}},ExpressionUUID->"81521970-d31c-4299-942f-\
bf65bbaff5fa"],

Cell["Easy distribution to students", "Item",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000419461879*^9}, {3.811000555523288*^9, 
  3.811000568545648*^9}, {3.8411033922228336`*^9, 3.8411033922233334`*^9}, {
  3.841103875602668*^9, 3.8411038978138247`*^9}, {3.841103941656951*^9, 
  3.8411039722675123`*^9}, {3.8411041022865458`*^9, 3.841104109347802*^9}, {
  3.866200074429489*^9, 
  3.8662000744304886`*^9}},ExpressionUUID->"8128967d-65f8-49dc-903d-\
3572776e5368"],

Cell["Please give us your feedback!", "Item",
 CellChangeTimes->{{3.81100023817037*^9, 3.811000256535273*^9}, {
  3.811000378496037*^9, 3.811000419461879*^9}, {3.811000555523288*^9, 
  3.811000568545648*^9}, {3.8411033922228336`*^9, 3.8411033922233334`*^9}, {
  3.841103875602668*^9, 3.8411038978138247`*^9}, {3.841103941656951*^9, 
  3.8411039722675123`*^9}, {3.8411041022865458`*^9, 3.841104109347802*^9}, {
  3.8662000757063828`*^9, 3.866200083541551*^9}, {3.8662045790996284`*^9, 
  3.866204580784252*^9}},ExpressionUUID->"b31edaeb-900d-445d-895c-\
51204204c099"],

Cell["", "PageBreak",
 PageBreakBelow->True,ExpressionUUID->"51301bb6-959d-4be6-89d4-e9749af28ea6"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1045.5, 824.25},
WindowMargins->{{420, Automatic}, {Automatic, 60.75}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6822c2b1-47ab-4ff3-b01e-c18591144e00"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 180, 3, 98, "Title",ExpressionUUID->"68c01391-bd50-408a-9cb1-0ae631ca7a4f"],
Cell[CellGroupData[{
Cell[785, 29, 449, 6, 69, "Chapter",ExpressionUUID->"3010add4-50a4-4689-be7d-64b109b9c40e"],
Cell[1237, 37, 188, 3, 53, "Subtitle",ExpressionUUID->"a157af38-f7a0-413e-afc1-0bd0a914e244"],
Cell[1428, 42, 99, 1, 4, "PageBreak",ExpressionUUID->"d451eff7-a037-4498-8c05-902c281d8f13",
 PageBreakBelow->True],
Cell[CellGroupData[{
Cell[1552, 47, 157, 3, 54, "Subsection",ExpressionUUID->"b8e7e594-aa96-4452-8eb1-3908654b055d"],
Cell[CellGroupData[{
Cell[1734, 54, 377, 6, 32, "Item",ExpressionUUID->"ed40c640-31b4-439e-bc84-b1f68ccc0e9b"],
Cell[2114, 62, 409, 9, 26, "Subitem",ExpressionUUID->"c83dfd46-a633-420a-85c0-87fbafc4dcce"]
}, Open  ]],
Cell[2538, 74, 440, 6, 32, "Item",ExpressionUUID->"330c8605-946d-4cf6-804f-5a966db1892b"],
Cell[2981, 82, 318, 5, 32, "Item",ExpressionUUID->"f99f274f-c87e-4efb-bd72-b2023cfc9918"],
Cell[3302, 89, 99, 1, 4, "PageBreak",ExpressionUUID->"9188c496-6ebd-4bec-bafd-e6146936b064",
 PageBreakBelow->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3450, 96, 276, 4, 69, "Chapter",ExpressionUUID->"c4eea4cb-3c01-4f82-8177-55ee537ab5e1"],
Cell[3729, 102, 510, 9, 32, "Item",ExpressionUUID->"c1d3c731-bbf2-4122-a5fb-062fa4b425db"],
Cell[CellGroupData[{
Cell[4264, 115, 597, 16, 32, "Item",ExpressionUUID->"9d56fa69-cac4-48e4-8dd6-55347f566c6a"],
Cell[4864, 133, 390, 6, 26, "Subitem",ExpressionUUID->"e1bce573-c28f-4b2f-a590-ca06a9d9a14a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5291, 144, 674, 11, 32, "Item",ExpressionUUID->"19b79643-ed17-44ed-9ee2-73d6913dcb41"],
Cell[5968, 157, 10703, 179, 150, "Input",ExpressionUUID->"a6d7cc5b-5dca-4d85-b4ef-eaea2962de21"]
}, Open  ]],
Cell[16686, 339, 255, 4, 32, "Item",ExpressionUUID->"a2f25d89-97f4-4d73-8d00-4d0eb4dc11a4"],
Cell[16944, 345, 762, 16, 32, "Item",ExpressionUUID->"bc68ff30-7144-4f2b-8b2c-6337f7773c2d"],
Cell[17709, 363, 99, 1, 4, "PageBreak",ExpressionUUID->"8e5ef5da-d263-4a2d-9bfd-7c90a1a6ff62",
 PageBreakBelow->True],
Cell[CellGroupData[{
Cell[17833, 368, 316, 5, 54, "Subsection",ExpressionUUID->"68f3565f-f714-4ce8-8e78-f570061c71e7"],
Cell[18152, 375, 314, 5, 32, "Item",ExpressionUUID->"5c395187-99ea-4340-b955-54c268d10d6d"],
Cell[18469, 382, 324, 5, 32, "Item",ExpressionUUID->"ca86f658-8b14-4906-8e83-0697837af450"],
Cell[18796, 389, 387, 6, 32, "Item",ExpressionUUID->"7d019c41-f450-4cee-bd6d-c1f6d4ff44a2"],
Cell[19186, 397, 226, 4, 35, "Text",ExpressionUUID->"7fbf6835-59dc-4f8d-b41a-e4fc00630aba"],
Cell[CellGroupData[{
Cell[19437, 405, 865, 19, 67, "Input",ExpressionUUID->"714260e7-1df0-438a-bdfd-d7d04203fc07"],
Cell[20305, 426, 3824, 75, 144, "Output",ExpressionUUID->"4b89eea1-8c2b-460a-88e1-e5395783f394"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24178, 507, 170, 3, 54, "Subsection",ExpressionUUID->"0dec06d6-5c1d-41ed-9f55-c9b4ed1fc68d"],
Cell[24351, 512, 365, 6, 32, "Item",ExpressionUUID->"a70606d4-f874-416f-979c-065a80d471be"],
Cell[24719, 520, 516, 9, 32, "Item",ExpressionUUID->"5fc2759a-0642-4229-9356-375e3bde60f5"],
Cell[CellGroupData[{
Cell[25260, 533, 426, 6, 32, "Item",ExpressionUUID->"6bed1a7c-178a-4b77-9ae6-313960005b26"],
Cell[25689, 541, 451, 7, 26, "Subitem",ExpressionUUID->"b1fcacac-d3b5-49c1-8667-bdd733fce871"],
Cell[26143, 550, 389, 6, 26, "Subitem",ExpressionUUID->"1c080462-fa1c-41fe-a51f-6660cbbd5ecc"],
Cell[26535, 558, 475, 7, 26, "Subitem",ExpressionUUID->"1eb89f0c-d5ef-4252-9fb0-a031cc2c0405"],
Cell[27013, 567, 574, 9, 26, "Subitem",ExpressionUUID->"adfeea0a-cb7e-4766-9327-af0967d6bcce"]
}, Open  ]],
Cell[27602, 579, 183, 3, 38, "CodeText",ExpressionUUID->"df6c4c86-8617-4e66-ba88-6cc93d403fc1"],
Cell[CellGroupData[{
Cell[27810, 586, 556, 13, 28, "Input",ExpressionUUID->"3268dc0f-cb15-457c-900f-2eaa8c63c071"],
Cell[28369, 601, 3874, 80, 152, "Output",ExpressionUUID->"ec4be0ae-07d3-44ec-ac67-4c0dac59a6cc"]
}, Open  ]],
Cell[32258, 684, 99, 1, 1, "PageBreak",ExpressionUUID->"4d815b14-258c-45ec-9c8d-0356df65d306",
 PageBreakBelow->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[32394, 690, 262, 4, 54, "Subsection",ExpressionUUID->"1dfbaf18-0aa6-48a0-bbc8-26eb69de9848"],
Cell[CellGroupData[{
Cell[32681, 698, 544, 9, 28, "Input",ExpressionUUID->"7f09f8fa-e12f-4883-9fa1-d0613cb9179e"],
Cell[33228, 709, 3434, 69, 103, "Output",ExpressionUUID->"b47b41b2-da8a-42e9-bc03-4ad94def61d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36699, 783, 861, 19, 67, "Input",ExpressionUUID->"005d04fe-688a-4f8b-89c1-adbbde3e186a"],
Cell[37563, 804, 3549, 72, 130, "Output",ExpressionUUID->"f31091bc-6d63-4ca0-8be1-b65bf3cd4190"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41149, 881, 775, 17, 67, "Input",ExpressionUUID->"eaa3478a-8797-4a19-91ab-8c51597a5307"],
Cell[41927, 900, 3278, 67, 97, "Output",ExpressionUUID->"7ef6a023-49aa-4dff-90b5-b7d3db72bfc5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45242, 972, 838, 18, 67, "Input",ExpressionUUID->"6efee116-b2a5-4819-ad2f-638e1c273ccf"],
Cell[46083, 992, 8635, 180, 130, "Output",ExpressionUUID->"e3474241-9a44-430a-9193-fbc51c310336"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54755, 1177, 342, 7, 28, "Input",ExpressionUUID->"25b199a1-36c2-47b2-bf87-2e6b3cb08189"],
Cell[55100, 1186, 3585, 74, 97, "Output",ExpressionUUID->"19e6b20d-2a7f-4ba4-af6d-6595ddf659ff"]
}, Open  ]],
Cell[58700, 1263, 99, 1, 1, "PageBreak",ExpressionUUID->"89800a72-4f93-4d8e-8e21-cfb0b0e76f4c",
 PageBreakBelow->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[58836, 1269, 279, 4, 54, "Subsection",ExpressionUUID->"0a271852-7c26-447c-8837-784287982c77"],
Cell[CellGroupData[{
Cell[59140, 1277, 294, 5, 45, "Subsubsection",ExpressionUUID->"21b790d6-04b0-45fc-9bda-60b1c530ab8b"],
Cell[CellGroupData[{
Cell[59459, 1286, 351, 8, 28, "Input",ExpressionUUID->"59e0a0ed-4d39-4ca0-8e97-8f50b37a1a94"],
Cell[59813, 1296, 3705, 78, 109, "Output",ExpressionUUID->"63ced5c5-fd64-4443-81dc-8ae1761f98ea"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[63567, 1380, 167, 3, 45, "Subsubsection",ExpressionUUID->"4163c527-d31b-4955-80b2-9ab06fb2cfe0"],
Cell[CellGroupData[{
Cell[63759, 1387, 1106, 28, 86, "Input",ExpressionUUID->"169e3061-8f7b-486c-ba98-3894e4919088"],
Cell[64868, 1417, 83080, 1392, 305, "Output",ExpressionUUID->"f20c7b72-b837-41fc-8293-8f13f5bf9d3a"]
}, Open  ]],
Cell[147963, 2812, 188, 3, 40, "Text",ExpressionUUID->"f28eee4b-be6e-4b22-a039-ccd59543f15e"],
Cell[148154, 2817, 1709, 37, 37, "Input",ExpressionUUID->"6f2fe2f8-460f-4b1a-a338-d42f480e7893"],
Cell[CellGroupData[{
Cell[149888, 2858, 704, 15, 39, "Input",ExpressionUUID->"603d9075-d026-4149-9fd6-06b18f608468"],
Cell[150595, 2875, 8422, 188, 265, "Output",ExpressionUUID->"ffe85c36-a715-47cf-a6fb-da78aa4f0092"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159054, 3068, 2485, 58, 136, "Input",ExpressionUUID->"a4e86b56-4285-4259-91c0-02b1d9137809"],
Cell[161542, 3128, 12143, 207, 136, "Output",ExpressionUUID->"9951c3c3-ebd0-43ac-bf9c-9a2fdafe44c9"]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[173731, 3341, 161, 3, 45, "Subsubsection",ExpressionUUID->"9d6e3068-629e-4d44-b1d1-02dc7fac7cf5"],
Cell[CellGroupData[{
Cell[173917, 3348, 1136, 28, 86, "Input",ExpressionUUID->"bc26e5ef-4b19-4e2c-8fd6-48dff7394e40"],
Cell[175056, 3378, 12955, 240, 144, "Output",ExpressionUUID->"7124dd99-b2c5-41c3-8d23-bb37721b9df2"]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[188057, 3624, 156, 3, 45, "Subsubsection",ExpressionUUID->"b073e000-781f-4b78-88ee-10dde7ae4f13"],
Cell[CellGroupData[{
Cell[188238, 3631, 2787, 65, 212, "Input",ExpressionUUID->"b94eb42c-313c-4792-9ceb-28dc0b06b47c"],
Cell[191028, 3698, 140477, 2326, 342, "Output",ExpressionUUID->"f40fd8c2-8956-461f-bf68-0fc208d4cf0d"]
}, {2}]],
Cell[331517, 6027, 99, 1, 1, "PageBreak",ExpressionUUID->"66345c7b-c3a3-400a-8df9-b18a711501a9",
 PageBreakBelow->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[331665, 6034, 191, 3, 54, "Subsection",ExpressionUUID->"24f57a37-c155-4e0f-97c0-7cb3cd11200a"],
Cell[331859, 6039, 328, 6, 32, "Item",ExpressionUUID->"442fb01f-0deb-45ea-a78e-18a73accf2f7"],
Cell[332190, 6047, 177, 3, 38, "CodeText",ExpressionUUID->"9762be66-6f2c-40d0-9191-16bb12f63eb0"],
Cell[CellGroupData[{
Cell[332392, 6054, 1465, 31, 75, "Input",ExpressionUUID->"e566a216-f460-4b18-be9a-83e630e0db71"],
Cell[333860, 6087, 28213, 556, 235, "Output",ExpressionUUID->"1b9c0594-4532-4b51-917d-045a07325b10"]
}, Open  ]],
Cell[362088, 6646, 169, 3, 38, "CodeText",ExpressionUUID->"d87cbc2a-46c4-4abb-81bf-44fbe1b8e1f1"],
Cell[CellGroupData[{
Cell[362282, 6653, 246, 4, 28, "Input",ExpressionUUID->"365aa65d-9ee7-4bf5-aa7f-83550491fb56"],
Cell[362531, 6659, 3674, 76, 52, "Output",ExpressionUUID->"4252c612-bfb6-4b97-af5e-ce380a067e1a"]
}, Open  ]],
Cell[366220, 6738, 196, 3, 38, "CodeText",ExpressionUUID->"0da622dd-1b46-44cb-baae-c9d2965ff86c"],
Cell[CellGroupData[{
Cell[366441, 6745, 247, 4, 28, "Input",ExpressionUUID->"e424f1d7-3199-425c-820a-c237a245519c"],
Cell[366691, 6751, 3510, 69, 115, "Output",ExpressionUUID->"ca427657-76f3-4e81-95d3-34e0e60aee06"]
}, Open  ]],
Cell[370216, 6823, 189, 3, 32, "Item",ExpressionUUID->"a7eb57cc-b95b-4d5c-9903-23445bfff450"]
}, Open  ]],
Cell[CellGroupData[{
Cell[370442, 6831, 167, 3, 54, "Subsection",ExpressionUUID->"eb417f71-22ed-4932-940d-4350f618356a"],
Cell[370612, 6836, 189, 3, 38, "CodeText",ExpressionUUID->"43d5ff86-08be-48be-9ce2-2c43f8b701f8"],
Cell[CellGroupData[{
Cell[370826, 6843, 935, 22, 86, "Input",ExpressionUUID->"e94a6961-3676-4811-ad84-e1cca06c074a",
 CellID->2081513519],
Cell[371764, 6867, 3408, 67, 115, "Output",ExpressionUUID->"71178ba2-9a50-4697-9498-09319683d9ef"]
}, Open  ]],
Cell[375187, 6937, 99, 1, 1, "PageBreak",ExpressionUUID->"eab5d3ef-fcdc-4377-b1ee-2871655779bc",
 PageBreakBelow->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[375323, 6943, 479, 7, 54, "Subsection",ExpressionUUID->"ba1ab39b-7bc7-4d83-b287-b14813c4aa29"],
Cell[CellGroupData[{
Cell[375827, 6954, 323, 5, 45, "Subsubsection",ExpressionUUID->"38040a16-149e-4349-96e3-fbdc5dc1fe07"],
Cell[376153, 6961, 402, 6, 25, "Subsubitem",ExpressionUUID->"9d4a700e-fdf7-4847-b6e9-491796013e97"],
Cell[376558, 6969, 326, 5, 35, "Text",ExpressionUUID->"838e82fe-1473-4e11-bacb-c5c460e3248f"],
Cell[376887, 6976, 524, 11, 25, "Subsubitem",ExpressionUUID->"67844362-e17f-49d1-9e1d-eb22146868c7"],
Cell[377414, 6989, 506, 8, 25, "Subsubitem",ExpressionUUID->"3bf2470a-a143-41e5-813f-e2261c718316"],
Cell[377923, 6999, 1827, 38, 34, "Subsubitem",ExpressionUUID->"9ec8ca29-ffd0-4809-9061-0997cbb86334"],
Cell[379753, 7039, 99, 1, 1, "PageBreak",ExpressionUUID->"38b74c29-f854-4ae2-a7c3-673a9c109881",
 PageBreakBelow->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[379889, 7045, 166, 3, 45, "Subsubsection",ExpressionUUID->"6d0e71d4-6409-49a3-b002-508d8439ed98"],
Cell[CellGroupData[{
Cell[380080, 7052, 507, 9, 32, "Item",ExpressionUUID->"5e6942a7-12f1-44cb-a9cc-9455e7c26f12"],
Cell[380590, 7063, 44065, 726, 394, "Input",ExpressionUUID->"610e8397-b4a1-4836-b188-01fac4992857"]
}, Open  ]],
Cell[424670, 7792, 335, 5, 32, "Item",ExpressionUUID->"2454de25-184a-4181-906a-38ae3601c04f"],
Cell[425008, 7799, 456, 7, 32, "Item",ExpressionUUID->"89bed26e-f306-4783-b9c9-c7d8de2ef298"]
}, Open  ]],
Cell[CellGroupData[{
Cell[425501, 7811, 472, 7, 45, "Subsubsection",ExpressionUUID->"d3d16cd1-4822-4ce6-b8da-5d83dd1b7d33"],
Cell[425976, 7820, 235, 8, 35, "Text",ExpressionUUID->"cb402cb2-06f8-4cb6-9d00-09e251a32436"],
Cell[426214, 7830, 243, 4, 32, "Item",ExpressionUUID->"db0d172b-8de7-4490-bbcd-f520fe7d139c"],
Cell[426460, 7836, 153, 3, 32, "Item",ExpressionUUID->"e87e127f-3b33-4f08-8737-d80ff3b9ab0b"],
Cell[426616, 7841, 152, 3, 32, "Item",ExpressionUUID->"510b995e-634b-443d-9c48-9fb33a6c422f"],
Cell[426771, 7846, 239, 8, 35, "Text",ExpressionUUID->"896d4a0c-1aa3-40b8-b782-4be375bfae38"],
Cell[427013, 7856, 227, 4, 32, "Item",ExpressionUUID->"952a42f3-3081-447c-8b30-425e0432c9c5"],
Cell[427243, 7862, 324, 6, 32, "Item",ExpressionUUID->"72db937a-d479-4ec2-acf2-9fcaf8739258"],
Cell[427570, 7870, 99, 1, 4, "PageBreak",ExpressionUUID->"c98f5331-7b2f-4ee1-89e7-835b9deb69af",
 PageBreakBelow->True]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[427730, 7878, 269, 4, 69, "Chapter",ExpressionUUID->"f4ddc869-4313-4dd8-b8d7-956cb1df57f3"],
Cell[428002, 7884, 246, 6, 35, "Text",ExpressionUUID->"63702fe9-718e-47d2-a038-3e6c2f4db6f1"],
Cell[428251, 7892, 229, 4, 35, "Text",ExpressionUUID->"551861fe-e587-45a1-a386-aedfa0f77237"],
Cell[CellGroupData[{
Cell[428505, 7900, 443, 10, 28, "Input",ExpressionUUID->"19f8dd6a-2e7a-4429-b3fb-d1ea18aa2e6e"],
Cell[428951, 7912, 373, 7, 35, "Output",ExpressionUUID->"21b90caa-5f59-4479-bcd5-9fc5ca1d4176"]
}, {2}]],
Cell[CellGroupData[{
Cell[429358, 7924, 495, 11, 48, "Input",ExpressionUUID->"8de053e4-f766-4ce6-a4cb-3e3d11421a11"],
Cell[429856, 7937, 18723, 367, 139, "Output",ExpressionUUID->"4f8e62c5-a5de-4942-bed8-68cd026c38d1"]
}, Open  ]],
Cell[448594, 8307, 173, 3, 35, "Text",ExpressionUUID->"8eb1a43d-bcda-45cc-8793-465084f23804"],
Cell[448770, 8312, 99, 1, 4, "PageBreak",ExpressionUUID->"ce18f128-df55-403f-b56c-b2c7643ba6e6",
 PageBreakBelow->True],
Cell[CellGroupData[{
Cell[448894, 8317, 204, 3, 54, "Subsection",ExpressionUUID->"4cd741c4-ca1b-4d81-80df-d5603d971c67"],
Cell[449101, 8322, 489, 7, 35, "Text",ExpressionUUID->"9ae8ebc6-0490-4d59-b975-a791044bb097"],
Cell[449593, 8331, 371, 6, 32, "Item",ExpressionUUID->"287cb8a7-3186-48d2-b505-9cab2a463203"],
Cell[449967, 8339, 517, 9, 32, "Item",ExpressionUUID->"81521970-d31c-4299-942f-bf65bbaff5fa"],
Cell[450487, 8350, 519, 8, 32, "Item",ExpressionUUID->"8128967d-65f8-49dc-903d-3572776e5368"],
Cell[451009, 8360, 567, 8, 32, "Item",ExpressionUUID->"b31edaeb-900d-445d-895c-51204204c099"],
Cell[451579, 8370, 99, 1, 4, "PageBreak",ExpressionUUID->"51301bb6-959d-4be6-89d4-e9749af28ea6",
 PageBreakBelow->True]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

